// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/sidecar.proto

package datapower.noesis.v1;

public interface DeltaConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.DeltaConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Delta table path (S3/GCS/HDFS path)
   * </pre>
   *
   * <code>string table_path = 1 [json_name = "tablePath"];</code>
   * @return The tablePath.
   */
  java.lang.String getTablePath();
  /**
   * <pre>
   * Delta table path (S3/GCS/HDFS path)
   * </pre>
   *
   * <code>string table_path = 1 [json_name = "tablePath"];</code>
   * @return The bytes for tablePath.
   */
  com.google.protobuf.ByteString
      getTablePathBytes();

  /**
   * <pre>
   * APPEND, MERGE, OVERWRITE
   * </pre>
   *
   * <code>.datapower.noesis.v1.WriteMode write_mode = 2 [json_name = "writeMode"];</code>
   * @return The enum numeric value on the wire for writeMode.
   */
  int getWriteModeValue();
  /**
   * <pre>
   * APPEND, MERGE, OVERWRITE
   * </pre>
   *
   * <code>.datapower.noesis.v1.WriteMode write_mode = 2 [json_name = "writeMode"];</code>
   * @return The writeMode.
   */
  datapower.noesis.v1.WriteMode getWriteMode();

  /**
   * <pre>
   * Compression algorithm
   * </pre>
   *
   * <code>.datapower.noesis.v1.CompressionCodec compression = 3 [json_name = "compression"];</code>
   * @return The enum numeric value on the wire for compression.
   */
  int getCompressionValue();
  /**
   * <pre>
   * Compression algorithm
   * </pre>
   *
   * <code>.datapower.noesis.v1.CompressionCodec compression = 3 [json_name = "compression"];</code>
   * @return The compression.
   */
  datapower.noesis.v1.CompressionCodec getCompression();

  /**
   * <pre>
   * Target data file size (default 128MB)
   * </pre>
   *
   * <code>int64 target_file_size_bytes = 4 [json_name = "targetFileSizeBytes"];</code>
   * @return The targetFileSizeBytes.
   */
  long getTargetFileSizeBytes();

  /**
   * <pre>
   * Delta table properties
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 5 [json_name = "tableProperties"];</code>
   */
  int getTablePropertiesCount();
  /**
   * <pre>
   * Delta table properties
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 5 [json_name = "tableProperties"];</code>
   */
  boolean containsTableProperties(
      java.lang.String key);
  /**
   * Use {@link #getTablePropertiesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getTableProperties();
  /**
   * <pre>
   * Delta table properties
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 5 [json_name = "tableProperties"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getTablePropertiesMap();
  /**
   * <pre>
   * Delta table properties
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 5 [json_name = "tableProperties"];</code>
   */
  /* nullable */
java.lang.String getTablePropertiesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Delta table properties
   * </pre>
   *
   * <code>map&lt;string, string&gt; table_properties = 5 [json_name = "tableProperties"];</code>
   */
  java.lang.String getTablePropertiesOrThrow(
      java.lang.String key);
}
