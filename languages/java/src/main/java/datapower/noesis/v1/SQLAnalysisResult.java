// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

/**
 * <pre>
 * SQLAnalysisResult captures the results of SQL query analysis
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.SQLAnalysisResult}
 */
public final class SQLAnalysisResult extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.SQLAnalysisResult)
    SQLAnalysisResultOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SQLAnalysisResult.newBuilder() to construct.
  private SQLAnalysisResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SQLAnalysisResult() {
    parseErrors_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    referencedSources_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    outputColumns_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    queryType_ = "";
    joinTypes_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SQLAnalysisResult();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 4:
        return internalGetSourceColumns();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_SQLAnalysisResult_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.SQLAnalysisResult.class, datapower.noesis.v1.SQLAnalysisResult.Builder.class);
  }

  public static final int VALID_FIELD_NUMBER = 1;
  private boolean valid_ = false;
  /**
   * <pre>
   * Whether SQL is valid
   * </pre>
   *
   * <code>bool valid = 1 [json_name = "valid"];</code>
   * @return The valid.
   */
  @java.lang.Override
  public boolean getValid() {
    return valid_;
  }

  public static final int PARSE_ERRORS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList parseErrors_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @return A list containing the parseErrors.
   */
  public com.google.protobuf.ProtocolStringList
      getParseErrorsList() {
    return parseErrors_;
  }
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @return The count of parseErrors.
   */
  public int getParseErrorsCount() {
    return parseErrors_.size();
  }
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @param index The index of the element to return.
   * @return The parseErrors at the given index.
   */
  public java.lang.String getParseErrors(int index) {
    return parseErrors_.get(index);
  }
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the parseErrors at the given index.
   */
  public com.google.protobuf.ByteString
      getParseErrorsBytes(int index) {
    return parseErrors_.getByteString(index);
  }

  public static final int REFERENCED_SOURCES_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList referencedSources_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @return A list containing the referencedSources.
   */
  public com.google.protobuf.ProtocolStringList
      getReferencedSourcesList() {
    return referencedSources_;
  }
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @return The count of referencedSources.
   */
  public int getReferencedSourcesCount() {
    return referencedSources_.size();
  }
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @param index The index of the element to return.
   * @return The referencedSources at the given index.
   */
  public java.lang.String getReferencedSources(int index) {
    return referencedSources_.get(index);
  }
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the referencedSources at the given index.
   */
  public com.google.protobuf.ByteString
      getReferencedSourcesBytes(int index) {
    return referencedSources_.getByteString(index);
  }

  public static final int SOURCE_COLUMNS_FIELD_NUMBER = 4;
  private static final class SourceColumnsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, datapower.noesis.v1.ColumnList> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, datapower.noesis.v1.ColumnList>newDefaultInstance(
                datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_SQLAnalysisResult_SourceColumnsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                datapower.noesis.v1.ColumnList.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, datapower.noesis.v1.ColumnList> sourceColumns_;
  private com.google.protobuf.MapField<java.lang.String, datapower.noesis.v1.ColumnList>
  internalGetSourceColumns() {
    if (sourceColumns_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          SourceColumnsDefaultEntryHolder.defaultEntry);
    }
    return sourceColumns_;
  }
  public int getSourceColumnsCount() {
    return internalGetSourceColumns().getMap().size();
  }
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  @java.lang.Override
  public boolean containsSourceColumns(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetSourceColumns().getMap().containsKey(key);
  }
  /**
   * Use {@link #getSourceColumnsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> getSourceColumns() {
    return getSourceColumnsMap();
  }
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> getSourceColumnsMap() {
    return internalGetSourceColumns().getMap();
  }
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  @java.lang.Override
  public /* nullable */
datapower.noesis.v1.ColumnList getSourceColumnsOrDefault(
      java.lang.String key,
      /* nullable */
datapower.noesis.v1.ColumnList defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> map =
        internalGetSourceColumns().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.ColumnList getSourceColumnsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> map =
        internalGetSourceColumns().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int OUTPUT_COLUMNS_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList outputColumns_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @return A list containing the outputColumns.
   */
  public com.google.protobuf.ProtocolStringList
      getOutputColumnsList() {
    return outputColumns_;
  }
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @return The count of outputColumns.
   */
  public int getOutputColumnsCount() {
    return outputColumns_.size();
  }
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @param index The index of the element to return.
   * @return The outputColumns at the given index.
   */
  public java.lang.String getOutputColumns(int index) {
    return outputColumns_.get(index);
  }
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the outputColumns at the given index.
   */
  public com.google.protobuf.ByteString
      getOutputColumnsBytes(int index) {
    return outputColumns_.getByteString(index);
  }

  public static final int QUERY_TYPE_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private volatile java.lang.Object queryType_ = "";
  /**
   * <pre>
   * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
   * </pre>
   *
   * <code>string query_type = 6 [json_name = "queryType"];</code>
   * @return The queryType.
   */
  @java.lang.Override
  public java.lang.String getQueryType() {
    java.lang.Object ref = queryType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      queryType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
   * </pre>
   *
   * <code>string query_type = 6 [json_name = "queryType"];</code>
   * @return The bytes for queryType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getQueryTypeBytes() {
    java.lang.Object ref = queryType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      queryType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HAS_GROUPING_FIELD_NUMBER = 7;
  private boolean hasGrouping_ = false;
  /**
   * <pre>
   * Has GROUP BY clause
   * </pre>
   *
   * <code>bool has_grouping = 7 [json_name = "hasGrouping"];</code>
   * @return The hasGrouping.
   */
  @java.lang.Override
  public boolean getHasGrouping() {
    return hasGrouping_;
  }

  public static final int HAS_WINDOWING_FIELD_NUMBER = 8;
  private boolean hasWindowing_ = false;
  /**
   * <pre>
   * Has window functions
   * </pre>
   *
   * <code>bool has_windowing = 8 [json_name = "hasWindowing"];</code>
   * @return The hasWindowing.
   */
  @java.lang.Override
  public boolean getHasWindowing() {
    return hasWindowing_;
  }

  public static final int JOIN_TYPES_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList joinTypes_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @return A list containing the joinTypes.
   */
  public com.google.protobuf.ProtocolStringList
      getJoinTypesList() {
    return joinTypes_;
  }
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @return The count of joinTypes.
   */
  public int getJoinTypesCount() {
    return joinTypes_.size();
  }
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @param index The index of the element to return.
   * @return The joinTypes at the given index.
   */
  public java.lang.String getJoinTypes(int index) {
    return joinTypes_.get(index);
  }
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the joinTypes at the given index.
   */
  public com.google.protobuf.ByteString
      getJoinTypesBytes(int index) {
    return joinTypes_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (valid_ != false) {
      output.writeBool(1, valid_);
    }
    for (int i = 0; i < parseErrors_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, parseErrors_.getRaw(i));
    }
    for (int i = 0; i < referencedSources_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, referencedSources_.getRaw(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetSourceColumns(),
        SourceColumnsDefaultEntryHolder.defaultEntry,
        4);
    for (int i = 0; i < outputColumns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, outputColumns_.getRaw(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(queryType_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, queryType_);
    }
    if (hasGrouping_ != false) {
      output.writeBool(7, hasGrouping_);
    }
    if (hasWindowing_ != false) {
      output.writeBool(8, hasWindowing_);
    }
    for (int i = 0; i < joinTypes_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, joinTypes_.getRaw(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (valid_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, valid_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < parseErrors_.size(); i++) {
        dataSize += computeStringSizeNoTag(parseErrors_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getParseErrorsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < referencedSources_.size(); i++) {
        dataSize += computeStringSizeNoTag(referencedSources_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getReferencedSourcesList().size();
    }
    for (java.util.Map.Entry<java.lang.String, datapower.noesis.v1.ColumnList> entry
         : internalGetSourceColumns().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, datapower.noesis.v1.ColumnList>
      sourceColumns__ = SourceColumnsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, sourceColumns__);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < outputColumns_.size(); i++) {
        dataSize += computeStringSizeNoTag(outputColumns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getOutputColumnsList().size();
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(queryType_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, queryType_);
    }
    if (hasGrouping_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, hasGrouping_);
    }
    if (hasWindowing_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, hasWindowing_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < joinTypes_.size(); i++) {
        dataSize += computeStringSizeNoTag(joinTypes_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getJoinTypesList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.SQLAnalysisResult)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.SQLAnalysisResult other = (datapower.noesis.v1.SQLAnalysisResult) obj;

    if (getValid()
        != other.getValid()) return false;
    if (!getParseErrorsList()
        .equals(other.getParseErrorsList())) return false;
    if (!getReferencedSourcesList()
        .equals(other.getReferencedSourcesList())) return false;
    if (!internalGetSourceColumns().equals(
        other.internalGetSourceColumns())) return false;
    if (!getOutputColumnsList()
        .equals(other.getOutputColumnsList())) return false;
    if (!getQueryType()
        .equals(other.getQueryType())) return false;
    if (getHasGrouping()
        != other.getHasGrouping()) return false;
    if (getHasWindowing()
        != other.getHasWindowing()) return false;
    if (!getJoinTypesList()
        .equals(other.getJoinTypesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VALID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getValid());
    if (getParseErrorsCount() > 0) {
      hash = (37 * hash) + PARSE_ERRORS_FIELD_NUMBER;
      hash = (53 * hash) + getParseErrorsList().hashCode();
    }
    if (getReferencedSourcesCount() > 0) {
      hash = (37 * hash) + REFERENCED_SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getReferencedSourcesList().hashCode();
    }
    if (!internalGetSourceColumns().getMap().isEmpty()) {
      hash = (37 * hash) + SOURCE_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetSourceColumns().hashCode();
    }
    if (getOutputColumnsCount() > 0) {
      hash = (37 * hash) + OUTPUT_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getOutputColumnsList().hashCode();
    }
    hash = (37 * hash) + QUERY_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getQueryType().hashCode();
    hash = (37 * hash) + HAS_GROUPING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getHasGrouping());
    hash = (37 * hash) + HAS_WINDOWING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getHasWindowing());
    if (getJoinTypesCount() > 0) {
      hash = (37 * hash) + JOIN_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + getJoinTypesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.SQLAnalysisResult parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.SQLAnalysisResult parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.SQLAnalysisResult parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.SQLAnalysisResult prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SQLAnalysisResult captures the results of SQL query analysis
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.SQLAnalysisResult}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.SQLAnalysisResult)
      datapower.noesis.v1.SQLAnalysisResultOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetSourceColumns();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetMutableSourceColumns();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_SQLAnalysisResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.SQLAnalysisResult.class, datapower.noesis.v1.SQLAnalysisResult.Builder.class);
    }

    // Construct using datapower.noesis.v1.SQLAnalysisResult.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      valid_ = false;
      parseErrors_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      referencedSources_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      internalGetMutableSourceColumns().clear();
      outputColumns_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      queryType_ = "";
      hasGrouping_ = false;
      hasWindowing_ = false;
      joinTypes_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.SQLAnalysisResult getDefaultInstanceForType() {
      return datapower.noesis.v1.SQLAnalysisResult.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.SQLAnalysisResult build() {
      datapower.noesis.v1.SQLAnalysisResult result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.SQLAnalysisResult buildPartial() {
      datapower.noesis.v1.SQLAnalysisResult result = new datapower.noesis.v1.SQLAnalysisResult(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(datapower.noesis.v1.SQLAnalysisResult result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.valid_ = valid_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        parseErrors_.makeImmutable();
        result.parseErrors_ = parseErrors_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        referencedSources_.makeImmutable();
        result.referencedSources_ = referencedSources_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.sourceColumns_ = internalGetSourceColumns();
        result.sourceColumns_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        outputColumns_.makeImmutable();
        result.outputColumns_ = outputColumns_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.queryType_ = queryType_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.hasGrouping_ = hasGrouping_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.hasWindowing_ = hasWindowing_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        joinTypes_.makeImmutable();
        result.joinTypes_ = joinTypes_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.SQLAnalysisResult) {
        return mergeFrom((datapower.noesis.v1.SQLAnalysisResult)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.SQLAnalysisResult other) {
      if (other == datapower.noesis.v1.SQLAnalysisResult.getDefaultInstance()) return this;
      if (other.getValid() != false) {
        setValid(other.getValid());
      }
      if (!other.parseErrors_.isEmpty()) {
        if (parseErrors_.isEmpty()) {
          parseErrors_ = other.parseErrors_;
          bitField0_ |= 0x00000002;
        } else {
          ensureParseErrorsIsMutable();
          parseErrors_.addAll(other.parseErrors_);
        }
        onChanged();
      }
      if (!other.referencedSources_.isEmpty()) {
        if (referencedSources_.isEmpty()) {
          referencedSources_ = other.referencedSources_;
          bitField0_ |= 0x00000004;
        } else {
          ensureReferencedSourcesIsMutable();
          referencedSources_.addAll(other.referencedSources_);
        }
        onChanged();
      }
      internalGetMutableSourceColumns().mergeFrom(
          other.internalGetSourceColumns());
      bitField0_ |= 0x00000008;
      if (!other.outputColumns_.isEmpty()) {
        if (outputColumns_.isEmpty()) {
          outputColumns_ = other.outputColumns_;
          bitField0_ |= 0x00000010;
        } else {
          ensureOutputColumnsIsMutable();
          outputColumns_.addAll(other.outputColumns_);
        }
        onChanged();
      }
      if (!other.getQueryType().isEmpty()) {
        queryType_ = other.queryType_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      if (other.getHasGrouping() != false) {
        setHasGrouping(other.getHasGrouping());
      }
      if (other.getHasWindowing() != false) {
        setHasWindowing(other.getHasWindowing());
      }
      if (!other.joinTypes_.isEmpty()) {
        if (joinTypes_.isEmpty()) {
          joinTypes_ = other.joinTypes_;
          bitField0_ |= 0x00000100;
        } else {
          ensureJoinTypesIsMutable();
          joinTypes_.addAll(other.joinTypes_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              valid_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureParseErrorsIsMutable();
              parseErrors_.add(s);
              break;
            } // case 18
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureReferencedSourcesIsMutable();
              referencedSources_.add(s);
              break;
            } // case 26
            case 34: {
              com.google.protobuf.MapEntry<java.lang.String, datapower.noesis.v1.ColumnList>
              sourceColumns__ = input.readMessage(
                  SourceColumnsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableSourceColumns().getMutableMap().put(
                  sourceColumns__.getKey(), sourceColumns__.getValue());
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureOutputColumnsIsMutable();
              outputColumns_.add(s);
              break;
            } // case 42
            case 50: {
              queryType_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 56: {
              hasGrouping_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              hasWindowing_ = input.readBool();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureJoinTypesIsMutable();
              joinTypes_.add(s);
              break;
            } // case 74
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean valid_ ;
    /**
     * <pre>
     * Whether SQL is valid
     * </pre>
     *
     * <code>bool valid = 1 [json_name = "valid"];</code>
     * @return The valid.
     */
    @java.lang.Override
    public boolean getValid() {
      return valid_;
    }
    /**
     * <pre>
     * Whether SQL is valid
     * </pre>
     *
     * <code>bool valid = 1 [json_name = "valid"];</code>
     * @param value The valid to set.
     * @return This builder for chaining.
     */
    public Builder setValid(boolean value) {

      valid_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether SQL is valid
     * </pre>
     *
     * <code>bool valid = 1 [json_name = "valid"];</code>
     * @return This builder for chaining.
     */
    public Builder clearValid() {
      bitField0_ = (bitField0_ & ~0x00000001);
      valid_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList parseErrors_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureParseErrorsIsMutable() {
      if (!parseErrors_.isModifiable()) {
        parseErrors_ = new com.google.protobuf.LazyStringArrayList(parseErrors_);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @return A list containing the parseErrors.
     */
    public com.google.protobuf.ProtocolStringList
        getParseErrorsList() {
      parseErrors_.makeImmutable();
      return parseErrors_;
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @return The count of parseErrors.
     */
    public int getParseErrorsCount() {
      return parseErrors_.size();
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @param index The index of the element to return.
     * @return The parseErrors at the given index.
     */
    public java.lang.String getParseErrors(int index) {
      return parseErrors_.get(index);
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the parseErrors at the given index.
     */
    public com.google.protobuf.ByteString
        getParseErrorsBytes(int index) {
      return parseErrors_.getByteString(index);
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @param index The index to set the value at.
     * @param value The parseErrors to set.
     * @return This builder for chaining.
     */
    public Builder setParseErrors(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureParseErrorsIsMutable();
      parseErrors_.set(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @param value The parseErrors to add.
     * @return This builder for chaining.
     */
    public Builder addParseErrors(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureParseErrorsIsMutable();
      parseErrors_.add(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @param values The parseErrors to add.
     * @return This builder for chaining.
     */
    public Builder addAllParseErrors(
        java.lang.Iterable<java.lang.String> values) {
      ensureParseErrorsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, parseErrors_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @return This builder for chaining.
     */
    public Builder clearParseErrors() {
      parseErrors_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Parse errors (if any)
     * </pre>
     *
     * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
     * @param value The bytes of the parseErrors to add.
     * @return This builder for chaining.
     */
    public Builder addParseErrorsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureParseErrorsIsMutable();
      parseErrors_.add(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList referencedSources_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureReferencedSourcesIsMutable() {
      if (!referencedSources_.isModifiable()) {
        referencedSources_ = new com.google.protobuf.LazyStringArrayList(referencedSources_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @return A list containing the referencedSources.
     */
    public com.google.protobuf.ProtocolStringList
        getReferencedSourcesList() {
      referencedSources_.makeImmutable();
      return referencedSources_;
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @return The count of referencedSources.
     */
    public int getReferencedSourcesCount() {
      return referencedSources_.size();
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @param index The index of the element to return.
     * @return The referencedSources at the given index.
     */
    public java.lang.String getReferencedSources(int index) {
      return referencedSources_.get(index);
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the referencedSources at the given index.
     */
    public com.google.protobuf.ByteString
        getReferencedSourcesBytes(int index) {
      return referencedSources_.getByteString(index);
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @param index The index to set the value at.
     * @param value The referencedSources to set.
     * @return This builder for chaining.
     */
    public Builder setReferencedSources(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureReferencedSourcesIsMutable();
      referencedSources_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @param value The referencedSources to add.
     * @return This builder for chaining.
     */
    public Builder addReferencedSources(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureReferencedSourcesIsMutable();
      referencedSources_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @param values The referencedSources to add.
     * @return This builder for chaining.
     */
    public Builder addAllReferencedSources(
        java.lang.Iterable<java.lang.String> values) {
      ensureReferencedSourcesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, referencedSources_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @return This builder for chaining.
     */
    public Builder clearReferencedSources() {
      referencedSources_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Referenced source aliases
     * </pre>
     *
     * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
     * @param value The bytes of the referencedSources to add.
     * @return This builder for chaining.
     */
    public Builder addReferencedSourcesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureReferencedSourcesIsMutable();
      referencedSources_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, datapower.noesis.v1.ColumnList> sourceColumns_;
    private com.google.protobuf.MapField<java.lang.String, datapower.noesis.v1.ColumnList>
        internalGetSourceColumns() {
      if (sourceColumns_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SourceColumnsDefaultEntryHolder.defaultEntry);
      }
      return sourceColumns_;
    }
    private com.google.protobuf.MapField<java.lang.String, datapower.noesis.v1.ColumnList>
        internalGetMutableSourceColumns() {
      if (sourceColumns_ == null) {
        sourceColumns_ = com.google.protobuf.MapField.newMapField(
            SourceColumnsDefaultEntryHolder.defaultEntry);
      }
      if (!sourceColumns_.isMutable()) {
        sourceColumns_ = sourceColumns_.copy();
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return sourceColumns_;
    }
    public int getSourceColumnsCount() {
      return internalGetSourceColumns().getMap().size();
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    @java.lang.Override
    public boolean containsSourceColumns(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetSourceColumns().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSourceColumnsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> getSourceColumns() {
      return getSourceColumnsMap();
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> getSourceColumnsMap() {
      return internalGetSourceColumns().getMap();
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    @java.lang.Override
    public /* nullable */
datapower.noesis.v1.ColumnList getSourceColumnsOrDefault(
        java.lang.String key,
        /* nullable */
datapower.noesis.v1.ColumnList defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> map =
          internalGetSourceColumns().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    @java.lang.Override
    public datapower.noesis.v1.ColumnList getSourceColumnsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> map =
          internalGetSourceColumns().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearSourceColumns() {
      bitField0_ = (bitField0_ & ~0x00000008);
      internalGetMutableSourceColumns().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    public Builder removeSourceColumns(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableSourceColumns().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList>
        getMutableSourceColumns() {
      bitField0_ |= 0x00000008;
      return internalGetMutableSourceColumns().getMutableMap();
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    public Builder putSourceColumns(
        java.lang.String key,
        datapower.noesis.v1.ColumnList value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableSourceColumns().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <pre>
     * Referenced columns per source
     * </pre>
     *
     * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
     */
    public Builder putAllSourceColumns(
        java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList> values) {
      internalGetMutableSourceColumns().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000008;
      return this;
    }

    private com.google.protobuf.LazyStringArrayList outputColumns_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureOutputColumnsIsMutable() {
      if (!outputColumns_.isModifiable()) {
        outputColumns_ = new com.google.protobuf.LazyStringArrayList(outputColumns_);
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @return A list containing the outputColumns.
     */
    public com.google.protobuf.ProtocolStringList
        getOutputColumnsList() {
      outputColumns_.makeImmutable();
      return outputColumns_;
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @return The count of outputColumns.
     */
    public int getOutputColumnsCount() {
      return outputColumns_.size();
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @param index The index of the element to return.
     * @return The outputColumns at the given index.
     */
    public java.lang.String getOutputColumns(int index) {
      return outputColumns_.get(index);
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the outputColumns at the given index.
     */
    public com.google.protobuf.ByteString
        getOutputColumnsBytes(int index) {
      return outputColumns_.getByteString(index);
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @param index The index to set the value at.
     * @param value The outputColumns to set.
     * @return This builder for chaining.
     */
    public Builder setOutputColumns(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureOutputColumnsIsMutable();
      outputColumns_.set(index, value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @param value The outputColumns to add.
     * @return This builder for chaining.
     */
    public Builder addOutputColumns(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureOutputColumnsIsMutable();
      outputColumns_.add(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @param values The outputColumns to add.
     * @return This builder for chaining.
     */
    public Builder addAllOutputColumns(
        java.lang.Iterable<java.lang.String> values) {
      ensureOutputColumnsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, outputColumns_);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOutputColumns() {
      outputColumns_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output columns (SELECT list)
     * </pre>
     *
     * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
     * @param value The bytes of the outputColumns to add.
     * @return This builder for chaining.
     */
    public Builder addOutputColumnsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureOutputColumnsIsMutable();
      outputColumns_.add(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private java.lang.Object queryType_ = "";
    /**
     * <pre>
     * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
     * </pre>
     *
     * <code>string query_type = 6 [json_name = "queryType"];</code>
     * @return The queryType.
     */
    public java.lang.String getQueryType() {
      java.lang.Object ref = queryType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        queryType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
     * </pre>
     *
     * <code>string query_type = 6 [json_name = "queryType"];</code>
     * @return The bytes for queryType.
     */
    public com.google.protobuf.ByteString
        getQueryTypeBytes() {
      java.lang.Object ref = queryType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        queryType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
     * </pre>
     *
     * <code>string query_type = 6 [json_name = "queryType"];</code>
     * @param value The queryType to set.
     * @return This builder for chaining.
     */
    public Builder setQueryType(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      queryType_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
     * </pre>
     *
     * <code>string query_type = 6 [json_name = "queryType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearQueryType() {
      queryType_ = getDefaultInstance().getQueryType();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
     * </pre>
     *
     * <code>string query_type = 6 [json_name = "queryType"];</code>
     * @param value The bytes for queryType to set.
     * @return This builder for chaining.
     */
    public Builder setQueryTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      queryType_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private boolean hasGrouping_ ;
    /**
     * <pre>
     * Has GROUP BY clause
     * </pre>
     *
     * <code>bool has_grouping = 7 [json_name = "hasGrouping"];</code>
     * @return The hasGrouping.
     */
    @java.lang.Override
    public boolean getHasGrouping() {
      return hasGrouping_;
    }
    /**
     * <pre>
     * Has GROUP BY clause
     * </pre>
     *
     * <code>bool has_grouping = 7 [json_name = "hasGrouping"];</code>
     * @param value The hasGrouping to set.
     * @return This builder for chaining.
     */
    public Builder setHasGrouping(boolean value) {

      hasGrouping_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Has GROUP BY clause
     * </pre>
     *
     * <code>bool has_grouping = 7 [json_name = "hasGrouping"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHasGrouping() {
      bitField0_ = (bitField0_ & ~0x00000040);
      hasGrouping_ = false;
      onChanged();
      return this;
    }

    private boolean hasWindowing_ ;
    /**
     * <pre>
     * Has window functions
     * </pre>
     *
     * <code>bool has_windowing = 8 [json_name = "hasWindowing"];</code>
     * @return The hasWindowing.
     */
    @java.lang.Override
    public boolean getHasWindowing() {
      return hasWindowing_;
    }
    /**
     * <pre>
     * Has window functions
     * </pre>
     *
     * <code>bool has_windowing = 8 [json_name = "hasWindowing"];</code>
     * @param value The hasWindowing to set.
     * @return This builder for chaining.
     */
    public Builder setHasWindowing(boolean value) {

      hasWindowing_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Has window functions
     * </pre>
     *
     * <code>bool has_windowing = 8 [json_name = "hasWindowing"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHasWindowing() {
      bitField0_ = (bitField0_ & ~0x00000080);
      hasWindowing_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList joinTypes_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureJoinTypesIsMutable() {
      if (!joinTypes_.isModifiable()) {
        joinTypes_ = new com.google.protobuf.LazyStringArrayList(joinTypes_);
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @return A list containing the joinTypes.
     */
    public com.google.protobuf.ProtocolStringList
        getJoinTypesList() {
      joinTypes_.makeImmutable();
      return joinTypes_;
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @return The count of joinTypes.
     */
    public int getJoinTypesCount() {
      return joinTypes_.size();
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @param index The index of the element to return.
     * @return The joinTypes at the given index.
     */
    public java.lang.String getJoinTypes(int index) {
      return joinTypes_.get(index);
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the joinTypes at the given index.
     */
    public com.google.protobuf.ByteString
        getJoinTypesBytes(int index) {
      return joinTypes_.getByteString(index);
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @param index The index to set the value at.
     * @param value The joinTypes to set.
     * @return This builder for chaining.
     */
    public Builder setJoinTypes(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureJoinTypesIsMutable();
      joinTypes_.set(index, value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @param value The joinTypes to add.
     * @return This builder for chaining.
     */
    public Builder addJoinTypes(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureJoinTypesIsMutable();
      joinTypes_.add(value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @param values The joinTypes to add.
     * @return This builder for chaining.
     */
    public Builder addAllJoinTypes(
        java.lang.Iterable<java.lang.String> values) {
      ensureJoinTypesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, joinTypes_);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJoinTypes() {
      joinTypes_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Join types used (INNER, LEFT, RIGHT, FULL)
     * </pre>
     *
     * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
     * @param value The bytes of the joinTypes to add.
     * @return This builder for chaining.
     */
    public Builder addJoinTypesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureJoinTypesIsMutable();
      joinTypes_.add(value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.SQLAnalysisResult)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.SQLAnalysisResult)
  private static final datapower.noesis.v1.SQLAnalysisResult DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.SQLAnalysisResult();
  }

  public static datapower.noesis.v1.SQLAnalysisResult getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SQLAnalysisResult>
      PARSER = new com.google.protobuf.AbstractParser<SQLAnalysisResult>() {
    @java.lang.Override
    public SQLAnalysisResult parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SQLAnalysisResult> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SQLAnalysisResult> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.SQLAnalysisResult getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

