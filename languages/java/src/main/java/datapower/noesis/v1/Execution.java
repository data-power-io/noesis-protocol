// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public final class Execution {
  private Execution() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ExecutionPlan_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ExecutionPlan_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_StreamingJobSpec_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_StreamingJobSpec_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_StateBackendConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_StateBackendConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_CheckpointConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_CheckpointConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_BatchSourceSpec_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_BatchSourceSpec_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ConnectorConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ConnectorConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ConnectorConfig_ConfigEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ConnectorConfig_ConfigEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_BatchReconciliationJobSpec_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_BatchReconciliationJobSpec_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ExtractionSplit_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ExtractionSplit_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_OutputConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_OutputConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ParquetOptions_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ParquetOptions_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_PlanningMetadata_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_PlanningMetadata_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_SQLAnalysisResult_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_SQLAnalysisResult_SourceColumnsEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_SQLAnalysisResult_SourceColumnsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ColumnList_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ColumnList_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ExecutionResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ExecutionResult_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_StreamingJobResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_StreamingJobResult_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ExtractionResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ExtractionResult_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_BatchJobResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_BatchJobResult_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_datapower_noesis_v1_ExecutionMetrics_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_datapower_noesis_v1_ExecutionMetrics_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#datapower/noesis/v1/execution.proto\022\023d" +
      "atapower.noesis.v1\032\"datapower/noesis/v1/" +
      "pipeline.proto\"\222\004\n\rExecutionPlan\022#\n\rpipe" +
      "line_name\030\001 \001(\tR\014pipelineName\022B\n\010strateg" +
      "y\030\002 \001(\0162&.datapower.noesis.v1.ExecutionS" +
      "trategyR\010strategy\022L\n\016streaming_jobs\030\003 \003(" +
      "\0132%.datapower.noesis.v1.StreamingJobSpec" +
      "R\rstreamingJobs\022I\n\rbatch_sources\030\004 \003(\0132$" +
      ".datapower.noesis.v1.BatchSourceSpecR\014ba" +
      "tchSources\022b\n\024batch_reconciliation\030\005 \001(\013" +
      "2/.datapower.noesis.v1.BatchReconciliati" +
      "onJobSpecR\023batchReconciliation\022A\n\010metada" +
      "ta\030\006 \001(\0132%.datapower.noesis.v1.PlanningM" +
      "etadataR\010metadata\022X\n\023pipeline_definition" +
      "\030\007 \001(\0132\'.datapower.noesis.v1.PipelineDef" +
      "initionR\022pipelineDefinition\"\323\003\n\020Streamin" +
      "gJobSpec\022\031\n\010job_name\030\001 \001(\tR\007jobName\022!\n\014s" +
      "ource_alias\030\002 \001(\tR\013sourceAlias\022\037\n\013kafka_" +
      "topic\030\003 \001(\tR\nkafkaTopic\022%\n\016mutable_field" +
      "s\030\004 \003(\tR\rmutableFields\022\035\n\nsink_topic\030\005 \001" +
      "(\tR\tsinkTopic\022\033\n\tflink_sql\030\006 \001(\tR\010flinkS" +
      "ql\022\037\n\013primary_key\030\007 \001(\tR\nprimaryKey\022%\n\016c" +
      "onsumer_group\030\010 \001(\tR\rconsumerGroup\022L\n\rst" +
      "ate_backend\030\t \001(\0132\'.datapower.noesis.v1." +
      "StateBackendConfigR\014stateBackend\022E\n\nchec" +
      "kpoint\030\n \001(\0132%.datapower.noesis.v1.Check" +
      "pointConfigR\ncheckpoint\022 \n\013parallelism\030\013" +
      " \001(\005R\013parallelism\"\204\001\n\022StateBackendConfig" +
      "\022\022\n\004type\030\001 \001(\tR\004type\0227\n\027incremental_chec" +
      "kpoints\030\002 \001(\010R\026incrementalCheckpoints\022!\n" +
      "\014storage_path\030\003 \001(\tR\013storagePath\"\257\001\n\020Che" +
      "ckpointConfig\022\037\n\013interval_ms\030\001 \001(\003R\ninte" +
      "rvalMs\022\022\n\004mode\030\002 \001(\tR\004mode\022\035\n\ntimeout_ms" +
      "\030\003 \001(\003R\ttimeoutMs\022 \n\014min_pause_ms\030\004 \001(\003R" +
      "\nminPauseMs\022%\n\016max_concurrent\030\005 \001(\005R\rmax" +
      "Concurrent\"\313\002\n\017BatchSourceSpec\022!\n\014source" +
      "_alias\030\001 \001(\tR\013sourceAlias\022#\n\riceberg_tab" +
      "le\030\002 \001(\tR\014icebergTable\022)\n\020needs_extracti" +
      "on\030\003 \001(\010R\017needsExtraction\022B\n\tconnector\030\004" +
      " \001(\0132$.datapower.noesis.v1.ConnectorConf" +
      "igR\tconnector\022 \n\013parallelism\030\005 \001(\005R\013para" +
      "llelism\0228\n\006schema\030\006 \003(\0132 .datapower.noes" +
      "is.v1.SchemaFieldR\006schema\022%\n\016estimated_r" +
      "ows\030\007 \001(\003R\restimatedRows\"\264\002\n\017ConnectorCo" +
      "nfig\022%\n\016connector_type\030\001 \001(\tR\rconnectorT" +
      "ype\022\'\n\017connector_image\030\002 \001(\tR\016connectorI" +
      "mage\022+\n\021connector_version\030\003 \001(\tR\020connect" +
      "orVersion\022H\n\006config\030\004 \003(\01320.datapower.no" +
      "esis.v1.ConnectorConfig.ConfigEntryR\006con" +
      "fig\022\037\n\013entity_name\030\005 \001(\tR\nentityName\0329\n\013" +
      "ConfigEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002" +
      " \001(\tR\005value:\0028\001\"\213\002\n\032BatchReconciliationJ" +
      "obSpec\022\031\n\010job_name\030\001 \001(\tR\007jobName\022\035\n\nsin" +
      "k_topic\030\002 \001(\tR\tsinkTopic\022\033\n\tflink_sql\030\003 " +
      "\001(\tR\010flinkSql\022#\n\rsource_tables\030\004 \003(\tR\014so" +
      "urceTables\022\037\n\013primary_key\030\005 \001(\tR\nprimary" +
      "Key\022 \n\013parallelism\030\006 \001(\005R\013parallelism\022.\n" +
      "\023expected_runtime_ms\030\007 \001(\003R\021expectedRunt" +
      "imeMs\"\240\002\n\017ExtractionSplit\022\031\n\010split_id\030\001 " +
      "\001(\tR\007splitId\022!\n\014source_alias\030\002 \001(\tR\013sour" +
      "ceAlias\022)\n\020filter_condition\030\003 \001(\tR\017filte" +
      "rCondition\022%\n\016estimated_rows\030\004 \001(\003R\resti" +
      "matedRows\022B\n\tconnector\030\005 \001(\0132$.datapower" +
      ".noesis.v1.ConnectorConfigR\tconnector\0229\n" +
      "\006output\030\006 \001(\0132!.datapower.noesis.v1.Outp" +
      "utConfigR\006output\"y\n\014OutputConfig\022\026\n\006buck" +
      "et\030\001 \001(\tR\006bucket\022\022\n\004path\030\002 \001(\tR\004path\022=\n\007" +
      "parquet\030\003 \001(\0132#.datapower.noesis.v1.Parq" +
      "uetOptionsR\007parquet\"u\n\016ParquetOptions\022 \n" +
      "\013compression\030\001 \001(\tR\013compression\022$\n\016row_g" +
      "roup_size\030\002 \001(\003R\014rowGroupSize\022\033\n\tpage_si" +
      "ze\030\003 \001(\003R\010pageSize\"\206\002\n\020PlanningMetadata\022" +
      "-\n\023planned_at_epoch_ms\030\001 \001(\003R\020plannedAtE" +
      "pochMs\022\035\n\nplanned_by\030\002 \001(\tR\tplannedBy\0220\n" +
      "\024planning_duration_ms\030\003 \001(\003R\022planningDur" +
      "ationMs\022I\n\014sql_analysis\030\004 \001(\0132&.datapowe" +
      "r.noesis.v1.SQLAnalysisResultR\013sqlAnalys" +
      "is\022\'\n\017strategy_reason\030\005 \001(\tR\016strategyRea" +
      "son\"\355\003\n\021SQLAnalysisResult\022\024\n\005valid\030\001 \001(\010" +
      "R\005valid\022!\n\014parse_errors\030\002 \003(\tR\013parseErro" +
      "rs\022-\n\022referenced_sources\030\003 \003(\tR\021referenc" +
      "edSources\022`\n\016source_columns\030\004 \003(\01329.data" +
      "power.noesis.v1.SQLAnalysisResult.Source" +
      "ColumnsEntryR\rsourceColumns\022%\n\016output_co" +
      "lumns\030\005 \003(\tR\routputColumns\022\035\n\nquery_type" +
      "\030\006 \001(\tR\tqueryType\022!\n\014has_grouping\030\007 \001(\010R" +
      "\013hasGrouping\022#\n\rhas_windowing\030\010 \001(\010R\014has" +
      "Windowing\022\035\n\njoin_types\030\t \003(\tR\tjoinTypes" +
      "\032a\n\022SourceColumnsEntry\022\020\n\003key\030\001 \001(\tR\003key" +
      "\0225\n\005value\030\002 \001(\0132\037.datapower.noesis.v1.Co" +
      "lumnListR\005value:\0028\001\"&\n\nColumnList\022\030\n\007col" +
      "umns\030\001 \003(\tR\007columns\"\337\005\n\017ExecutionResult\022" +
      "#\n\rpipeline_name\030\001 \001(\tR\014pipelineName\022!\n\014" +
      "execution_id\030\002 \001(\tR\013executionId\0226\n\004mode\030" +
      "\003 \001(\0162\".datapower.noesis.v1.ExecutionMod" +
      "eR\004mode\022<\n\006status\030\004 \001(\0162$.datapower.noes" +
      "is.v1.ExecutionStatusR\006status\022-\n\023started" +
      "_at_epoch_ms\030\005 \001(\003R\020startedAtEpochMs\0221\n\025" +
      "completed_at_epoch_ms\030\006 \001(\003R\022completedAt" +
      "EpochMs\022\037\n\013duration_ms\030\007 \001(\003R\ndurationMs" +
      "\022[\n\025streaming_job_results\030\010 \003(\0132\'.datapo" +
      "wer.noesis.v1.StreamingJobResultR\023stream" +
      "ingJobResults\022T\n\022extraction_results\030\t \003(" +
      "\0132%.datapower.noesis.v1.ExtractionResult" +
      "R\021extractionResults\022F\n\014batch_result\030\n \001(" +
      "\0132#.datapower.noesis.v1.BatchJobResultR\013" +
      "batchResult\022#\n\rerror_message\030\013 \001(\tR\014erro" +
      "rMessage\022*\n\021error_stack_trace\030\014 \001(\tR\017err" +
      "orStackTrace\022?\n\007metrics\030\r \001(\0132%.datapowe" +
      "r.noesis.v1.ExecutionMetricsR\007metrics\"\331\001" +
      "\n\022StreamingJobResult\022\031\n\010job_name\030\001 \001(\tR\007" +
      "jobName\022 \n\014flink_job_id\030\002 \001(\tR\nflinkJobI" +
      "d\0223\n\025deployed_successfully\030\003 \001(\010R\024deploy" +
      "edSuccessfully\022#\n\rerror_message\030\004 \001(\tR\014e" +
      "rrorMessage\022,\n\022deployment_time_ms\030\005 \001(\003R" +
      "\020deploymentTimeMs\"\374\001\n\020ExtractionResult\022\031" +
      "\n\010split_id\030\001 \001(\tR\007splitId\022!\n\014source_alia" +
      "s\030\002 \001(\tR\013sourceAlias\022\030\n\007success\030\003 \001(\010R\007s" +
      "uccess\022%\n\016rows_extracted\030\004 \001(\003R\rrowsExtr" +
      "acted\022#\n\rbytes_written\030\005 \001(\003R\014bytesWritt" +
      "en\022\037\n\013duration_ms\030\006 \001(\003R\ndurationMs\022#\n\re" +
      "rror_message\030\007 \001(\tR\014errorMessage\"\203\002\n\016Bat" +
      "chJobResult\022\031\n\010job_name\030\001 \001(\tR\007jobName\022 " +
      "\n\014flink_job_id\030\002 \001(\tR\nflinkJobId\022\030\n\007succ" +
      "ess\030\003 \001(\010R\007success\022+\n\021records_processed\030" +
      "\004 \001(\003R\020recordsProcessed\022\'\n\017records_writt" +
      "en\030\005 \001(\003R\016recordsWritten\022\037\n\013duration_ms\030" +
      "\006 \001(\003R\ndurationMs\022#\n\rerror_message\030\007 \001(\t" +
      "R\014errorMessage\"\367\003\n\020ExecutionMetrics\022#\n\rt" +
      "otal_records\030\001 \001(\003R\014totalRecords\022\037\n\013tota" +
      "l_bytes\030\002 \001(\003R\ntotalBytes\0224\n\026extraction_" +
      "duration_ms\030\003 \001(\003R\024extractionDurationMs\022" +
      "-\n\022extraction_records\030\004 \001(\003R\021extractionR" +
      "ecords\0227\n\030iceberg_load_duration_ms\030\005 \001(\003" +
      "R\025icebergLoadDurationMs\0224\n\026iceberg_recor" +
      "ds_loaded\030\006 \001(\003R\024icebergRecordsLoaded\0221\n" +
      "\025batch_job_duration_ms\030\007 \001(\003R\022batchJobDu" +
      "rationMs\0222\n\025batch_records_written\030\010 \001(\003R" +
      "\023batchRecordsWritten\0225\n\026extraction_paral" +
      "lelism\030\t \001(\005R\025extractionParallelism\022+\n\021b" +
      "atch_parallelism\030\n \001(\005R\020batchParallelism" +
      "*]\n\021ExecutionStrategy\022\030\n\024STRATEGY_UNSPEC" +
      "IFIED\020\000\022\016\n\nBATCH_ONLY\020\001\022\022\n\016STREAMING_ONL" +
      "Y\020\002\022\n\n\006HYBRID\020\003*f\n\rExecutionMode\022\036\n\032EXEC" +
      "UTION_MODE_UNSPECIFIED\020\000\022\026\n\022INITIAL_DEPL" +
      "OYMENT\020\001\022\021\n\rSCHEDULED_RUN\020\002\022\n\n\006MANUAL\020\003*" +
      "j\n\017ExecutionStatus\022 \n\034EXECUTION_STATUS_U" +
      "NSPECIFIED\020\000\022\013\n\007RUNNING\020\001\022\r\n\tCOMPLETED\020\002" +
      "\022\n\n\006FAILED\020\003\022\r\n\tCANCELLED\020\004Bk\n\023datapower" +
      ".noesis.v1P\001ZRgithub.com/data-power-io/n" +
      "oesis-protocol/languages/go/datapower/no" +
      "esis/v1;noesisv1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          datapower.noesis.v1.Pipeline.getDescriptor(),
        });
    internal_static_datapower_noesis_v1_ExecutionPlan_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_datapower_noesis_v1_ExecutionPlan_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ExecutionPlan_descriptor,
        new java.lang.String[] { "PipelineName", "Strategy", "StreamingJobs", "BatchSources", "BatchReconciliation", "Metadata", "PipelineDefinition", });
    internal_static_datapower_noesis_v1_StreamingJobSpec_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_datapower_noesis_v1_StreamingJobSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_StreamingJobSpec_descriptor,
        new java.lang.String[] { "JobName", "SourceAlias", "KafkaTopic", "MutableFields", "SinkTopic", "FlinkSql", "PrimaryKey", "ConsumerGroup", "StateBackend", "Checkpoint", "Parallelism", });
    internal_static_datapower_noesis_v1_StateBackendConfig_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_datapower_noesis_v1_StateBackendConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_StateBackendConfig_descriptor,
        new java.lang.String[] { "Type", "IncrementalCheckpoints", "StoragePath", });
    internal_static_datapower_noesis_v1_CheckpointConfig_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_datapower_noesis_v1_CheckpointConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_CheckpointConfig_descriptor,
        new java.lang.String[] { "IntervalMs", "Mode", "TimeoutMs", "MinPauseMs", "MaxConcurrent", });
    internal_static_datapower_noesis_v1_BatchSourceSpec_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_datapower_noesis_v1_BatchSourceSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_BatchSourceSpec_descriptor,
        new java.lang.String[] { "SourceAlias", "IcebergTable", "NeedsExtraction", "Connector", "Parallelism", "Schema", "EstimatedRows", });
    internal_static_datapower_noesis_v1_ConnectorConfig_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_datapower_noesis_v1_ConnectorConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ConnectorConfig_descriptor,
        new java.lang.String[] { "ConnectorType", "ConnectorImage", "ConnectorVersion", "Config", "EntityName", });
    internal_static_datapower_noesis_v1_ConnectorConfig_ConfigEntry_descriptor =
      internal_static_datapower_noesis_v1_ConnectorConfig_descriptor.getNestedTypes().get(0);
    internal_static_datapower_noesis_v1_ConnectorConfig_ConfigEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ConnectorConfig_ConfigEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_datapower_noesis_v1_BatchReconciliationJobSpec_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_datapower_noesis_v1_BatchReconciliationJobSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_BatchReconciliationJobSpec_descriptor,
        new java.lang.String[] { "JobName", "SinkTopic", "FlinkSql", "SourceTables", "PrimaryKey", "Parallelism", "ExpectedRuntimeMs", });
    internal_static_datapower_noesis_v1_ExtractionSplit_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_datapower_noesis_v1_ExtractionSplit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ExtractionSplit_descriptor,
        new java.lang.String[] { "SplitId", "SourceAlias", "FilterCondition", "EstimatedRows", "Connector", "Output", });
    internal_static_datapower_noesis_v1_OutputConfig_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_datapower_noesis_v1_OutputConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_OutputConfig_descriptor,
        new java.lang.String[] { "Bucket", "Path", "Parquet", });
    internal_static_datapower_noesis_v1_ParquetOptions_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_datapower_noesis_v1_ParquetOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ParquetOptions_descriptor,
        new java.lang.String[] { "Compression", "RowGroupSize", "PageSize", });
    internal_static_datapower_noesis_v1_PlanningMetadata_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_datapower_noesis_v1_PlanningMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_PlanningMetadata_descriptor,
        new java.lang.String[] { "PlannedAtEpochMs", "PlannedBy", "PlanningDurationMs", "SqlAnalysis", "StrategyReason", });
    internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_datapower_noesis_v1_SQLAnalysisResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor,
        new java.lang.String[] { "Valid", "ParseErrors", "ReferencedSources", "SourceColumns", "OutputColumns", "QueryType", "HasGrouping", "HasWindowing", "JoinTypes", });
    internal_static_datapower_noesis_v1_SQLAnalysisResult_SourceColumnsEntry_descriptor =
      internal_static_datapower_noesis_v1_SQLAnalysisResult_descriptor.getNestedTypes().get(0);
    internal_static_datapower_noesis_v1_SQLAnalysisResult_SourceColumnsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_SQLAnalysisResult_SourceColumnsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_datapower_noesis_v1_ColumnList_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_datapower_noesis_v1_ColumnList_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ColumnList_descriptor,
        new java.lang.String[] { "Columns", });
    internal_static_datapower_noesis_v1_ExecutionResult_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_datapower_noesis_v1_ExecutionResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ExecutionResult_descriptor,
        new java.lang.String[] { "PipelineName", "ExecutionId", "Mode", "Status", "StartedAtEpochMs", "CompletedAtEpochMs", "DurationMs", "StreamingJobResults", "ExtractionResults", "BatchResult", "ErrorMessage", "ErrorStackTrace", "Metrics", });
    internal_static_datapower_noesis_v1_StreamingJobResult_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_datapower_noesis_v1_StreamingJobResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_StreamingJobResult_descriptor,
        new java.lang.String[] { "JobName", "FlinkJobId", "DeployedSuccessfully", "ErrorMessage", "DeploymentTimeMs", });
    internal_static_datapower_noesis_v1_ExtractionResult_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_datapower_noesis_v1_ExtractionResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ExtractionResult_descriptor,
        new java.lang.String[] { "SplitId", "SourceAlias", "Success", "RowsExtracted", "BytesWritten", "DurationMs", "ErrorMessage", });
    internal_static_datapower_noesis_v1_BatchJobResult_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_datapower_noesis_v1_BatchJobResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_BatchJobResult_descriptor,
        new java.lang.String[] { "JobName", "FlinkJobId", "Success", "RecordsProcessed", "RecordsWritten", "DurationMs", "ErrorMessage", });
    internal_static_datapower_noesis_v1_ExecutionMetrics_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_datapower_noesis_v1_ExecutionMetrics_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_datapower_noesis_v1_ExecutionMetrics_descriptor,
        new java.lang.String[] { "TotalRecords", "TotalBytes", "ExtractionDurationMs", "ExtractionRecords", "IcebergLoadDurationMs", "IcebergRecordsLoaded", "BatchJobDurationMs", "BatchRecordsWritten", "ExtractionParallelism", "BatchParallelism", });
    datapower.noesis.v1.Pipeline.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
