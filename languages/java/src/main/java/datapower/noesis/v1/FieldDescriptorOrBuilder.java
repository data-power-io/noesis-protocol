// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface FieldDescriptorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.FieldDescriptor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Field name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Field name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Field type
   * </pre>
   *
   * <code>.datapower.noesis.v1.FieldType type = 2 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Field type
   * </pre>
   *
   * <code>.datapower.noesis.v1.FieldType type = 2 [json_name = "type"];</code>
   * @return The type.
   */
  datapower.noesis.v1.FieldType getType();

  /**
   * <pre>
   * Whether field can be NULL
   * </pre>
   *
   * <code>bool nullable = 3 [json_name = "nullable"];</code>
   * @return The nullable.
   */
  boolean getNullable();

  /**
   * <pre>
   * Default value as string
   * </pre>
   *
   * <code>string default_value = 4 [json_name = "defaultValue"];</code>
   * @return The defaultValue.
   */
  java.lang.String getDefaultValue();
  /**
   * <pre>
   * Default value as string
   * </pre>
   *
   * <code>string default_value = 4 [json_name = "defaultValue"];</code>
   * @return The bytes for defaultValue.
   */
  com.google.protobuf.ByteString
      getDefaultValueBytes();

  /**
   * <pre>
   * Field documentation/comment
   * </pre>
   *
   * <code>string documentation = 5 [json_name = "documentation"];</code>
   * @return The documentation.
   */
  java.lang.String getDocumentation();
  /**
   * <pre>
   * Field documentation/comment
   * </pre>
   *
   * <code>string documentation = 5 [json_name = "documentation"];</code>
   * @return The bytes for documentation.
   */
  com.google.protobuf.ByteString
      getDocumentationBytes();

  /**
   * <pre>
   * Type-specific attributes
   * </pre>
   *
   * <code>int32 max_length = 6 [json_name = "maxLength"];</code>
   * @return The maxLength.
   */
  int getMaxLength();

  /**
   * <pre>
   * For DECIMAL types
   * </pre>
   *
   * <code>int32 precision = 7 [json_name = "precision"];</code>
   * @return The precision.
   */
  int getPrecision();

  /**
   * <pre>
   * For DECIMAL types
   * </pre>
   *
   * <code>int32 scale = 8 [json_name = "scale"];</code>
   * @return The scale.
   */
  int getScale();

  /**
   * <pre>
   * For ENUM types
   * </pre>
   *
   * <code>repeated string enum_values = 9 [json_name = "enumValues"];</code>
   * @return A list containing the enumValues.
   */
  java.util.List<java.lang.String>
      getEnumValuesList();
  /**
   * <pre>
   * For ENUM types
   * </pre>
   *
   * <code>repeated string enum_values = 9 [json_name = "enumValues"];</code>
   * @return The count of enumValues.
   */
  int getEnumValuesCount();
  /**
   * <pre>
   * For ENUM types
   * </pre>
   *
   * <code>repeated string enum_values = 9 [json_name = "enumValues"];</code>
   * @param index The index of the element to return.
   * @return The enumValues at the given index.
   */
  java.lang.String getEnumValues(int index);
  /**
   * <pre>
   * For ENUM types
   * </pre>
   *
   * <code>repeated string enum_values = 9 [json_name = "enumValues"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the enumValues at the given index.
   */
  com.google.protobuf.ByteString
      getEnumValuesBytes(int index);

  /**
   * <pre>
   * For ARRAY types
   * </pre>
   *
   * <code>.datapower.noesis.v1.FieldType array_element_type = 10 [json_name = "arrayElementType"];</code>
   * @return The enum numeric value on the wire for arrayElementType.
   */
  int getArrayElementTypeValue();
  /**
   * <pre>
   * For ARRAY types
   * </pre>
   *
   * <code>.datapower.noesis.v1.FieldType array_element_type = 10 [json_name = "arrayElementType"];</code>
   * @return The arrayElementType.
   */
  datapower.noesis.v1.FieldType getArrayElementType();

  /**
   * <pre>
   * Position and ordering
   * </pre>
   *
   * <code>int32 ordinal_position = 11 [json_name = "ordinalPosition"];</code>
   * @return The ordinalPosition.
   */
  int getOrdinalPosition();

  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 12 [json_name = "attributes"];</code>
   */
  int getAttributesCount();
  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 12 [json_name = "attributes"];</code>
   */
  boolean containsAttributes(
      java.lang.String key);
  /**
   * Use {@link #getAttributesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getAttributes();
  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 12 [json_name = "attributes"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getAttributesMap();
  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 12 [json_name = "attributes"];</code>
   */
  /* nullable */
java.lang.String getAttributesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 12 [json_name = "attributes"];</code>
   */
  java.lang.String getAttributesOrThrow(
      java.lang.String key);
}
