// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

/**
 * <pre>
 * BatchSourceSpec defines how to extract and load a batch source
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.BatchSourceSpec}
 */
public final class BatchSourceSpec extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.BatchSourceSpec)
    BatchSourceSpecOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BatchSourceSpec.newBuilder() to construct.
  private BatchSourceSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BatchSourceSpec() {
    sourceAlias_ = "";
    icebergTable_ = "";
    schema_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new BatchSourceSpec();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_BatchSourceSpec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_BatchSourceSpec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.BatchSourceSpec.class, datapower.noesis.v1.BatchSourceSpec.Builder.class);
  }

  public static final int SOURCE_ALIAS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object sourceAlias_ = "";
  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
   * @return The sourceAlias.
   */
  @java.lang.Override
  public java.lang.String getSourceAlias() {
    java.lang.Object ref = sourceAlias_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      sourceAlias_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
   * @return The bytes for sourceAlias.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSourceAliasBytes() {
    java.lang.Object ref = sourceAlias_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sourceAlias_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ICEBERG_TABLE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object icebergTable_ = "";
  /**
   * <pre>
   * Target Iceberg table name
   * </pre>
   *
   * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
   * @return The icebergTable.
   */
  @java.lang.Override
  public java.lang.String getIcebergTable() {
    java.lang.Object ref = icebergTable_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      icebergTable_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Target Iceberg table name
   * </pre>
   *
   * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
   * @return The bytes for icebergTable.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIcebergTableBytes() {
    java.lang.Object ref = icebergTable_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      icebergTable_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NEEDS_EXTRACTION_FIELD_NUMBER = 3;
  private boolean needsExtraction_ = false;
  /**
   * <pre>
   * Whether this source needs extraction (false if already in Iceberg)
   * </pre>
   *
   * <code>bool needs_extraction = 3 [json_name = "needsExtraction"];</code>
   * @return The needsExtraction.
   */
  @java.lang.Override
  public boolean getNeedsExtraction() {
    return needsExtraction_;
  }

  public static final int CONNECTOR_FIELD_NUMBER = 4;
  private datapower.noesis.v1.ConnectorConfig connector_;
  /**
   * <pre>
   * Connector configuration (if needs_extraction=true)
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
   * @return Whether the connector field is set.
   */
  @java.lang.Override
  public boolean hasConnector() {
    return connector_ != null;
  }
  /**
   * <pre>
   * Connector configuration (if needs_extraction=true)
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
   * @return The connector.
   */
  @java.lang.Override
  public datapower.noesis.v1.ConnectorConfig getConnector() {
    return connector_ == null ? datapower.noesis.v1.ConnectorConfig.getDefaultInstance() : connector_;
  }
  /**
   * <pre>
   * Connector configuration (if needs_extraction=true)
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.ConnectorConfigOrBuilder getConnectorOrBuilder() {
    return connector_ == null ? datapower.noesis.v1.ConnectorConfig.getDefaultInstance() : connector_;
  }

  public static final int PARALLELISM_FIELD_NUMBER = 5;
  private int parallelism_ = 0;
  /**
   * <pre>
   * Desired parallelism for extraction
   * </pre>
   *
   * <code>int32 parallelism = 5 [json_name = "parallelism"];</code>
   * @return The parallelism.
   */
  @java.lang.Override
  public int getParallelism() {
    return parallelism_;
  }

  public static final int SCHEMA_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.SchemaField> schema_;
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.SchemaField> getSchemaList() {
    return schema_;
  }
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.SchemaFieldOrBuilder> 
      getSchemaOrBuilderList() {
    return schema_;
  }
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public int getSchemaCount() {
    return schema_.size();
  }
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.SchemaField getSchema(int index) {
    return schema_.get(index);
  }
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.SchemaFieldOrBuilder getSchemaOrBuilder(
      int index) {
    return schema_.get(index);
  }

  public static final int ESTIMATED_ROWS_FIELD_NUMBER = 7;
  private long estimatedRows_ = 0L;
  /**
   * <pre>
   * Estimated row count (for planning)
   * </pre>
   *
   * <code>int64 estimated_rows = 7 [json_name = "estimatedRows"];</code>
   * @return The estimatedRows.
   */
  @java.lang.Override
  public long getEstimatedRows() {
    return estimatedRows_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sourceAlias_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sourceAlias_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(icebergTable_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, icebergTable_);
    }
    if (needsExtraction_ != false) {
      output.writeBool(3, needsExtraction_);
    }
    if (connector_ != null) {
      output.writeMessage(4, getConnector());
    }
    if (parallelism_ != 0) {
      output.writeInt32(5, parallelism_);
    }
    for (int i = 0; i < schema_.size(); i++) {
      output.writeMessage(6, schema_.get(i));
    }
    if (estimatedRows_ != 0L) {
      output.writeInt64(7, estimatedRows_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sourceAlias_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sourceAlias_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(icebergTable_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, icebergTable_);
    }
    if (needsExtraction_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, needsExtraction_);
    }
    if (connector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getConnector());
    }
    if (parallelism_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, parallelism_);
    }
    for (int i = 0; i < schema_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, schema_.get(i));
    }
    if (estimatedRows_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, estimatedRows_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.BatchSourceSpec)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.BatchSourceSpec other = (datapower.noesis.v1.BatchSourceSpec) obj;

    if (!getSourceAlias()
        .equals(other.getSourceAlias())) return false;
    if (!getIcebergTable()
        .equals(other.getIcebergTable())) return false;
    if (getNeedsExtraction()
        != other.getNeedsExtraction()) return false;
    if (hasConnector() != other.hasConnector()) return false;
    if (hasConnector()) {
      if (!getConnector()
          .equals(other.getConnector())) return false;
    }
    if (getParallelism()
        != other.getParallelism()) return false;
    if (!getSchemaList()
        .equals(other.getSchemaList())) return false;
    if (getEstimatedRows()
        != other.getEstimatedRows()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SOURCE_ALIAS_FIELD_NUMBER;
    hash = (53 * hash) + getSourceAlias().hashCode();
    hash = (37 * hash) + ICEBERG_TABLE_FIELD_NUMBER;
    hash = (53 * hash) + getIcebergTable().hashCode();
    hash = (37 * hash) + NEEDS_EXTRACTION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getNeedsExtraction());
    if (hasConnector()) {
      hash = (37 * hash) + CONNECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getConnector().hashCode();
    }
    hash = (37 * hash) + PARALLELISM_FIELD_NUMBER;
    hash = (53 * hash) + getParallelism();
    if (getSchemaCount() > 0) {
      hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getSchemaList().hashCode();
    }
    hash = (37 * hash) + ESTIMATED_ROWS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getEstimatedRows());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.BatchSourceSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.BatchSourceSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.BatchSourceSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.BatchSourceSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * BatchSourceSpec defines how to extract and load a batch source
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.BatchSourceSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.BatchSourceSpec)
      datapower.noesis.v1.BatchSourceSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_BatchSourceSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_BatchSourceSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.BatchSourceSpec.class, datapower.noesis.v1.BatchSourceSpec.Builder.class);
    }

    // Construct using datapower.noesis.v1.BatchSourceSpec.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sourceAlias_ = "";
      icebergTable_ = "";
      needsExtraction_ = false;
      connector_ = null;
      if (connectorBuilder_ != null) {
        connectorBuilder_.dispose();
        connectorBuilder_ = null;
      }
      parallelism_ = 0;
      if (schemaBuilder_ == null) {
        schema_ = java.util.Collections.emptyList();
      } else {
        schema_ = null;
        schemaBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      estimatedRows_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_BatchSourceSpec_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.BatchSourceSpec getDefaultInstanceForType() {
      return datapower.noesis.v1.BatchSourceSpec.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.BatchSourceSpec build() {
      datapower.noesis.v1.BatchSourceSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.BatchSourceSpec buildPartial() {
      datapower.noesis.v1.BatchSourceSpec result = new datapower.noesis.v1.BatchSourceSpec(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(datapower.noesis.v1.BatchSourceSpec result) {
      if (schemaBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          schema_ = java.util.Collections.unmodifiableList(schema_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.schema_ = schema_;
      } else {
        result.schema_ = schemaBuilder_.build();
      }
    }

    private void buildPartial0(datapower.noesis.v1.BatchSourceSpec result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sourceAlias_ = sourceAlias_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.icebergTable_ = icebergTable_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.needsExtraction_ = needsExtraction_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.connector_ = connectorBuilder_ == null
            ? connector_
            : connectorBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.parallelism_ = parallelism_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.estimatedRows_ = estimatedRows_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.BatchSourceSpec) {
        return mergeFrom((datapower.noesis.v1.BatchSourceSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.BatchSourceSpec other) {
      if (other == datapower.noesis.v1.BatchSourceSpec.getDefaultInstance()) return this;
      if (!other.getSourceAlias().isEmpty()) {
        sourceAlias_ = other.sourceAlias_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getIcebergTable().isEmpty()) {
        icebergTable_ = other.icebergTable_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.getNeedsExtraction() != false) {
        setNeedsExtraction(other.getNeedsExtraction());
      }
      if (other.hasConnector()) {
        mergeConnector(other.getConnector());
      }
      if (other.getParallelism() != 0) {
        setParallelism(other.getParallelism());
      }
      if (schemaBuilder_ == null) {
        if (!other.schema_.isEmpty()) {
          if (schema_.isEmpty()) {
            schema_ = other.schema_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSchemaIsMutable();
            schema_.addAll(other.schema_);
          }
          onChanged();
        }
      } else {
        if (!other.schema_.isEmpty()) {
          if (schemaBuilder_.isEmpty()) {
            schemaBuilder_.dispose();
            schemaBuilder_ = null;
            schema_ = other.schema_;
            bitField0_ = (bitField0_ & ~0x00000020);
            schemaBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSchemaFieldBuilder() : null;
          } else {
            schemaBuilder_.addAllMessages(other.schema_);
          }
        }
      }
      if (other.getEstimatedRows() != 0L) {
        setEstimatedRows(other.getEstimatedRows());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              sourceAlias_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              icebergTable_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              needsExtraction_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              input.readMessage(
                  getConnectorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 40: {
              parallelism_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              datapower.noesis.v1.SchemaField m =
                  input.readMessage(
                      datapower.noesis.v1.SchemaField.parser(),
                      extensionRegistry);
              if (schemaBuilder_ == null) {
                ensureSchemaIsMutable();
                schema_.add(m);
              } else {
                schemaBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 56: {
              estimatedRows_ = input.readInt64();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object sourceAlias_ = "";
    /**
     * <pre>
     * Source alias from pipeline definition
     * </pre>
     *
     * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
     * @return The sourceAlias.
     */
    public java.lang.String getSourceAlias() {
      java.lang.Object ref = sourceAlias_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sourceAlias_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Source alias from pipeline definition
     * </pre>
     *
     * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
     * @return The bytes for sourceAlias.
     */
    public com.google.protobuf.ByteString
        getSourceAliasBytes() {
      java.lang.Object ref = sourceAlias_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sourceAlias_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Source alias from pipeline definition
     * </pre>
     *
     * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
     * @param value The sourceAlias to set.
     * @return This builder for chaining.
     */
    public Builder setSourceAlias(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      sourceAlias_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Source alias from pipeline definition
     * </pre>
     *
     * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSourceAlias() {
      sourceAlias_ = getDefaultInstance().getSourceAlias();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Source alias from pipeline definition
     * </pre>
     *
     * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
     * @param value The bytes for sourceAlias to set.
     * @return This builder for chaining.
     */
    public Builder setSourceAliasBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      sourceAlias_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object icebergTable_ = "";
    /**
     * <pre>
     * Target Iceberg table name
     * </pre>
     *
     * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
     * @return The icebergTable.
     */
    public java.lang.String getIcebergTable() {
      java.lang.Object ref = icebergTable_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        icebergTable_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Target Iceberg table name
     * </pre>
     *
     * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
     * @return The bytes for icebergTable.
     */
    public com.google.protobuf.ByteString
        getIcebergTableBytes() {
      java.lang.Object ref = icebergTable_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        icebergTable_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Target Iceberg table name
     * </pre>
     *
     * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
     * @param value The icebergTable to set.
     * @return This builder for chaining.
     */
    public Builder setIcebergTable(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      icebergTable_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target Iceberg table name
     * </pre>
     *
     * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIcebergTable() {
      icebergTable_ = getDefaultInstance().getIcebergTable();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target Iceberg table name
     * </pre>
     *
     * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
     * @param value The bytes for icebergTable to set.
     * @return This builder for chaining.
     */
    public Builder setIcebergTableBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      icebergTable_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private boolean needsExtraction_ ;
    /**
     * <pre>
     * Whether this source needs extraction (false if already in Iceberg)
     * </pre>
     *
     * <code>bool needs_extraction = 3 [json_name = "needsExtraction"];</code>
     * @return The needsExtraction.
     */
    @java.lang.Override
    public boolean getNeedsExtraction() {
      return needsExtraction_;
    }
    /**
     * <pre>
     * Whether this source needs extraction (false if already in Iceberg)
     * </pre>
     *
     * <code>bool needs_extraction = 3 [json_name = "needsExtraction"];</code>
     * @param value The needsExtraction to set.
     * @return This builder for chaining.
     */
    public Builder setNeedsExtraction(boolean value) {

      needsExtraction_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether this source needs extraction (false if already in Iceberg)
     * </pre>
     *
     * <code>bool needs_extraction = 3 [json_name = "needsExtraction"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNeedsExtraction() {
      bitField0_ = (bitField0_ & ~0x00000004);
      needsExtraction_ = false;
      onChanged();
      return this;
    }

    private datapower.noesis.v1.ConnectorConfig connector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.ConnectorConfig, datapower.noesis.v1.ConnectorConfig.Builder, datapower.noesis.v1.ConnectorConfigOrBuilder> connectorBuilder_;
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     * @return Whether the connector field is set.
     */
    public boolean hasConnector() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     * @return The connector.
     */
    public datapower.noesis.v1.ConnectorConfig getConnector() {
      if (connectorBuilder_ == null) {
        return connector_ == null ? datapower.noesis.v1.ConnectorConfig.getDefaultInstance() : connector_;
      } else {
        return connectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    public Builder setConnector(datapower.noesis.v1.ConnectorConfig value) {
      if (connectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        connector_ = value;
      } else {
        connectorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    public Builder setConnector(
        datapower.noesis.v1.ConnectorConfig.Builder builderForValue) {
      if (connectorBuilder_ == null) {
        connector_ = builderForValue.build();
      } else {
        connectorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    public Builder mergeConnector(datapower.noesis.v1.ConnectorConfig value) {
      if (connectorBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          connector_ != null &&
          connector_ != datapower.noesis.v1.ConnectorConfig.getDefaultInstance()) {
          getConnectorBuilder().mergeFrom(value);
        } else {
          connector_ = value;
        }
      } else {
        connectorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    public Builder clearConnector() {
      bitField0_ = (bitField0_ & ~0x00000008);
      connector_ = null;
      if (connectorBuilder_ != null) {
        connectorBuilder_.dispose();
        connectorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    public datapower.noesis.v1.ConnectorConfig.Builder getConnectorBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getConnectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    public datapower.noesis.v1.ConnectorConfigOrBuilder getConnectorOrBuilder() {
      if (connectorBuilder_ != null) {
        return connectorBuilder_.getMessageOrBuilder();
      } else {
        return connector_ == null ?
            datapower.noesis.v1.ConnectorConfig.getDefaultInstance() : connector_;
      }
    }
    /**
     * <pre>
     * Connector configuration (if needs_extraction=true)
     * </pre>
     *
     * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.ConnectorConfig, datapower.noesis.v1.ConnectorConfig.Builder, datapower.noesis.v1.ConnectorConfigOrBuilder> 
        getConnectorFieldBuilder() {
      if (connectorBuilder_ == null) {
        connectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.ConnectorConfig, datapower.noesis.v1.ConnectorConfig.Builder, datapower.noesis.v1.ConnectorConfigOrBuilder>(
                getConnector(),
                getParentForChildren(),
                isClean());
        connector_ = null;
      }
      return connectorBuilder_;
    }

    private int parallelism_ ;
    /**
     * <pre>
     * Desired parallelism for extraction
     * </pre>
     *
     * <code>int32 parallelism = 5 [json_name = "parallelism"];</code>
     * @return The parallelism.
     */
    @java.lang.Override
    public int getParallelism() {
      return parallelism_;
    }
    /**
     * <pre>
     * Desired parallelism for extraction
     * </pre>
     *
     * <code>int32 parallelism = 5 [json_name = "parallelism"];</code>
     * @param value The parallelism to set.
     * @return This builder for chaining.
     */
    public Builder setParallelism(int value) {

      parallelism_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Desired parallelism for extraction
     * </pre>
     *
     * <code>int32 parallelism = 5 [json_name = "parallelism"];</code>
     * @return This builder for chaining.
     */
    public Builder clearParallelism() {
      bitField0_ = (bitField0_ & ~0x00000010);
      parallelism_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<datapower.noesis.v1.SchemaField> schema_ =
      java.util.Collections.emptyList();
    private void ensureSchemaIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        schema_ = new java.util.ArrayList<datapower.noesis.v1.SchemaField>(schema_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.SchemaField, datapower.noesis.v1.SchemaField.Builder, datapower.noesis.v1.SchemaFieldOrBuilder> schemaBuilder_;

    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public java.util.List<datapower.noesis.v1.SchemaField> getSchemaList() {
      if (schemaBuilder_ == null) {
        return java.util.Collections.unmodifiableList(schema_);
      } else {
        return schemaBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public int getSchemaCount() {
      if (schemaBuilder_ == null) {
        return schema_.size();
      } else {
        return schemaBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField getSchema(int index) {
      if (schemaBuilder_ == null) {
        return schema_.get(index);
      } else {
        return schemaBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder setSchema(
        int index, datapower.noesis.v1.SchemaField value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchemaIsMutable();
        schema_.set(index, value);
        onChanged();
      } else {
        schemaBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder setSchema(
        int index, datapower.noesis.v1.SchemaField.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.set(index, builderForValue.build());
        onChanged();
      } else {
        schemaBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder addSchema(datapower.noesis.v1.SchemaField value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchemaIsMutable();
        schema_.add(value);
        onChanged();
      } else {
        schemaBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder addSchema(
        int index, datapower.noesis.v1.SchemaField value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchemaIsMutable();
        schema_.add(index, value);
        onChanged();
      } else {
        schemaBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder addSchema(
        datapower.noesis.v1.SchemaField.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.add(builderForValue.build());
        onChanged();
      } else {
        schemaBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder addSchema(
        int index, datapower.noesis.v1.SchemaField.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.add(index, builderForValue.build());
        onChanged();
      } else {
        schemaBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder addAllSchema(
        java.lang.Iterable<? extends datapower.noesis.v1.SchemaField> values) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, schema_);
        onChanged();
      } else {
        schemaBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder clearSchema() {
      if (schemaBuilder_ == null) {
        schema_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        schemaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public Builder removeSchema(int index) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.remove(index);
        onChanged();
      } else {
        schemaBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField.Builder getSchemaBuilder(
        int index) {
      return getSchemaFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaFieldOrBuilder getSchemaOrBuilder(
        int index) {
      if (schemaBuilder_ == null) {
        return schema_.get(index);  } else {
        return schemaBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.SchemaFieldOrBuilder> 
         getSchemaOrBuilderList() {
      if (schemaBuilder_ != null) {
        return schemaBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(schema_);
      }
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField.Builder addSchemaBuilder() {
      return getSchemaFieldBuilder().addBuilder(
          datapower.noesis.v1.SchemaField.getDefaultInstance());
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField.Builder addSchemaBuilder(
        int index) {
      return getSchemaFieldBuilder().addBuilder(
          index, datapower.noesis.v1.SchemaField.getDefaultInstance());
    }
    /**
     * <pre>
     * Schema for the source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
     */
    public java.util.List<datapower.noesis.v1.SchemaField.Builder> 
         getSchemaBuilderList() {
      return getSchemaFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.SchemaField, datapower.noesis.v1.SchemaField.Builder, datapower.noesis.v1.SchemaFieldOrBuilder> 
        getSchemaFieldBuilder() {
      if (schemaBuilder_ == null) {
        schemaBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.SchemaField, datapower.noesis.v1.SchemaField.Builder, datapower.noesis.v1.SchemaFieldOrBuilder>(
                schema_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        schema_ = null;
      }
      return schemaBuilder_;
    }

    private long estimatedRows_ ;
    /**
     * <pre>
     * Estimated row count (for planning)
     * </pre>
     *
     * <code>int64 estimated_rows = 7 [json_name = "estimatedRows"];</code>
     * @return The estimatedRows.
     */
    @java.lang.Override
    public long getEstimatedRows() {
      return estimatedRows_;
    }
    /**
     * <pre>
     * Estimated row count (for planning)
     * </pre>
     *
     * <code>int64 estimated_rows = 7 [json_name = "estimatedRows"];</code>
     * @param value The estimatedRows to set.
     * @return This builder for chaining.
     */
    public Builder setEstimatedRows(long value) {

      estimatedRows_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Estimated row count (for planning)
     * </pre>
     *
     * <code>int64 estimated_rows = 7 [json_name = "estimatedRows"];</code>
     * @return This builder for chaining.
     */
    public Builder clearEstimatedRows() {
      bitField0_ = (bitField0_ & ~0x00000040);
      estimatedRows_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.BatchSourceSpec)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.BatchSourceSpec)
  private static final datapower.noesis.v1.BatchSourceSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.BatchSourceSpec();
  }

  public static datapower.noesis.v1.BatchSourceSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BatchSourceSpec>
      PARSER = new com.google.protobuf.AbstractParser<BatchSourceSpec>() {
    @java.lang.Override
    public BatchSourceSpec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BatchSourceSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BatchSourceSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.BatchSourceSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

