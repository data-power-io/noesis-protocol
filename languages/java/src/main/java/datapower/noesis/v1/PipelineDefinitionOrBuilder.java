// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/pipeline.proto

package datapower.noesis.v1;

public interface PipelineDefinitionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.PipelineDefinition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique pipeline identifier (must be DNS-safe)
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The pipelineName.
   */
  java.lang.String getPipelineName();
  /**
   * <pre>
   * Unique pipeline identifier (must be DNS-safe)
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The bytes for pipelineName.
   */
  com.google.protobuf.ByteString
      getPipelineNameBytes();

  /**
   * <pre>
   * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
   * </pre>
   *
   * <code>string schedule = 2 [json_name = "schedule"];</code>
   * @return The schedule.
   */
  java.lang.String getSchedule();
  /**
   * <pre>
   * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
   * </pre>
   *
   * <code>string schedule = 2 [json_name = "schedule"];</code>
   * @return The bytes for schedule.
   */
  com.google.protobuf.ByteString
      getScheduleBytes();

  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  java.util.List<datapower.noesis.v1.Source> 
      getSourcesList();
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  datapower.noesis.v1.Source getSources(int index);
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  int getSourcesCount();
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.SourceOrBuilder> 
      getSourcesOrBuilderList();
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  datapower.noesis.v1.SourceOrBuilder getSourcesOrBuilder(
      int index);

  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  java.util.List<datapower.noesis.v1.Sink> 
      getSinksList();
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  datapower.noesis.v1.Sink getSinks(int index);
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  int getSinksCount();
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.SinkOrBuilder> 
      getSinksOrBuilderList();
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  datapower.noesis.v1.SinkOrBuilder getSinksOrBuilder(
      int index);

  /**
   * <pre>
   * Schema definition for the final transformed data
   * </pre>
   *
   * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
   * @return Whether the targetSchema field is set.
   */
  boolean hasTargetSchema();
  /**
   * <pre>
   * Schema definition for the final transformed data
   * </pre>
   *
   * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
   * @return The targetSchema.
   */
  datapower.noesis.v1.TargetSchema getTargetSchema();
  /**
   * <pre>
   * Schema definition for the final transformed data
   * </pre>
   *
   * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
   */
  datapower.noesis.v1.TargetSchemaOrBuilder getTargetSchemaOrBuilder();

  /**
   * <pre>
   * The SQL query that transforms sources into the target schema
   * </pre>
   *
   * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
   * @return Whether the query field is set.
   */
  boolean hasQuery();
  /**
   * <pre>
   * The SQL query that transforms sources into the target schema
   * </pre>
   *
   * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
   * @return The query.
   */
  datapower.noesis.v1.Query getQuery();
  /**
   * <pre>
   * The SQL query that transforms sources into the target schema
   * </pre>
   *
   * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
   */
  datapower.noesis.v1.QueryOrBuilder getQueryOrBuilder();

  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  int getMetadataCount();
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  boolean containsMetadata(
      java.lang.String key);
  /**
   * Use {@link #getMetadataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getMetadata();
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getMetadataMap();
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  /* nullable */
java.lang.String getMetadataOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  java.lang.String getMetadataOrThrow(
      java.lang.String key);
}
