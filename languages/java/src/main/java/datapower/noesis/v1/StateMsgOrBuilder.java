// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface StateMsgOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.StateMsg)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Opaque; sufficient to resume without duplication
   * </pre>
   *
   * <code>.datapower.noesis.v1.Cursor cursor = 1 [json_name = "cursor"];</code>
   * @return Whether the cursor field is set.
   */
  boolean hasCursor();
  /**
   * <pre>
   * Opaque; sufficient to resume without duplication
   * </pre>
   *
   * <code>.datapower.noesis.v1.Cursor cursor = 1 [json_name = "cursor"];</code>
   * @return The cursor.
   */
  datapower.noesis.v1.Cursor getCursor();
  /**
   * <pre>
   * Opaque; sufficient to resume without duplication
   * </pre>
   *
   * <code>.datapower.noesis.v1.Cursor cursor = 1 [json_name = "cursor"];</code>
   */
  datapower.noesis.v1.CursorOrBuilder getCursorOrBuilder();

  /**
   * <pre>
   * Max logical timestamp observed so far (epoch millis)
   * </pre>
   *
   * <code>int64 watermark = 2 [json_name = "watermark"];</code>
   * @return The watermark.
   */
  long getWatermark();

  /**
   * <pre>
   * For subgraph: optional "group closure" marker
   * </pre>
   *
   * <code>string group_id = 3 [json_name = "groupId"];</code>
   * @return The groupId.
   */
  java.lang.String getGroupId();
  /**
   * <pre>
   * For subgraph: optional "group closure" marker
   * </pre>
   *
   * <code>string group_id = 3 [json_name = "groupId"];</code>
   * @return The bytes for groupId.
   */
  com.google.protobuf.ByteString
      getGroupIdBytes();
}
