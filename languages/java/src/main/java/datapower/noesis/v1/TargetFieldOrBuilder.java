// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/pipeline.proto

package datapower.noesis.v1;

public interface TargetFieldOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.TargetField)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Field name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Field name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Data type
   * </pre>
   *
   * <code>string type = 2 [json_name = "type"];</code>
   * @return The type.
   */
  java.lang.String getType();
  /**
   * <pre>
   * Data type
   * </pre>
   *
   * <code>string type = 2 [json_name = "type"];</code>
   * @return The bytes for type.
   */
  com.google.protobuf.ByteString
      getTypeBytes();

  /**
   * <pre>
   * Mutability flag: determines processing strategy
   * - mutable: false -&gt; computed in batch, immutable once created
   * - mutable: true -&gt; can be updated by streaming jobs, subject to change
   * </pre>
   *
   * <code>bool mutable = 3 [json_name = "mutable"];</code>
   * @return The mutable.
   */
  boolean getMutable();

  /**
   * <pre>
   * Whether this field can be null
   * </pre>
   *
   * <code>bool nullable = 4 [json_name = "nullable"];</code>
   * @return The nullable.
   */
  boolean getNullable();

  /**
   * <pre>
   * Optional: Field description
   * </pre>
   *
   * <code>string description = 5 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * Optional: Field description
   * </pre>
   *
   * <code>string description = 5 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * For DECIMAL types
   * </pre>
   *
   * <code>int32 precision = 6 [json_name = "precision"];</code>
   * @return The precision.
   */
  int getPrecision();

  /**
   * <code>int32 scale = 7 [json_name = "scale"];</code>
   * @return The scale.
   */
  int getScale();
}
