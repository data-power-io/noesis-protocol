// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface ConstraintDescriptorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.ConstraintDescriptor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Constraint name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Constraint name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Constraint type
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConstraintType type = 2 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Constraint type
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConstraintType type = 2 [json_name = "type"];</code>
   * @return The type.
   */
  datapower.noesis.v1.ConstraintType getType();

  /**
   * <pre>
   * Columns involved
   * </pre>
   *
   * <code>repeated string columns = 3 [json_name = "columns"];</code>
   * @return A list containing the columns.
   */
  java.util.List<java.lang.String>
      getColumnsList();
  /**
   * <pre>
   * Columns involved
   * </pre>
   *
   * <code>repeated string columns = 3 [json_name = "columns"];</code>
   * @return The count of columns.
   */
  int getColumnsCount();
  /**
   * <pre>
   * Columns involved
   * </pre>
   *
   * <code>repeated string columns = 3 [json_name = "columns"];</code>
   * @param index The index of the element to return.
   * @return The columns at the given index.
   */
  java.lang.String getColumns(int index);
  /**
   * <pre>
   * Columns involved
   * </pre>
   *
   * <code>repeated string columns = 3 [json_name = "columns"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the columns at the given index.
   */
  com.google.protobuf.ByteString
      getColumnsBytes(int index);

  /**
   * <pre>
   * Foreign key specific
   * </pre>
   *
   * <code>string referenced_table = 4 [json_name = "referencedTable"];</code>
   * @return The referencedTable.
   */
  java.lang.String getReferencedTable();
  /**
   * <pre>
   * Foreign key specific
   * </pre>
   *
   * <code>string referenced_table = 4 [json_name = "referencedTable"];</code>
   * @return The bytes for referencedTable.
   */
  com.google.protobuf.ByteString
      getReferencedTableBytes();

  /**
   * <pre>
   * For FK constraints
   * </pre>
   *
   * <code>repeated string referenced_columns = 5 [json_name = "referencedColumns"];</code>
   * @return A list containing the referencedColumns.
   */
  java.util.List<java.lang.String>
      getReferencedColumnsList();
  /**
   * <pre>
   * For FK constraints
   * </pre>
   *
   * <code>repeated string referenced_columns = 5 [json_name = "referencedColumns"];</code>
   * @return The count of referencedColumns.
   */
  int getReferencedColumnsCount();
  /**
   * <pre>
   * For FK constraints
   * </pre>
   *
   * <code>repeated string referenced_columns = 5 [json_name = "referencedColumns"];</code>
   * @param index The index of the element to return.
   * @return The referencedColumns at the given index.
   */
  java.lang.String getReferencedColumns(int index);
  /**
   * <pre>
   * For FK constraints
   * </pre>
   *
   * <code>repeated string referenced_columns = 5 [json_name = "referencedColumns"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the referencedColumns at the given index.
   */
  com.google.protobuf.ByteString
      getReferencedColumnsBytes(int index);

  /**
   * <pre>
   * CASCADE, SET NULL, etc.
   * </pre>
   *
   * <code>string on_delete = 6 [json_name = "onDelete"];</code>
   * @return The onDelete.
   */
  java.lang.String getOnDelete();
  /**
   * <pre>
   * CASCADE, SET NULL, etc.
   * </pre>
   *
   * <code>string on_delete = 6 [json_name = "onDelete"];</code>
   * @return The bytes for onDelete.
   */
  com.google.protobuf.ByteString
      getOnDeleteBytes();

  /**
   * <pre>
   * CASCADE, SET NULL, etc.
   * </pre>
   *
   * <code>string on_update = 7 [json_name = "onUpdate"];</code>
   * @return The onUpdate.
   */
  java.lang.String getOnUpdate();
  /**
   * <pre>
   * CASCADE, SET NULL, etc.
   * </pre>
   *
   * <code>string on_update = 7 [json_name = "onUpdate"];</code>
   * @return The bytes for onUpdate.
   */
  com.google.protobuf.ByteString
      getOnUpdateBytes();

  /**
   * <pre>
   * Check constraint specific
   * </pre>
   *
   * <code>string check_expression = 8 [json_name = "checkExpression"];</code>
   * @return The checkExpression.
   */
  java.lang.String getCheckExpression();
  /**
   * <pre>
   * Check constraint specific
   * </pre>
   *
   * <code>string check_expression = 8 [json_name = "checkExpression"];</code>
   * @return The bytes for checkExpression.
   */
  com.google.protobuf.ByteString
      getCheckExpressionBytes();

  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>string documentation = 9 [json_name = "documentation"];</code>
   * @return The documentation.
   */
  java.lang.String getDocumentation();
  /**
   * <pre>
   * Metadata
   * </pre>
   *
   * <code>string documentation = 9 [json_name = "documentation"];</code>
   * @return The bytes for documentation.
   */
  com.google.protobuf.ByteString
      getDocumentationBytes();

  /**
   * <pre>
   * Connector-specific attributes
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 10 [json_name = "attributes"];</code>
   */
  int getAttributesCount();
  /**
   * <pre>
   * Connector-specific attributes
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 10 [json_name = "attributes"];</code>
   */
  boolean containsAttributes(
      java.lang.String key);
  /**
   * Use {@link #getAttributesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getAttributes();
  /**
   * <pre>
   * Connector-specific attributes
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 10 [json_name = "attributes"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getAttributesMap();
  /**
   * <pre>
   * Connector-specific attributes
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 10 [json_name = "attributes"];</code>
   */
  /* nullable */
java.lang.String getAttributesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Connector-specific attributes
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 10 [json_name = "attributes"];</code>
   */
  java.lang.String getAttributesOrThrow(
      java.lang.String key);
}
