// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

/**
 * <pre>
 * ExecutionPlan is the output of the planning phase
 * It contains all information needed to execute the pipeline
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.ExecutionPlan}
 */
public final class ExecutionPlan extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.ExecutionPlan)
    ExecutionPlanOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ExecutionPlan.newBuilder() to construct.
  private ExecutionPlan(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExecutionPlan() {
    pipelineName_ = "";
    strategy_ = 0;
    streamingJobs_ = java.util.Collections.emptyList();
    batchSources_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ExecutionPlan();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_ExecutionPlan_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_ExecutionPlan_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.ExecutionPlan.class, datapower.noesis.v1.ExecutionPlan.Builder.class);
  }

  public static final int PIPELINE_NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object pipelineName_ = "";
  /**
   * <pre>
   * Pipeline name
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The pipelineName.
   */
  @java.lang.Override
  public java.lang.String getPipelineName() {
    java.lang.Object ref = pipelineName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pipelineName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Pipeline name
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The bytes for pipelineName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPipelineNameBytes() {
    java.lang.Object ref = pipelineName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pipelineName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STRATEGY_FIELD_NUMBER = 2;
  private int strategy_ = 0;
  /**
   * <pre>
   * Determined execution strategy
   * </pre>
   *
   * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
   * @return The enum numeric value on the wire for strategy.
   */
  @java.lang.Override public int getStrategyValue() {
    return strategy_;
  }
  /**
   * <pre>
   * Determined execution strategy
   * </pre>
   *
   * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
   * @return The strategy.
   */
  @java.lang.Override public datapower.noesis.v1.ExecutionStrategy getStrategy() {
    datapower.noesis.v1.ExecutionStrategy result = datapower.noesis.v1.ExecutionStrategy.forNumber(strategy_);
    return result == null ? datapower.noesis.v1.ExecutionStrategy.UNRECOGNIZED : result;
  }

  public static final int STREAMING_JOBS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.StreamingJobSpec> streamingJobs_;
  /**
   * <pre>
   * Streaming job specifications (empty for BATCH_ONLY)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.StreamingJobSpec> getStreamingJobsList() {
    return streamingJobs_;
  }
  /**
   * <pre>
   * Streaming job specifications (empty for BATCH_ONLY)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.StreamingJobSpecOrBuilder> 
      getStreamingJobsOrBuilderList() {
    return streamingJobs_;
  }
  /**
   * <pre>
   * Streaming job specifications (empty for BATCH_ONLY)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
   */
  @java.lang.Override
  public int getStreamingJobsCount() {
    return streamingJobs_.size();
  }
  /**
   * <pre>
   * Streaming job specifications (empty for BATCH_ONLY)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.StreamingJobSpec getStreamingJobs(int index) {
    return streamingJobs_.get(index);
  }
  /**
   * <pre>
   * Streaming job specifications (empty for BATCH_ONLY)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.StreamingJobSpecOrBuilder getStreamingJobsOrBuilder(
      int index) {
    return streamingJobs_.get(index);
  }

  public static final int BATCH_SOURCES_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.BatchSourceSpec> batchSources_;
  /**
   * <pre>
   * Batch source specifications
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.BatchSourceSpec> getBatchSourcesList() {
    return batchSources_;
  }
  /**
   * <pre>
   * Batch source specifications
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.BatchSourceSpecOrBuilder> 
      getBatchSourcesOrBuilderList() {
    return batchSources_;
  }
  /**
   * <pre>
   * Batch source specifications
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
   */
  @java.lang.Override
  public int getBatchSourcesCount() {
    return batchSources_.size();
  }
  /**
   * <pre>
   * Batch source specifications
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.BatchSourceSpec getBatchSources(int index) {
    return batchSources_.get(index);
  }
  /**
   * <pre>
   * Batch source specifications
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.BatchSourceSpecOrBuilder getBatchSourcesOrBuilder(
      int index) {
    return batchSources_.get(index);
  }

  public static final int BATCH_RECONCILIATION_FIELD_NUMBER = 5;
  private datapower.noesis.v1.BatchReconciliationJobSpec batchReconciliation_;
  /**
   * <pre>
   * Batch reconciliation job specification (may be null for STREAMING_ONLY)
   * </pre>
   *
   * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
   * @return Whether the batchReconciliation field is set.
   */
  @java.lang.Override
  public boolean hasBatchReconciliation() {
    return batchReconciliation_ != null;
  }
  /**
   * <pre>
   * Batch reconciliation job specification (may be null for STREAMING_ONLY)
   * </pre>
   *
   * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
   * @return The batchReconciliation.
   */
  @java.lang.Override
  public datapower.noesis.v1.BatchReconciliationJobSpec getBatchReconciliation() {
    return batchReconciliation_ == null ? datapower.noesis.v1.BatchReconciliationJobSpec.getDefaultInstance() : batchReconciliation_;
  }
  /**
   * <pre>
   * Batch reconciliation job specification (may be null for STREAMING_ONLY)
   * </pre>
   *
   * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.BatchReconciliationJobSpecOrBuilder getBatchReconciliationOrBuilder() {
    return batchReconciliation_ == null ? datapower.noesis.v1.BatchReconciliationJobSpec.getDefaultInstance() : batchReconciliation_;
  }

  public static final int METADATA_FIELD_NUMBER = 6;
  private datapower.noesis.v1.PlanningMetadata metadata_;
  /**
   * <pre>
   * Planning metadata
   * </pre>
   *
   * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  @java.lang.Override
  public boolean hasMetadata() {
    return metadata_ != null;
  }
  /**
   * <pre>
   * Planning metadata
   * </pre>
   *
   * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  @java.lang.Override
  public datapower.noesis.v1.PlanningMetadata getMetadata() {
    return metadata_ == null ? datapower.noesis.v1.PlanningMetadata.getDefaultInstance() : metadata_;
  }
  /**
   * <pre>
   * Planning metadata
   * </pre>
   *
   * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.PlanningMetadataOrBuilder getMetadataOrBuilder() {
    return metadata_ == null ? datapower.noesis.v1.PlanningMetadata.getDefaultInstance() : metadata_;
  }

  public static final int PIPELINE_DEFINITION_FIELD_NUMBER = 7;
  private datapower.noesis.v1.PipelineDefinition pipelineDefinition_;
  /**
   * <pre>
   * The original pipeline definition (for reference)
   * </pre>
   *
   * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
   * @return Whether the pipelineDefinition field is set.
   */
  @java.lang.Override
  public boolean hasPipelineDefinition() {
    return pipelineDefinition_ != null;
  }
  /**
   * <pre>
   * The original pipeline definition (for reference)
   * </pre>
   *
   * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
   * @return The pipelineDefinition.
   */
  @java.lang.Override
  public datapower.noesis.v1.PipelineDefinition getPipelineDefinition() {
    return pipelineDefinition_ == null ? datapower.noesis.v1.PipelineDefinition.getDefaultInstance() : pipelineDefinition_;
  }
  /**
   * <pre>
   * The original pipeline definition (for reference)
   * </pre>
   *
   * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.PipelineDefinitionOrBuilder getPipelineDefinitionOrBuilder() {
    return pipelineDefinition_ == null ? datapower.noesis.v1.PipelineDefinition.getDefaultInstance() : pipelineDefinition_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pipelineName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, pipelineName_);
    }
    if (strategy_ != datapower.noesis.v1.ExecutionStrategy.STRATEGY_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, strategy_);
    }
    for (int i = 0; i < streamingJobs_.size(); i++) {
      output.writeMessage(3, streamingJobs_.get(i));
    }
    for (int i = 0; i < batchSources_.size(); i++) {
      output.writeMessage(4, batchSources_.get(i));
    }
    if (batchReconciliation_ != null) {
      output.writeMessage(5, getBatchReconciliation());
    }
    if (metadata_ != null) {
      output.writeMessage(6, getMetadata());
    }
    if (pipelineDefinition_ != null) {
      output.writeMessage(7, getPipelineDefinition());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pipelineName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, pipelineName_);
    }
    if (strategy_ != datapower.noesis.v1.ExecutionStrategy.STRATEGY_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, strategy_);
    }
    for (int i = 0; i < streamingJobs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, streamingJobs_.get(i));
    }
    for (int i = 0; i < batchSources_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, batchSources_.get(i));
    }
    if (batchReconciliation_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getBatchReconciliation());
    }
    if (metadata_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getMetadata());
    }
    if (pipelineDefinition_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getPipelineDefinition());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.ExecutionPlan)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.ExecutionPlan other = (datapower.noesis.v1.ExecutionPlan) obj;

    if (!getPipelineName()
        .equals(other.getPipelineName())) return false;
    if (strategy_ != other.strategy_) return false;
    if (!getStreamingJobsList()
        .equals(other.getStreamingJobsList())) return false;
    if (!getBatchSourcesList()
        .equals(other.getBatchSourcesList())) return false;
    if (hasBatchReconciliation() != other.hasBatchReconciliation()) return false;
    if (hasBatchReconciliation()) {
      if (!getBatchReconciliation()
          .equals(other.getBatchReconciliation())) return false;
    }
    if (hasMetadata() != other.hasMetadata()) return false;
    if (hasMetadata()) {
      if (!getMetadata()
          .equals(other.getMetadata())) return false;
    }
    if (hasPipelineDefinition() != other.hasPipelineDefinition()) return false;
    if (hasPipelineDefinition()) {
      if (!getPipelineDefinition()
          .equals(other.getPipelineDefinition())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PIPELINE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getPipelineName().hashCode();
    hash = (37 * hash) + STRATEGY_FIELD_NUMBER;
    hash = (53 * hash) + strategy_;
    if (getStreamingJobsCount() > 0) {
      hash = (37 * hash) + STREAMING_JOBS_FIELD_NUMBER;
      hash = (53 * hash) + getStreamingJobsList().hashCode();
    }
    if (getBatchSourcesCount() > 0) {
      hash = (37 * hash) + BATCH_SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getBatchSourcesList().hashCode();
    }
    if (hasBatchReconciliation()) {
      hash = (37 * hash) + BATCH_RECONCILIATION_FIELD_NUMBER;
      hash = (53 * hash) + getBatchReconciliation().hashCode();
    }
    if (hasMetadata()) {
      hash = (37 * hash) + METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getMetadata().hashCode();
    }
    if (hasPipelineDefinition()) {
      hash = (37 * hash) + PIPELINE_DEFINITION_FIELD_NUMBER;
      hash = (53 * hash) + getPipelineDefinition().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.ExecutionPlan parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.ExecutionPlan parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.ExecutionPlan parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.ExecutionPlan prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ExecutionPlan is the output of the planning phase
   * It contains all information needed to execute the pipeline
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.ExecutionPlan}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.ExecutionPlan)
      datapower.noesis.v1.ExecutionPlanOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_ExecutionPlan_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_ExecutionPlan_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.ExecutionPlan.class, datapower.noesis.v1.ExecutionPlan.Builder.class);
    }

    // Construct using datapower.noesis.v1.ExecutionPlan.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      pipelineName_ = "";
      strategy_ = 0;
      if (streamingJobsBuilder_ == null) {
        streamingJobs_ = java.util.Collections.emptyList();
      } else {
        streamingJobs_ = null;
        streamingJobsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (batchSourcesBuilder_ == null) {
        batchSources_ = java.util.Collections.emptyList();
      } else {
        batchSources_ = null;
        batchSourcesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      batchReconciliation_ = null;
      if (batchReconciliationBuilder_ != null) {
        batchReconciliationBuilder_.dispose();
        batchReconciliationBuilder_ = null;
      }
      metadata_ = null;
      if (metadataBuilder_ != null) {
        metadataBuilder_.dispose();
        metadataBuilder_ = null;
      }
      pipelineDefinition_ = null;
      if (pipelineDefinitionBuilder_ != null) {
        pipelineDefinitionBuilder_.dispose();
        pipelineDefinitionBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_ExecutionPlan_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.ExecutionPlan getDefaultInstanceForType() {
      return datapower.noesis.v1.ExecutionPlan.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.ExecutionPlan build() {
      datapower.noesis.v1.ExecutionPlan result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.ExecutionPlan buildPartial() {
      datapower.noesis.v1.ExecutionPlan result = new datapower.noesis.v1.ExecutionPlan(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(datapower.noesis.v1.ExecutionPlan result) {
      if (streamingJobsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          streamingJobs_ = java.util.Collections.unmodifiableList(streamingJobs_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.streamingJobs_ = streamingJobs_;
      } else {
        result.streamingJobs_ = streamingJobsBuilder_.build();
      }
      if (batchSourcesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          batchSources_ = java.util.Collections.unmodifiableList(batchSources_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.batchSources_ = batchSources_;
      } else {
        result.batchSources_ = batchSourcesBuilder_.build();
      }
    }

    private void buildPartial0(datapower.noesis.v1.ExecutionPlan result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.pipelineName_ = pipelineName_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.strategy_ = strategy_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.batchReconciliation_ = batchReconciliationBuilder_ == null
            ? batchReconciliation_
            : batchReconciliationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.metadata_ = metadataBuilder_ == null
            ? metadata_
            : metadataBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.pipelineDefinition_ = pipelineDefinitionBuilder_ == null
            ? pipelineDefinition_
            : pipelineDefinitionBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.ExecutionPlan) {
        return mergeFrom((datapower.noesis.v1.ExecutionPlan)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.ExecutionPlan other) {
      if (other == datapower.noesis.v1.ExecutionPlan.getDefaultInstance()) return this;
      if (!other.getPipelineName().isEmpty()) {
        pipelineName_ = other.pipelineName_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.strategy_ != 0) {
        setStrategyValue(other.getStrategyValue());
      }
      if (streamingJobsBuilder_ == null) {
        if (!other.streamingJobs_.isEmpty()) {
          if (streamingJobs_.isEmpty()) {
            streamingJobs_ = other.streamingJobs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStreamingJobsIsMutable();
            streamingJobs_.addAll(other.streamingJobs_);
          }
          onChanged();
        }
      } else {
        if (!other.streamingJobs_.isEmpty()) {
          if (streamingJobsBuilder_.isEmpty()) {
            streamingJobsBuilder_.dispose();
            streamingJobsBuilder_ = null;
            streamingJobs_ = other.streamingJobs_;
            bitField0_ = (bitField0_ & ~0x00000004);
            streamingJobsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStreamingJobsFieldBuilder() : null;
          } else {
            streamingJobsBuilder_.addAllMessages(other.streamingJobs_);
          }
        }
      }
      if (batchSourcesBuilder_ == null) {
        if (!other.batchSources_.isEmpty()) {
          if (batchSources_.isEmpty()) {
            batchSources_ = other.batchSources_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBatchSourcesIsMutable();
            batchSources_.addAll(other.batchSources_);
          }
          onChanged();
        }
      } else {
        if (!other.batchSources_.isEmpty()) {
          if (batchSourcesBuilder_.isEmpty()) {
            batchSourcesBuilder_.dispose();
            batchSourcesBuilder_ = null;
            batchSources_ = other.batchSources_;
            bitField0_ = (bitField0_ & ~0x00000008);
            batchSourcesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getBatchSourcesFieldBuilder() : null;
          } else {
            batchSourcesBuilder_.addAllMessages(other.batchSources_);
          }
        }
      }
      if (other.hasBatchReconciliation()) {
        mergeBatchReconciliation(other.getBatchReconciliation());
      }
      if (other.hasMetadata()) {
        mergeMetadata(other.getMetadata());
      }
      if (other.hasPipelineDefinition()) {
        mergePipelineDefinition(other.getPipelineDefinition());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              pipelineName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              strategy_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              datapower.noesis.v1.StreamingJobSpec m =
                  input.readMessage(
                      datapower.noesis.v1.StreamingJobSpec.parser(),
                      extensionRegistry);
              if (streamingJobsBuilder_ == null) {
                ensureStreamingJobsIsMutable();
                streamingJobs_.add(m);
              } else {
                streamingJobsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              datapower.noesis.v1.BatchSourceSpec m =
                  input.readMessage(
                      datapower.noesis.v1.BatchSourceSpec.parser(),
                      extensionRegistry);
              if (batchSourcesBuilder_ == null) {
                ensureBatchSourcesIsMutable();
                batchSources_.add(m);
              } else {
                batchSourcesBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getBatchReconciliationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getMetadataFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getPipelineDefinitionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object pipelineName_ = "";
    /**
     * <pre>
     * Pipeline name
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @return The pipelineName.
     */
    public java.lang.String getPipelineName() {
      java.lang.Object ref = pipelineName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pipelineName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Pipeline name
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @return The bytes for pipelineName.
     */
    public com.google.protobuf.ByteString
        getPipelineNameBytes() {
      java.lang.Object ref = pipelineName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pipelineName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Pipeline name
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @param value The pipelineName to set.
     * @return This builder for chaining.
     */
    public Builder setPipelineName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      pipelineName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Pipeline name
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPipelineName() {
      pipelineName_ = getDefaultInstance().getPipelineName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Pipeline name
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @param value The bytes for pipelineName to set.
     * @return This builder for chaining.
     */
    public Builder setPipelineNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      pipelineName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int strategy_ = 0;
    /**
     * <pre>
     * Determined execution strategy
     * </pre>
     *
     * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
     * @return The enum numeric value on the wire for strategy.
     */
    @java.lang.Override public int getStrategyValue() {
      return strategy_;
    }
    /**
     * <pre>
     * Determined execution strategy
     * </pre>
     *
     * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
     * @param value The enum numeric value on the wire for strategy to set.
     * @return This builder for chaining.
     */
    public Builder setStrategyValue(int value) {
      strategy_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Determined execution strategy
     * </pre>
     *
     * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
     * @return The strategy.
     */
    @java.lang.Override
    public datapower.noesis.v1.ExecutionStrategy getStrategy() {
      datapower.noesis.v1.ExecutionStrategy result = datapower.noesis.v1.ExecutionStrategy.forNumber(strategy_);
      return result == null ? datapower.noesis.v1.ExecutionStrategy.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Determined execution strategy
     * </pre>
     *
     * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
     * @param value The strategy to set.
     * @return This builder for chaining.
     */
    public Builder setStrategy(datapower.noesis.v1.ExecutionStrategy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      strategy_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Determined execution strategy
     * </pre>
     *
     * <code>.datapower.noesis.v1.ExecutionStrategy strategy = 2 [json_name = "strategy"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStrategy() {
      bitField0_ = (bitField0_ & ~0x00000002);
      strategy_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<datapower.noesis.v1.StreamingJobSpec> streamingJobs_ =
      java.util.Collections.emptyList();
    private void ensureStreamingJobsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        streamingJobs_ = new java.util.ArrayList<datapower.noesis.v1.StreamingJobSpec>(streamingJobs_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.StreamingJobSpec, datapower.noesis.v1.StreamingJobSpec.Builder, datapower.noesis.v1.StreamingJobSpecOrBuilder> streamingJobsBuilder_;

    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public java.util.List<datapower.noesis.v1.StreamingJobSpec> getStreamingJobsList() {
      if (streamingJobsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(streamingJobs_);
      } else {
        return streamingJobsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public int getStreamingJobsCount() {
      if (streamingJobsBuilder_ == null) {
        return streamingJobs_.size();
      } else {
        return streamingJobsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public datapower.noesis.v1.StreamingJobSpec getStreamingJobs(int index) {
      if (streamingJobsBuilder_ == null) {
        return streamingJobs_.get(index);
      } else {
        return streamingJobsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder setStreamingJobs(
        int index, datapower.noesis.v1.StreamingJobSpec value) {
      if (streamingJobsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamingJobsIsMutable();
        streamingJobs_.set(index, value);
        onChanged();
      } else {
        streamingJobsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder setStreamingJobs(
        int index, datapower.noesis.v1.StreamingJobSpec.Builder builderForValue) {
      if (streamingJobsBuilder_ == null) {
        ensureStreamingJobsIsMutable();
        streamingJobs_.set(index, builderForValue.build());
        onChanged();
      } else {
        streamingJobsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder addStreamingJobs(datapower.noesis.v1.StreamingJobSpec value) {
      if (streamingJobsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamingJobsIsMutable();
        streamingJobs_.add(value);
        onChanged();
      } else {
        streamingJobsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder addStreamingJobs(
        int index, datapower.noesis.v1.StreamingJobSpec value) {
      if (streamingJobsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamingJobsIsMutable();
        streamingJobs_.add(index, value);
        onChanged();
      } else {
        streamingJobsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder addStreamingJobs(
        datapower.noesis.v1.StreamingJobSpec.Builder builderForValue) {
      if (streamingJobsBuilder_ == null) {
        ensureStreamingJobsIsMutable();
        streamingJobs_.add(builderForValue.build());
        onChanged();
      } else {
        streamingJobsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder addStreamingJobs(
        int index, datapower.noesis.v1.StreamingJobSpec.Builder builderForValue) {
      if (streamingJobsBuilder_ == null) {
        ensureStreamingJobsIsMutable();
        streamingJobs_.add(index, builderForValue.build());
        onChanged();
      } else {
        streamingJobsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder addAllStreamingJobs(
        java.lang.Iterable<? extends datapower.noesis.v1.StreamingJobSpec> values) {
      if (streamingJobsBuilder_ == null) {
        ensureStreamingJobsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, streamingJobs_);
        onChanged();
      } else {
        streamingJobsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder clearStreamingJobs() {
      if (streamingJobsBuilder_ == null) {
        streamingJobs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        streamingJobsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public Builder removeStreamingJobs(int index) {
      if (streamingJobsBuilder_ == null) {
        ensureStreamingJobsIsMutable();
        streamingJobs_.remove(index);
        onChanged();
      } else {
        streamingJobsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public datapower.noesis.v1.StreamingJobSpec.Builder getStreamingJobsBuilder(
        int index) {
      return getStreamingJobsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public datapower.noesis.v1.StreamingJobSpecOrBuilder getStreamingJobsOrBuilder(
        int index) {
      if (streamingJobsBuilder_ == null) {
        return streamingJobs_.get(index);  } else {
        return streamingJobsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.StreamingJobSpecOrBuilder> 
         getStreamingJobsOrBuilderList() {
      if (streamingJobsBuilder_ != null) {
        return streamingJobsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(streamingJobs_);
      }
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public datapower.noesis.v1.StreamingJobSpec.Builder addStreamingJobsBuilder() {
      return getStreamingJobsFieldBuilder().addBuilder(
          datapower.noesis.v1.StreamingJobSpec.getDefaultInstance());
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public datapower.noesis.v1.StreamingJobSpec.Builder addStreamingJobsBuilder(
        int index) {
      return getStreamingJobsFieldBuilder().addBuilder(
          index, datapower.noesis.v1.StreamingJobSpec.getDefaultInstance());
    }
    /**
     * <pre>
     * Streaming job specifications (empty for BATCH_ONLY)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.StreamingJobSpec streaming_jobs = 3 [json_name = "streamingJobs"];</code>
     */
    public java.util.List<datapower.noesis.v1.StreamingJobSpec.Builder> 
         getStreamingJobsBuilderList() {
      return getStreamingJobsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.StreamingJobSpec, datapower.noesis.v1.StreamingJobSpec.Builder, datapower.noesis.v1.StreamingJobSpecOrBuilder> 
        getStreamingJobsFieldBuilder() {
      if (streamingJobsBuilder_ == null) {
        streamingJobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.StreamingJobSpec, datapower.noesis.v1.StreamingJobSpec.Builder, datapower.noesis.v1.StreamingJobSpecOrBuilder>(
                streamingJobs_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        streamingJobs_ = null;
      }
      return streamingJobsBuilder_;
    }

    private java.util.List<datapower.noesis.v1.BatchSourceSpec> batchSources_ =
      java.util.Collections.emptyList();
    private void ensureBatchSourcesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        batchSources_ = new java.util.ArrayList<datapower.noesis.v1.BatchSourceSpec>(batchSources_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.BatchSourceSpec, datapower.noesis.v1.BatchSourceSpec.Builder, datapower.noesis.v1.BatchSourceSpecOrBuilder> batchSourcesBuilder_;

    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public java.util.List<datapower.noesis.v1.BatchSourceSpec> getBatchSourcesList() {
      if (batchSourcesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(batchSources_);
      } else {
        return batchSourcesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public int getBatchSourcesCount() {
      if (batchSourcesBuilder_ == null) {
        return batchSources_.size();
      } else {
        return batchSourcesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public datapower.noesis.v1.BatchSourceSpec getBatchSources(int index) {
      if (batchSourcesBuilder_ == null) {
        return batchSources_.get(index);
      } else {
        return batchSourcesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder setBatchSources(
        int index, datapower.noesis.v1.BatchSourceSpec value) {
      if (batchSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBatchSourcesIsMutable();
        batchSources_.set(index, value);
        onChanged();
      } else {
        batchSourcesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder setBatchSources(
        int index, datapower.noesis.v1.BatchSourceSpec.Builder builderForValue) {
      if (batchSourcesBuilder_ == null) {
        ensureBatchSourcesIsMutable();
        batchSources_.set(index, builderForValue.build());
        onChanged();
      } else {
        batchSourcesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder addBatchSources(datapower.noesis.v1.BatchSourceSpec value) {
      if (batchSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBatchSourcesIsMutable();
        batchSources_.add(value);
        onChanged();
      } else {
        batchSourcesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder addBatchSources(
        int index, datapower.noesis.v1.BatchSourceSpec value) {
      if (batchSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBatchSourcesIsMutable();
        batchSources_.add(index, value);
        onChanged();
      } else {
        batchSourcesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder addBatchSources(
        datapower.noesis.v1.BatchSourceSpec.Builder builderForValue) {
      if (batchSourcesBuilder_ == null) {
        ensureBatchSourcesIsMutable();
        batchSources_.add(builderForValue.build());
        onChanged();
      } else {
        batchSourcesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder addBatchSources(
        int index, datapower.noesis.v1.BatchSourceSpec.Builder builderForValue) {
      if (batchSourcesBuilder_ == null) {
        ensureBatchSourcesIsMutable();
        batchSources_.add(index, builderForValue.build());
        onChanged();
      } else {
        batchSourcesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder addAllBatchSources(
        java.lang.Iterable<? extends datapower.noesis.v1.BatchSourceSpec> values) {
      if (batchSourcesBuilder_ == null) {
        ensureBatchSourcesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, batchSources_);
        onChanged();
      } else {
        batchSourcesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder clearBatchSources() {
      if (batchSourcesBuilder_ == null) {
        batchSources_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        batchSourcesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public Builder removeBatchSources(int index) {
      if (batchSourcesBuilder_ == null) {
        ensureBatchSourcesIsMutable();
        batchSources_.remove(index);
        onChanged();
      } else {
        batchSourcesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public datapower.noesis.v1.BatchSourceSpec.Builder getBatchSourcesBuilder(
        int index) {
      return getBatchSourcesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public datapower.noesis.v1.BatchSourceSpecOrBuilder getBatchSourcesOrBuilder(
        int index) {
      if (batchSourcesBuilder_ == null) {
        return batchSources_.get(index);  } else {
        return batchSourcesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.BatchSourceSpecOrBuilder> 
         getBatchSourcesOrBuilderList() {
      if (batchSourcesBuilder_ != null) {
        return batchSourcesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(batchSources_);
      }
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public datapower.noesis.v1.BatchSourceSpec.Builder addBatchSourcesBuilder() {
      return getBatchSourcesFieldBuilder().addBuilder(
          datapower.noesis.v1.BatchSourceSpec.getDefaultInstance());
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public datapower.noesis.v1.BatchSourceSpec.Builder addBatchSourcesBuilder(
        int index) {
      return getBatchSourcesFieldBuilder().addBuilder(
          index, datapower.noesis.v1.BatchSourceSpec.getDefaultInstance());
    }
    /**
     * <pre>
     * Batch source specifications
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.BatchSourceSpec batch_sources = 4 [json_name = "batchSources"];</code>
     */
    public java.util.List<datapower.noesis.v1.BatchSourceSpec.Builder> 
         getBatchSourcesBuilderList() {
      return getBatchSourcesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.BatchSourceSpec, datapower.noesis.v1.BatchSourceSpec.Builder, datapower.noesis.v1.BatchSourceSpecOrBuilder> 
        getBatchSourcesFieldBuilder() {
      if (batchSourcesBuilder_ == null) {
        batchSourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.BatchSourceSpec, datapower.noesis.v1.BatchSourceSpec.Builder, datapower.noesis.v1.BatchSourceSpecOrBuilder>(
                batchSources_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        batchSources_ = null;
      }
      return batchSourcesBuilder_;
    }

    private datapower.noesis.v1.BatchReconciliationJobSpec batchReconciliation_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.BatchReconciliationJobSpec, datapower.noesis.v1.BatchReconciliationJobSpec.Builder, datapower.noesis.v1.BatchReconciliationJobSpecOrBuilder> batchReconciliationBuilder_;
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     * @return Whether the batchReconciliation field is set.
     */
    public boolean hasBatchReconciliation() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     * @return The batchReconciliation.
     */
    public datapower.noesis.v1.BatchReconciliationJobSpec getBatchReconciliation() {
      if (batchReconciliationBuilder_ == null) {
        return batchReconciliation_ == null ? datapower.noesis.v1.BatchReconciliationJobSpec.getDefaultInstance() : batchReconciliation_;
      } else {
        return batchReconciliationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    public Builder setBatchReconciliation(datapower.noesis.v1.BatchReconciliationJobSpec value) {
      if (batchReconciliationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        batchReconciliation_ = value;
      } else {
        batchReconciliationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    public Builder setBatchReconciliation(
        datapower.noesis.v1.BatchReconciliationJobSpec.Builder builderForValue) {
      if (batchReconciliationBuilder_ == null) {
        batchReconciliation_ = builderForValue.build();
      } else {
        batchReconciliationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    public Builder mergeBatchReconciliation(datapower.noesis.v1.BatchReconciliationJobSpec value) {
      if (batchReconciliationBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          batchReconciliation_ != null &&
          batchReconciliation_ != datapower.noesis.v1.BatchReconciliationJobSpec.getDefaultInstance()) {
          getBatchReconciliationBuilder().mergeFrom(value);
        } else {
          batchReconciliation_ = value;
        }
      } else {
        batchReconciliationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    public Builder clearBatchReconciliation() {
      bitField0_ = (bitField0_ & ~0x00000010);
      batchReconciliation_ = null;
      if (batchReconciliationBuilder_ != null) {
        batchReconciliationBuilder_.dispose();
        batchReconciliationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    public datapower.noesis.v1.BatchReconciliationJobSpec.Builder getBatchReconciliationBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getBatchReconciliationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    public datapower.noesis.v1.BatchReconciliationJobSpecOrBuilder getBatchReconciliationOrBuilder() {
      if (batchReconciliationBuilder_ != null) {
        return batchReconciliationBuilder_.getMessageOrBuilder();
      } else {
        return batchReconciliation_ == null ?
            datapower.noesis.v1.BatchReconciliationJobSpec.getDefaultInstance() : batchReconciliation_;
      }
    }
    /**
     * <pre>
     * Batch reconciliation job specification (may be null for STREAMING_ONLY)
     * </pre>
     *
     * <code>.datapower.noesis.v1.BatchReconciliationJobSpec batch_reconciliation = 5 [json_name = "batchReconciliation"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.BatchReconciliationJobSpec, datapower.noesis.v1.BatchReconciliationJobSpec.Builder, datapower.noesis.v1.BatchReconciliationJobSpecOrBuilder> 
        getBatchReconciliationFieldBuilder() {
      if (batchReconciliationBuilder_ == null) {
        batchReconciliationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.BatchReconciliationJobSpec, datapower.noesis.v1.BatchReconciliationJobSpec.Builder, datapower.noesis.v1.BatchReconciliationJobSpecOrBuilder>(
                getBatchReconciliation(),
                getParentForChildren(),
                isClean());
        batchReconciliation_ = null;
      }
      return batchReconciliationBuilder_;
    }

    private datapower.noesis.v1.PlanningMetadata metadata_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.PlanningMetadata, datapower.noesis.v1.PlanningMetadata.Builder, datapower.noesis.v1.PlanningMetadataOrBuilder> metadataBuilder_;
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     * @return Whether the metadata field is set.
     */
    public boolean hasMetadata() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     * @return The metadata.
     */
    public datapower.noesis.v1.PlanningMetadata getMetadata() {
      if (metadataBuilder_ == null) {
        return metadata_ == null ? datapower.noesis.v1.PlanningMetadata.getDefaultInstance() : metadata_;
      } else {
        return metadataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(datapower.noesis.v1.PlanningMetadata value) {
      if (metadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metadata_ = value;
      } else {
        metadataBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(
        datapower.noesis.v1.PlanningMetadata.Builder builderForValue) {
      if (metadataBuilder_ == null) {
        metadata_ = builderForValue.build();
      } else {
        metadataBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder mergeMetadata(datapower.noesis.v1.PlanningMetadata value) {
      if (metadataBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          metadata_ != null &&
          metadata_ != datapower.noesis.v1.PlanningMetadata.getDefaultInstance()) {
          getMetadataBuilder().mergeFrom(value);
        } else {
          metadata_ = value;
        }
      } else {
        metadataBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder clearMetadata() {
      bitField0_ = (bitField0_ & ~0x00000020);
      metadata_ = null;
      if (metadataBuilder_ != null) {
        metadataBuilder_.dispose();
        metadataBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    public datapower.noesis.v1.PlanningMetadata.Builder getMetadataBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getMetadataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    public datapower.noesis.v1.PlanningMetadataOrBuilder getMetadataOrBuilder() {
      if (metadataBuilder_ != null) {
        return metadataBuilder_.getMessageOrBuilder();
      } else {
        return metadata_ == null ?
            datapower.noesis.v1.PlanningMetadata.getDefaultInstance() : metadata_;
      }
    }
    /**
     * <pre>
     * Planning metadata
     * </pre>
     *
     * <code>.datapower.noesis.v1.PlanningMetadata metadata = 6 [json_name = "metadata"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.PlanningMetadata, datapower.noesis.v1.PlanningMetadata.Builder, datapower.noesis.v1.PlanningMetadataOrBuilder> 
        getMetadataFieldBuilder() {
      if (metadataBuilder_ == null) {
        metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.PlanningMetadata, datapower.noesis.v1.PlanningMetadata.Builder, datapower.noesis.v1.PlanningMetadataOrBuilder>(
                getMetadata(),
                getParentForChildren(),
                isClean());
        metadata_ = null;
      }
      return metadataBuilder_;
    }

    private datapower.noesis.v1.PipelineDefinition pipelineDefinition_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.PipelineDefinition, datapower.noesis.v1.PipelineDefinition.Builder, datapower.noesis.v1.PipelineDefinitionOrBuilder> pipelineDefinitionBuilder_;
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     * @return Whether the pipelineDefinition field is set.
     */
    public boolean hasPipelineDefinition() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     * @return The pipelineDefinition.
     */
    public datapower.noesis.v1.PipelineDefinition getPipelineDefinition() {
      if (pipelineDefinitionBuilder_ == null) {
        return pipelineDefinition_ == null ? datapower.noesis.v1.PipelineDefinition.getDefaultInstance() : pipelineDefinition_;
      } else {
        return pipelineDefinitionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    public Builder setPipelineDefinition(datapower.noesis.v1.PipelineDefinition value) {
      if (pipelineDefinitionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pipelineDefinition_ = value;
      } else {
        pipelineDefinitionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    public Builder setPipelineDefinition(
        datapower.noesis.v1.PipelineDefinition.Builder builderForValue) {
      if (pipelineDefinitionBuilder_ == null) {
        pipelineDefinition_ = builderForValue.build();
      } else {
        pipelineDefinitionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    public Builder mergePipelineDefinition(datapower.noesis.v1.PipelineDefinition value) {
      if (pipelineDefinitionBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          pipelineDefinition_ != null &&
          pipelineDefinition_ != datapower.noesis.v1.PipelineDefinition.getDefaultInstance()) {
          getPipelineDefinitionBuilder().mergeFrom(value);
        } else {
          pipelineDefinition_ = value;
        }
      } else {
        pipelineDefinitionBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    public Builder clearPipelineDefinition() {
      bitField0_ = (bitField0_ & ~0x00000040);
      pipelineDefinition_ = null;
      if (pipelineDefinitionBuilder_ != null) {
        pipelineDefinitionBuilder_.dispose();
        pipelineDefinitionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    public datapower.noesis.v1.PipelineDefinition.Builder getPipelineDefinitionBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getPipelineDefinitionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    public datapower.noesis.v1.PipelineDefinitionOrBuilder getPipelineDefinitionOrBuilder() {
      if (pipelineDefinitionBuilder_ != null) {
        return pipelineDefinitionBuilder_.getMessageOrBuilder();
      } else {
        return pipelineDefinition_ == null ?
            datapower.noesis.v1.PipelineDefinition.getDefaultInstance() : pipelineDefinition_;
      }
    }
    /**
     * <pre>
     * The original pipeline definition (for reference)
     * </pre>
     *
     * <code>.datapower.noesis.v1.PipelineDefinition pipeline_definition = 7 [json_name = "pipelineDefinition"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.PipelineDefinition, datapower.noesis.v1.PipelineDefinition.Builder, datapower.noesis.v1.PipelineDefinitionOrBuilder> 
        getPipelineDefinitionFieldBuilder() {
      if (pipelineDefinitionBuilder_ == null) {
        pipelineDefinitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.PipelineDefinition, datapower.noesis.v1.PipelineDefinition.Builder, datapower.noesis.v1.PipelineDefinitionOrBuilder>(
                getPipelineDefinition(),
                getParentForChildren(),
                isClean());
        pipelineDefinition_ = null;
      }
      return pipelineDefinitionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.ExecutionPlan)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.ExecutionPlan)
  private static final datapower.noesis.v1.ExecutionPlan DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.ExecutionPlan();
  }

  public static datapower.noesis.v1.ExecutionPlan getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExecutionPlan>
      PARSER = new com.google.protobuf.AbstractParser<ExecutionPlan>() {
    @java.lang.Override
    public ExecutionPlan parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ExecutionPlan> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ExecutionPlan> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.ExecutionPlan getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

