// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface BatchReconciliationJobSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.BatchReconciliationJobSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique job name (e.g., "customer-360-view_batch_reconciliation")
   * </pre>
   *
   * <code>string job_name = 1 [json_name = "jobName"];</code>
   * @return The jobName.
   */
  java.lang.String getJobName();
  /**
   * <pre>
   * Unique job name (e.g., "customer-360-view_batch_reconciliation")
   * </pre>
   *
   * <code>string job_name = 1 [json_name = "jobName"];</code>
   * @return The bytes for jobName.
   */
  com.google.protobuf.ByteString
      getJobNameBytes();

  /**
   * <pre>
   * Sink topic where full-state events are written
   * </pre>
   *
   * <code>string sink_topic = 2 [json_name = "sinkTopic"];</code>
   * @return The sinkTopic.
   */
  java.lang.String getSinkTopic();
  /**
   * <pre>
   * Sink topic where full-state events are written
   * </pre>
   *
   * <code>string sink_topic = 2 [json_name = "sinkTopic"];</code>
   * @return The bytes for sinkTopic.
   */
  com.google.protobuf.ByteString
      getSinkTopicBytes();

  /**
   * <pre>
   * Generated Flink SQL for batch reconciliation
   * This wraps the user's original SQL query
   * </pre>
   *
   * <code>string flink_sql = 3 [json_name = "flinkSql"];</code>
   * @return The flinkSql.
   */
  java.lang.String getFlinkSql();
  /**
   * <pre>
   * Generated Flink SQL for batch reconciliation
   * This wraps the user's original SQL query
   * </pre>
   *
   * <code>string flink_sql = 3 [json_name = "flinkSql"];</code>
   * @return The bytes for flinkSql.
   */
  com.google.protobuf.ByteString
      getFlinkSqlBytes();

  /**
   * <pre>
   * Source Iceberg tables referenced in the job
   * </pre>
   *
   * <code>repeated string source_tables = 4 [json_name = "sourceTables"];</code>
   * @return A list containing the sourceTables.
   */
  java.util.List<java.lang.String>
      getSourceTablesList();
  /**
   * <pre>
   * Source Iceberg tables referenced in the job
   * </pre>
   *
   * <code>repeated string source_tables = 4 [json_name = "sourceTables"];</code>
   * @return The count of sourceTables.
   */
  int getSourceTablesCount();
  /**
   * <pre>
   * Source Iceberg tables referenced in the job
   * </pre>
   *
   * <code>repeated string source_tables = 4 [json_name = "sourceTables"];</code>
   * @param index The index of the element to return.
   * @return The sourceTables at the given index.
   */
  java.lang.String getSourceTables(int index);
  /**
   * <pre>
   * Source Iceberg tables referenced in the job
   * </pre>
   *
   * <code>repeated string source_tables = 4 [json_name = "sourceTables"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the sourceTables at the given index.
   */
  com.google.protobuf.ByteString
      getSourceTablesBytes(int index);

  /**
   * <pre>
   * Primary key for output records
   * </pre>
   *
   * <code>string primary_key = 5 [json_name = "primaryKey"];</code>
   * @return The primaryKey.
   */
  java.lang.String getPrimaryKey();
  /**
   * <pre>
   * Primary key for output records
   * </pre>
   *
   * <code>string primary_key = 5 [json_name = "primaryKey"];</code>
   * @return The bytes for primaryKey.
   */
  com.google.protobuf.ByteString
      getPrimaryKeyBytes();

  /**
   * <pre>
   * Parallelism for the batch job
   * </pre>
   *
   * <code>int32 parallelism = 6 [json_name = "parallelism"];</code>
   * @return The parallelism.
   */
  int getParallelism();

  /**
   * <pre>
   * Expected runtime (for monitoring)
   * </pre>
   *
   * <code>int64 expected_runtime_ms = 7 [json_name = "expectedRuntimeMs"];</code>
   * @return The expectedRuntimeMs.
   */
  long getExpectedRuntimeMs();
}
