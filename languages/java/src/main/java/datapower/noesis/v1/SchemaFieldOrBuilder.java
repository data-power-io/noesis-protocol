// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/pipeline.proto

package datapower.noesis.v1;

public interface SchemaFieldOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.SchemaField)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Field name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Field name
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Data type (STRING, LONG, INTEGER, DOUBLE, DECIMAL, BOOLEAN, DATE, TIMESTAMP, ARRAY, STRUCT)
   * </pre>
   *
   * <code>string type = 2 [json_name = "type"];</code>
   * @return The type.
   */
  java.lang.String getType();
  /**
   * <pre>
   * Data type (STRING, LONG, INTEGER, DOUBLE, DECIMAL, BOOLEAN, DATE, TIMESTAMP, ARRAY, STRUCT)
   * </pre>
   *
   * <code>string type = 2 [json_name = "type"];</code>
   * @return The bytes for type.
   */
  com.google.protobuf.ByteString
      getTypeBytes();

  /**
   * <pre>
   * Whether this field can be null
   * </pre>
   *
   * <code>bool nullable = 3 [json_name = "nullable"];</code>
   * @return The nullable.
   */
  boolean getNullable();

  /**
   * <pre>
   * Optional: Default value
   * </pre>
   *
   * <code>string default_value = 4 [json_name = "defaultValue"];</code>
   * @return The defaultValue.
   */
  java.lang.String getDefaultValue();
  /**
   * <pre>
   * Optional: Default value
   * </pre>
   *
   * <code>string default_value = 4 [json_name = "defaultValue"];</code>
   * @return The bytes for defaultValue.
   */
  com.google.protobuf.ByteString
      getDefaultValueBytes();

  /**
   * <pre>
   * Optional: Field documentation
   * </pre>
   *
   * <code>string description = 5 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * Optional: Field documentation
   * </pre>
   *
   * <code>string description = 5 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * For DECIMAL types: precision and scale
   * </pre>
   *
   * <code>int32 precision = 6 [json_name = "precision"];</code>
   * @return The precision.
   */
  int getPrecision();

  /**
   * <code>int32 scale = 7 [json_name = "scale"];</code>
   * @return The scale.
   */
  int getScale();

  /**
   * <pre>
   * For ARRAY types: element type
   * </pre>
   *
   * <code>string element_type = 8 [json_name = "elementType"];</code>
   * @return The elementType.
   */
  java.lang.String getElementType();
  /**
   * <pre>
   * For ARRAY types: element type
   * </pre>
   *
   * <code>string element_type = 8 [json_name = "elementType"];</code>
   * @return The bytes for elementType.
   */
  com.google.protobuf.ByteString
      getElementTypeBytes();

  /**
   * <pre>
   * For nested types: sub-fields
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField fields = 9 [json_name = "fields"];</code>
   */
  java.util.List<datapower.noesis.v1.SchemaField> 
      getFieldsList();
  /**
   * <pre>
   * For nested types: sub-fields
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField fields = 9 [json_name = "fields"];</code>
   */
  datapower.noesis.v1.SchemaField getFields(int index);
  /**
   * <pre>
   * For nested types: sub-fields
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField fields = 9 [json_name = "fields"];</code>
   */
  int getFieldsCount();
  /**
   * <pre>
   * For nested types: sub-fields
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField fields = 9 [json_name = "fields"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.SchemaFieldOrBuilder> 
      getFieldsOrBuilderList();
  /**
   * <pre>
   * For nested types: sub-fields
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField fields = 9 [json_name = "fields"];</code>
   */
  datapower.noesis.v1.SchemaFieldOrBuilder getFieldsOrBuilder(
      int index);
}
