// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/pipeline.proto

package datapower.noesis.v1;

/**
 * <pre>
 * PipelineDefinition represents the complete declarative pipeline specification
 * This matches the YAML structure that users define
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.PipelineDefinition}
 */
public final class PipelineDefinition extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.PipelineDefinition)
    PipelineDefinitionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PipelineDefinition.newBuilder() to construct.
  private PipelineDefinition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PipelineDefinition() {
    pipelineName_ = "";
    schedule_ = "";
    sources_ = java.util.Collections.emptyList();
    sinks_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PipelineDefinition();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_PipelineDefinition_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 7:
        return internalGetMetadata();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_PipelineDefinition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.PipelineDefinition.class, datapower.noesis.v1.PipelineDefinition.Builder.class);
  }

  public static final int PIPELINE_NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object pipelineName_ = "";
  /**
   * <pre>
   * Unique pipeline identifier (must be DNS-safe)
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The pipelineName.
   */
  @java.lang.Override
  public java.lang.String getPipelineName() {
    java.lang.Object ref = pipelineName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pipelineName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Unique pipeline identifier (must be DNS-safe)
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The bytes for pipelineName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPipelineNameBytes() {
    java.lang.Object ref = pipelineName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pipelineName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SCHEDULE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object schedule_ = "";
  /**
   * <pre>
   * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
   * </pre>
   *
   * <code>string schedule = 2 [json_name = "schedule"];</code>
   * @return The schedule.
   */
  @java.lang.Override
  public java.lang.String getSchedule() {
    java.lang.Object ref = schedule_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      schedule_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
   * </pre>
   *
   * <code>string schedule = 2 [json_name = "schedule"];</code>
   * @return The bytes for schedule.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getScheduleBytes() {
    java.lang.Object ref = schedule_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      schedule_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SOURCES_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.Source> sources_;
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.Source> getSourcesList() {
    return sources_;
  }
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.SourceOrBuilder> 
      getSourcesOrBuilderList() {
    return sources_;
  }
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  @java.lang.Override
  public int getSourcesCount() {
    return sources_.size();
  }
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.Source getSources(int index) {
    return sources_.get(index);
  }
  /**
   * <pre>
   * All data sources for this pipeline
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.SourceOrBuilder getSourcesOrBuilder(
      int index) {
    return sources_.get(index);
  }

  public static final int SINKS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.Sink> sinks_;
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.Sink> getSinksList() {
    return sinks_;
  }
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.SinkOrBuilder> 
      getSinksOrBuilderList() {
    return sinks_;
  }
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  @java.lang.Override
  public int getSinksCount() {
    return sinks_.size();
  }
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.Sink getSinks(int index) {
    return sinks_.get(index);
  }
  /**
   * <pre>
   * Output sinks (typically Kafka topics)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.SinkOrBuilder getSinksOrBuilder(
      int index) {
    return sinks_.get(index);
  }

  public static final int TARGET_SCHEMA_FIELD_NUMBER = 5;
  private datapower.noesis.v1.TargetSchema targetSchema_;
  /**
   * <pre>
   * Schema definition for the final transformed data
   * </pre>
   *
   * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
   * @return Whether the targetSchema field is set.
   */
  @java.lang.Override
  public boolean hasTargetSchema() {
    return targetSchema_ != null;
  }
  /**
   * <pre>
   * Schema definition for the final transformed data
   * </pre>
   *
   * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
   * @return The targetSchema.
   */
  @java.lang.Override
  public datapower.noesis.v1.TargetSchema getTargetSchema() {
    return targetSchema_ == null ? datapower.noesis.v1.TargetSchema.getDefaultInstance() : targetSchema_;
  }
  /**
   * <pre>
   * Schema definition for the final transformed data
   * </pre>
   *
   * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.TargetSchemaOrBuilder getTargetSchemaOrBuilder() {
    return targetSchema_ == null ? datapower.noesis.v1.TargetSchema.getDefaultInstance() : targetSchema_;
  }

  public static final int QUERY_FIELD_NUMBER = 6;
  private datapower.noesis.v1.Query query_;
  /**
   * <pre>
   * The SQL query that transforms sources into the target schema
   * </pre>
   *
   * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
   * @return Whether the query field is set.
   */
  @java.lang.Override
  public boolean hasQuery() {
    return query_ != null;
  }
  /**
   * <pre>
   * The SQL query that transforms sources into the target schema
   * </pre>
   *
   * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
   * @return The query.
   */
  @java.lang.Override
  public datapower.noesis.v1.Query getQuery() {
    return query_ == null ? datapower.noesis.v1.Query.getDefaultInstance() : query_;
  }
  /**
   * <pre>
   * The SQL query that transforms sources into the target schema
   * </pre>
   *
   * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.QueryOrBuilder getQueryOrBuilder() {
    return query_ == null ? datapower.noesis.v1.Query.getDefaultInstance() : query_;
  }

  public static final int METADATA_FIELD_NUMBER = 7;
  private static final class MetadataDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_PipelineDefinition_MetadataEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> metadata_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetMetadata() {
    if (metadata_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          MetadataDefaultEntryHolder.defaultEntry);
    }
    return metadata_;
  }
  public int getMetadataCount() {
    return internalGetMetadata().getMap().size();
  }
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public boolean containsMetadata(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetMetadata().getMap().containsKey(key);
  }
  /**
   * Use {@link #getMetadataMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
    return getMetadataMap();
  }
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
    return internalGetMetadata().getMap();
  }
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public /* nullable */
java.lang.String getMetadataOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetMetadata().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Optional: Pipeline metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public java.lang.String getMetadataOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetMetadata().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pipelineName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, pipelineName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schedule_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, schedule_);
    }
    for (int i = 0; i < sources_.size(); i++) {
      output.writeMessage(3, sources_.get(i));
    }
    for (int i = 0; i < sinks_.size(); i++) {
      output.writeMessage(4, sinks_.get(i));
    }
    if (targetSchema_ != null) {
      output.writeMessage(5, getTargetSchema());
    }
    if (query_ != null) {
      output.writeMessage(6, getQuery());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetMetadata(),
        MetadataDefaultEntryHolder.defaultEntry,
        7);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pipelineName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, pipelineName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schedule_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, schedule_);
    }
    for (int i = 0; i < sources_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, sources_.get(i));
    }
    for (int i = 0; i < sinks_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, sinks_.get(i));
    }
    if (targetSchema_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getTargetSchema());
    }
    if (query_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getQuery());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetMetadata().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, metadata__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.PipelineDefinition)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.PipelineDefinition other = (datapower.noesis.v1.PipelineDefinition) obj;

    if (!getPipelineName()
        .equals(other.getPipelineName())) return false;
    if (!getSchedule()
        .equals(other.getSchedule())) return false;
    if (!getSourcesList()
        .equals(other.getSourcesList())) return false;
    if (!getSinksList()
        .equals(other.getSinksList())) return false;
    if (hasTargetSchema() != other.hasTargetSchema()) return false;
    if (hasTargetSchema()) {
      if (!getTargetSchema()
          .equals(other.getTargetSchema())) return false;
    }
    if (hasQuery() != other.hasQuery()) return false;
    if (hasQuery()) {
      if (!getQuery()
          .equals(other.getQuery())) return false;
    }
    if (!internalGetMetadata().equals(
        other.internalGetMetadata())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PIPELINE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getPipelineName().hashCode();
    hash = (37 * hash) + SCHEDULE_FIELD_NUMBER;
    hash = (53 * hash) + getSchedule().hashCode();
    if (getSourcesCount() > 0) {
      hash = (37 * hash) + SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getSourcesList().hashCode();
    }
    if (getSinksCount() > 0) {
      hash = (37 * hash) + SINKS_FIELD_NUMBER;
      hash = (53 * hash) + getSinksList().hashCode();
    }
    if (hasTargetSchema()) {
      hash = (37 * hash) + TARGET_SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getTargetSchema().hashCode();
    }
    if (hasQuery()) {
      hash = (37 * hash) + QUERY_FIELD_NUMBER;
      hash = (53 * hash) + getQuery().hashCode();
    }
    if (!internalGetMetadata().getMap().isEmpty()) {
      hash = (37 * hash) + METADATA_FIELD_NUMBER;
      hash = (53 * hash) + internalGetMetadata().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.PipelineDefinition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.PipelineDefinition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.PipelineDefinition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.PipelineDefinition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * PipelineDefinition represents the complete declarative pipeline specification
   * This matches the YAML structure that users define
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.PipelineDefinition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.PipelineDefinition)
      datapower.noesis.v1.PipelineDefinitionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_PipelineDefinition_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetMutableMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_PipelineDefinition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.PipelineDefinition.class, datapower.noesis.v1.PipelineDefinition.Builder.class);
    }

    // Construct using datapower.noesis.v1.PipelineDefinition.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      pipelineName_ = "";
      schedule_ = "";
      if (sourcesBuilder_ == null) {
        sources_ = java.util.Collections.emptyList();
      } else {
        sources_ = null;
        sourcesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (sinksBuilder_ == null) {
        sinks_ = java.util.Collections.emptyList();
      } else {
        sinks_ = null;
        sinksBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      targetSchema_ = null;
      if (targetSchemaBuilder_ != null) {
        targetSchemaBuilder_.dispose();
        targetSchemaBuilder_ = null;
      }
      query_ = null;
      if (queryBuilder_ != null) {
        queryBuilder_.dispose();
        queryBuilder_ = null;
      }
      internalGetMutableMetadata().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_PipelineDefinition_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.PipelineDefinition getDefaultInstanceForType() {
      return datapower.noesis.v1.PipelineDefinition.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.PipelineDefinition build() {
      datapower.noesis.v1.PipelineDefinition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.PipelineDefinition buildPartial() {
      datapower.noesis.v1.PipelineDefinition result = new datapower.noesis.v1.PipelineDefinition(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(datapower.noesis.v1.PipelineDefinition result) {
      if (sourcesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          sources_ = java.util.Collections.unmodifiableList(sources_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.sources_ = sources_;
      } else {
        result.sources_ = sourcesBuilder_.build();
      }
      if (sinksBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          sinks_ = java.util.Collections.unmodifiableList(sinks_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.sinks_ = sinks_;
      } else {
        result.sinks_ = sinksBuilder_.build();
      }
    }

    private void buildPartial0(datapower.noesis.v1.PipelineDefinition result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.pipelineName_ = pipelineName_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.schedule_ = schedule_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.targetSchema_ = targetSchemaBuilder_ == null
            ? targetSchema_
            : targetSchemaBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.query_ = queryBuilder_ == null
            ? query_
            : queryBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.PipelineDefinition) {
        return mergeFrom((datapower.noesis.v1.PipelineDefinition)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.PipelineDefinition other) {
      if (other == datapower.noesis.v1.PipelineDefinition.getDefaultInstance()) return this;
      if (!other.getPipelineName().isEmpty()) {
        pipelineName_ = other.pipelineName_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getSchedule().isEmpty()) {
        schedule_ = other.schedule_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (sourcesBuilder_ == null) {
        if (!other.sources_.isEmpty()) {
          if (sources_.isEmpty()) {
            sources_ = other.sources_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSourcesIsMutable();
            sources_.addAll(other.sources_);
          }
          onChanged();
        }
      } else {
        if (!other.sources_.isEmpty()) {
          if (sourcesBuilder_.isEmpty()) {
            sourcesBuilder_.dispose();
            sourcesBuilder_ = null;
            sources_ = other.sources_;
            bitField0_ = (bitField0_ & ~0x00000004);
            sourcesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSourcesFieldBuilder() : null;
          } else {
            sourcesBuilder_.addAllMessages(other.sources_);
          }
        }
      }
      if (sinksBuilder_ == null) {
        if (!other.sinks_.isEmpty()) {
          if (sinks_.isEmpty()) {
            sinks_ = other.sinks_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSinksIsMutable();
            sinks_.addAll(other.sinks_);
          }
          onChanged();
        }
      } else {
        if (!other.sinks_.isEmpty()) {
          if (sinksBuilder_.isEmpty()) {
            sinksBuilder_.dispose();
            sinksBuilder_ = null;
            sinks_ = other.sinks_;
            bitField0_ = (bitField0_ & ~0x00000008);
            sinksBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSinksFieldBuilder() : null;
          } else {
            sinksBuilder_.addAllMessages(other.sinks_);
          }
        }
      }
      if (other.hasTargetSchema()) {
        mergeTargetSchema(other.getTargetSchema());
      }
      if (other.hasQuery()) {
        mergeQuery(other.getQuery());
      }
      internalGetMutableMetadata().mergeFrom(
          other.internalGetMetadata());
      bitField0_ |= 0x00000040;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              pipelineName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              schedule_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              datapower.noesis.v1.Source m =
                  input.readMessage(
                      datapower.noesis.v1.Source.parser(),
                      extensionRegistry);
              if (sourcesBuilder_ == null) {
                ensureSourcesIsMutable();
                sources_.add(m);
              } else {
                sourcesBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              datapower.noesis.v1.Sink m =
                  input.readMessage(
                      datapower.noesis.v1.Sink.parser(),
                      extensionRegistry);
              if (sinksBuilder_ == null) {
                ensureSinksIsMutable();
                sinks_.add(m);
              } else {
                sinksBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getTargetSchemaFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getQueryFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableMetadata().getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object pipelineName_ = "";
    /**
     * <pre>
     * Unique pipeline identifier (must be DNS-safe)
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @return The pipelineName.
     */
    public java.lang.String getPipelineName() {
      java.lang.Object ref = pipelineName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pipelineName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Unique pipeline identifier (must be DNS-safe)
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @return The bytes for pipelineName.
     */
    public com.google.protobuf.ByteString
        getPipelineNameBytes() {
      java.lang.Object ref = pipelineName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pipelineName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Unique pipeline identifier (must be DNS-safe)
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @param value The pipelineName to set.
     * @return This builder for chaining.
     */
    public Builder setPipelineName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      pipelineName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique pipeline identifier (must be DNS-safe)
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPipelineName() {
      pipelineName_ = getDefaultInstance().getPipelineName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique pipeline identifier (must be DNS-safe)
     * </pre>
     *
     * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
     * @param value The bytes for pipelineName to set.
     * @return This builder for chaining.
     */
    public Builder setPipelineNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      pipelineName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object schedule_ = "";
    /**
     * <pre>
     * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
     * </pre>
     *
     * <code>string schedule = 2 [json_name = "schedule"];</code>
     * @return The schedule.
     */
    public java.lang.String getSchedule() {
      java.lang.Object ref = schedule_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        schedule_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
     * </pre>
     *
     * <code>string schedule = 2 [json_name = "schedule"];</code>
     * @return The bytes for schedule.
     */
    public com.google.protobuf.ByteString
        getScheduleBytes() {
      java.lang.Object ref = schedule_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        schedule_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
     * </pre>
     *
     * <code>string schedule = 2 [json_name = "schedule"];</code>
     * @param value The schedule to set.
     * @return This builder for chaining.
     */
    public Builder setSchedule(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      schedule_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
     * </pre>
     *
     * <code>string schedule = 2 [json_name = "schedule"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSchedule() {
      schedule_ = getDefaultInstance().getSchedule();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Cron schedule expression for batch execution (e.g., "0 2 * * *" for daily at 2 AM)
     * </pre>
     *
     * <code>string schedule = 2 [json_name = "schedule"];</code>
     * @param value The bytes for schedule to set.
     * @return This builder for chaining.
     */
    public Builder setScheduleBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      schedule_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.util.List<datapower.noesis.v1.Source> sources_ =
      java.util.Collections.emptyList();
    private void ensureSourcesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        sources_ = new java.util.ArrayList<datapower.noesis.v1.Source>(sources_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.Source, datapower.noesis.v1.Source.Builder, datapower.noesis.v1.SourceOrBuilder> sourcesBuilder_;

    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public java.util.List<datapower.noesis.v1.Source> getSourcesList() {
      if (sourcesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sources_);
      } else {
        return sourcesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public int getSourcesCount() {
      if (sourcesBuilder_ == null) {
        return sources_.size();
      } else {
        return sourcesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public datapower.noesis.v1.Source getSources(int index) {
      if (sourcesBuilder_ == null) {
        return sources_.get(index);
      } else {
        return sourcesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder setSources(
        int index, datapower.noesis.v1.Source value) {
      if (sourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSourcesIsMutable();
        sources_.set(index, value);
        onChanged();
      } else {
        sourcesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder setSources(
        int index, datapower.noesis.v1.Source.Builder builderForValue) {
      if (sourcesBuilder_ == null) {
        ensureSourcesIsMutable();
        sources_.set(index, builderForValue.build());
        onChanged();
      } else {
        sourcesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder addSources(datapower.noesis.v1.Source value) {
      if (sourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSourcesIsMutable();
        sources_.add(value);
        onChanged();
      } else {
        sourcesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder addSources(
        int index, datapower.noesis.v1.Source value) {
      if (sourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSourcesIsMutable();
        sources_.add(index, value);
        onChanged();
      } else {
        sourcesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder addSources(
        datapower.noesis.v1.Source.Builder builderForValue) {
      if (sourcesBuilder_ == null) {
        ensureSourcesIsMutable();
        sources_.add(builderForValue.build());
        onChanged();
      } else {
        sourcesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder addSources(
        int index, datapower.noesis.v1.Source.Builder builderForValue) {
      if (sourcesBuilder_ == null) {
        ensureSourcesIsMutable();
        sources_.add(index, builderForValue.build());
        onChanged();
      } else {
        sourcesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder addAllSources(
        java.lang.Iterable<? extends datapower.noesis.v1.Source> values) {
      if (sourcesBuilder_ == null) {
        ensureSourcesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sources_);
        onChanged();
      } else {
        sourcesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder clearSources() {
      if (sourcesBuilder_ == null) {
        sources_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        sourcesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public Builder removeSources(int index) {
      if (sourcesBuilder_ == null) {
        ensureSourcesIsMutable();
        sources_.remove(index);
        onChanged();
      } else {
        sourcesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public datapower.noesis.v1.Source.Builder getSourcesBuilder(
        int index) {
      return getSourcesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public datapower.noesis.v1.SourceOrBuilder getSourcesOrBuilder(
        int index) {
      if (sourcesBuilder_ == null) {
        return sources_.get(index);  } else {
        return sourcesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.SourceOrBuilder> 
         getSourcesOrBuilderList() {
      if (sourcesBuilder_ != null) {
        return sourcesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sources_);
      }
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public datapower.noesis.v1.Source.Builder addSourcesBuilder() {
      return getSourcesFieldBuilder().addBuilder(
          datapower.noesis.v1.Source.getDefaultInstance());
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public datapower.noesis.v1.Source.Builder addSourcesBuilder(
        int index) {
      return getSourcesFieldBuilder().addBuilder(
          index, datapower.noesis.v1.Source.getDefaultInstance());
    }
    /**
     * <pre>
     * All data sources for this pipeline
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Source sources = 3 [json_name = "sources"];</code>
     */
    public java.util.List<datapower.noesis.v1.Source.Builder> 
         getSourcesBuilderList() {
      return getSourcesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.Source, datapower.noesis.v1.Source.Builder, datapower.noesis.v1.SourceOrBuilder> 
        getSourcesFieldBuilder() {
      if (sourcesBuilder_ == null) {
        sourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.Source, datapower.noesis.v1.Source.Builder, datapower.noesis.v1.SourceOrBuilder>(
                sources_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        sources_ = null;
      }
      return sourcesBuilder_;
    }

    private java.util.List<datapower.noesis.v1.Sink> sinks_ =
      java.util.Collections.emptyList();
    private void ensureSinksIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        sinks_ = new java.util.ArrayList<datapower.noesis.v1.Sink>(sinks_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.Sink, datapower.noesis.v1.Sink.Builder, datapower.noesis.v1.SinkOrBuilder> sinksBuilder_;

    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public java.util.List<datapower.noesis.v1.Sink> getSinksList() {
      if (sinksBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sinks_);
      } else {
        return sinksBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public int getSinksCount() {
      if (sinksBuilder_ == null) {
        return sinks_.size();
      } else {
        return sinksBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public datapower.noesis.v1.Sink getSinks(int index) {
      if (sinksBuilder_ == null) {
        return sinks_.get(index);
      } else {
        return sinksBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder setSinks(
        int index, datapower.noesis.v1.Sink value) {
      if (sinksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSinksIsMutable();
        sinks_.set(index, value);
        onChanged();
      } else {
        sinksBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder setSinks(
        int index, datapower.noesis.v1.Sink.Builder builderForValue) {
      if (sinksBuilder_ == null) {
        ensureSinksIsMutable();
        sinks_.set(index, builderForValue.build());
        onChanged();
      } else {
        sinksBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder addSinks(datapower.noesis.v1.Sink value) {
      if (sinksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSinksIsMutable();
        sinks_.add(value);
        onChanged();
      } else {
        sinksBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder addSinks(
        int index, datapower.noesis.v1.Sink value) {
      if (sinksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSinksIsMutable();
        sinks_.add(index, value);
        onChanged();
      } else {
        sinksBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder addSinks(
        datapower.noesis.v1.Sink.Builder builderForValue) {
      if (sinksBuilder_ == null) {
        ensureSinksIsMutable();
        sinks_.add(builderForValue.build());
        onChanged();
      } else {
        sinksBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder addSinks(
        int index, datapower.noesis.v1.Sink.Builder builderForValue) {
      if (sinksBuilder_ == null) {
        ensureSinksIsMutable();
        sinks_.add(index, builderForValue.build());
        onChanged();
      } else {
        sinksBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder addAllSinks(
        java.lang.Iterable<? extends datapower.noesis.v1.Sink> values) {
      if (sinksBuilder_ == null) {
        ensureSinksIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sinks_);
        onChanged();
      } else {
        sinksBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder clearSinks() {
      if (sinksBuilder_ == null) {
        sinks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        sinksBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public Builder removeSinks(int index) {
      if (sinksBuilder_ == null) {
        ensureSinksIsMutable();
        sinks_.remove(index);
        onChanged();
      } else {
        sinksBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public datapower.noesis.v1.Sink.Builder getSinksBuilder(
        int index) {
      return getSinksFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public datapower.noesis.v1.SinkOrBuilder getSinksOrBuilder(
        int index) {
      if (sinksBuilder_ == null) {
        return sinks_.get(index);  } else {
        return sinksBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.SinkOrBuilder> 
         getSinksOrBuilderList() {
      if (sinksBuilder_ != null) {
        return sinksBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sinks_);
      }
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public datapower.noesis.v1.Sink.Builder addSinksBuilder() {
      return getSinksFieldBuilder().addBuilder(
          datapower.noesis.v1.Sink.getDefaultInstance());
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public datapower.noesis.v1.Sink.Builder addSinksBuilder(
        int index) {
      return getSinksFieldBuilder().addBuilder(
          index, datapower.noesis.v1.Sink.getDefaultInstance());
    }
    /**
     * <pre>
     * Output sinks (typically Kafka topics)
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Sink sinks = 4 [json_name = "sinks"];</code>
     */
    public java.util.List<datapower.noesis.v1.Sink.Builder> 
         getSinksBuilderList() {
      return getSinksFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.Sink, datapower.noesis.v1.Sink.Builder, datapower.noesis.v1.SinkOrBuilder> 
        getSinksFieldBuilder() {
      if (sinksBuilder_ == null) {
        sinksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.Sink, datapower.noesis.v1.Sink.Builder, datapower.noesis.v1.SinkOrBuilder>(
                sinks_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        sinks_ = null;
      }
      return sinksBuilder_;
    }

    private datapower.noesis.v1.TargetSchema targetSchema_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.TargetSchema, datapower.noesis.v1.TargetSchema.Builder, datapower.noesis.v1.TargetSchemaOrBuilder> targetSchemaBuilder_;
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     * @return Whether the targetSchema field is set.
     */
    public boolean hasTargetSchema() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     * @return The targetSchema.
     */
    public datapower.noesis.v1.TargetSchema getTargetSchema() {
      if (targetSchemaBuilder_ == null) {
        return targetSchema_ == null ? datapower.noesis.v1.TargetSchema.getDefaultInstance() : targetSchema_;
      } else {
        return targetSchemaBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    public Builder setTargetSchema(datapower.noesis.v1.TargetSchema value) {
      if (targetSchemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        targetSchema_ = value;
      } else {
        targetSchemaBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    public Builder setTargetSchema(
        datapower.noesis.v1.TargetSchema.Builder builderForValue) {
      if (targetSchemaBuilder_ == null) {
        targetSchema_ = builderForValue.build();
      } else {
        targetSchemaBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    public Builder mergeTargetSchema(datapower.noesis.v1.TargetSchema value) {
      if (targetSchemaBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          targetSchema_ != null &&
          targetSchema_ != datapower.noesis.v1.TargetSchema.getDefaultInstance()) {
          getTargetSchemaBuilder().mergeFrom(value);
        } else {
          targetSchema_ = value;
        }
      } else {
        targetSchemaBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    public Builder clearTargetSchema() {
      bitField0_ = (bitField0_ & ~0x00000010);
      targetSchema_ = null;
      if (targetSchemaBuilder_ != null) {
        targetSchemaBuilder_.dispose();
        targetSchemaBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    public datapower.noesis.v1.TargetSchema.Builder getTargetSchemaBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getTargetSchemaFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    public datapower.noesis.v1.TargetSchemaOrBuilder getTargetSchemaOrBuilder() {
      if (targetSchemaBuilder_ != null) {
        return targetSchemaBuilder_.getMessageOrBuilder();
      } else {
        return targetSchema_ == null ?
            datapower.noesis.v1.TargetSchema.getDefaultInstance() : targetSchema_;
      }
    }
    /**
     * <pre>
     * Schema definition for the final transformed data
     * </pre>
     *
     * <code>.datapower.noesis.v1.TargetSchema target_schema = 5 [json_name = "targetSchema"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.TargetSchema, datapower.noesis.v1.TargetSchema.Builder, datapower.noesis.v1.TargetSchemaOrBuilder> 
        getTargetSchemaFieldBuilder() {
      if (targetSchemaBuilder_ == null) {
        targetSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.TargetSchema, datapower.noesis.v1.TargetSchema.Builder, datapower.noesis.v1.TargetSchemaOrBuilder>(
                getTargetSchema(),
                getParentForChildren(),
                isClean());
        targetSchema_ = null;
      }
      return targetSchemaBuilder_;
    }

    private datapower.noesis.v1.Query query_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.Query, datapower.noesis.v1.Query.Builder, datapower.noesis.v1.QueryOrBuilder> queryBuilder_;
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     * @return Whether the query field is set.
     */
    public boolean hasQuery() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     * @return The query.
     */
    public datapower.noesis.v1.Query getQuery() {
      if (queryBuilder_ == null) {
        return query_ == null ? datapower.noesis.v1.Query.getDefaultInstance() : query_;
      } else {
        return queryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    public Builder setQuery(datapower.noesis.v1.Query value) {
      if (queryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        query_ = value;
      } else {
        queryBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    public Builder setQuery(
        datapower.noesis.v1.Query.Builder builderForValue) {
      if (queryBuilder_ == null) {
        query_ = builderForValue.build();
      } else {
        queryBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    public Builder mergeQuery(datapower.noesis.v1.Query value) {
      if (queryBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          query_ != null &&
          query_ != datapower.noesis.v1.Query.getDefaultInstance()) {
          getQueryBuilder().mergeFrom(value);
        } else {
          query_ = value;
        }
      } else {
        queryBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    public Builder clearQuery() {
      bitField0_ = (bitField0_ & ~0x00000020);
      query_ = null;
      if (queryBuilder_ != null) {
        queryBuilder_.dispose();
        queryBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    public datapower.noesis.v1.Query.Builder getQueryBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getQueryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    public datapower.noesis.v1.QueryOrBuilder getQueryOrBuilder() {
      if (queryBuilder_ != null) {
        return queryBuilder_.getMessageOrBuilder();
      } else {
        return query_ == null ?
            datapower.noesis.v1.Query.getDefaultInstance() : query_;
      }
    }
    /**
     * <pre>
     * The SQL query that transforms sources into the target schema
     * </pre>
     *
     * <code>.datapower.noesis.v1.Query query = 6 [json_name = "query"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.Query, datapower.noesis.v1.Query.Builder, datapower.noesis.v1.QueryOrBuilder> 
        getQueryFieldBuilder() {
      if (queryBuilder_ == null) {
        queryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.Query, datapower.noesis.v1.Query.Builder, datapower.noesis.v1.QueryOrBuilder>(
                getQuery(),
                getParentForChildren(),
                isClean());
        query_ = null;
      }
      return queryBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableMetadata() {
      if (metadata_ == null) {
        metadata_ = com.google.protobuf.MapField.newMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      if (!metadata_.isMutable()) {
        metadata_ = metadata_.copy();
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return metadata_;
    }
    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    @java.lang.Override
    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getMetadataOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    @java.lang.Override
    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearMetadata() {
      bitField0_ = (bitField0_ & ~0x00000040);
      internalGetMutableMetadata().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    public Builder removeMetadata(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableMetadata().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
        getMutableMetadata() {
      bitField0_ |= 0x00000040;
      return internalGetMutableMetadata().getMutableMap();
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    public Builder putMetadata(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableMetadata().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000040;
      return this;
    }
    /**
     * <pre>
     * Optional: Pipeline metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7 [json_name = "metadata"];</code>
     */
    public Builder putAllMetadata(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableMetadata().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000040;
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.PipelineDefinition)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.PipelineDefinition)
  private static final datapower.noesis.v1.PipelineDefinition DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.PipelineDefinition();
  }

  public static datapower.noesis.v1.PipelineDefinition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PipelineDefinition>
      PARSER = new com.google.protobuf.AbstractParser<PipelineDefinition>() {
    @java.lang.Override
    public PipelineDefinition parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<PipelineDefinition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PipelineDefinition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.PipelineDefinition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

