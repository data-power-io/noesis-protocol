// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface ReadMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.ReadMessage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (Optional) schema broadcast/update
   * </pre>
   *
   * <code>.datapower.noesis.v1.SchemaMsg schema = 1 [json_name = "schema"];</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <pre>
   * (Optional) schema broadcast/update
   * </pre>
   *
   * <code>.datapower.noesis.v1.SchemaMsg schema = 1 [json_name = "schema"];</code>
   * @return The schema.
   */
  datapower.noesis.v1.SchemaMsg getSchema();
  /**
   * <pre>
   * (Optional) schema broadcast/update
   * </pre>
   *
   * <code>.datapower.noesis.v1.SchemaMsg schema = 1 [json_name = "schema"];</code>
   */
  datapower.noesis.v1.SchemaMsgOrBuilder getSchemaOrBuilder();

  /**
   * <pre>
   * Data (NODE or LINK), including deletes
   * </pre>
   *
   * <code>.datapower.noesis.v1.RecordMsg record = 2 [json_name = "record"];</code>
   * @return Whether the record field is set.
   */
  boolean hasRecord();
  /**
   * <pre>
   * Data (NODE or LINK), including deletes
   * </pre>
   *
   * <code>.datapower.noesis.v1.RecordMsg record = 2 [json_name = "record"];</code>
   * @return The record.
   */
  datapower.noesis.v1.RecordMsg getRecord();
  /**
   * <pre>
   * Data (NODE or LINK), including deletes
   * </pre>
   *
   * <code>.datapower.noesis.v1.RecordMsg record = 2 [json_name = "record"];</code>
   */
  datapower.noesis.v1.RecordMsgOrBuilder getRecordOrBuilder();

  /**
   * <pre>
   * Checkpoint (cursor/watermark/group frontier)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StateMsg state = 3 [json_name = "state"];</code>
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   * <pre>
   * Checkpoint (cursor/watermark/group frontier)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StateMsg state = 3 [json_name = "state"];</code>
   * @return The state.
   */
  datapower.noesis.v1.StateMsg getState();
  /**
   * <pre>
   * Checkpoint (cursor/watermark/group frontier)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StateMsg state = 3 [json_name = "state"];</code>
   */
  datapower.noesis.v1.StateMsgOrBuilder getStateOrBuilder();

  /**
   * <pre>
   * Structured logs
   * </pre>
   *
   * <code>.datapower.noesis.v1.LogMsg log = 4 [json_name = "log"];</code>
   * @return Whether the log field is set.
   */
  boolean hasLog();
  /**
   * <pre>
   * Structured logs
   * </pre>
   *
   * <code>.datapower.noesis.v1.LogMsg log = 4 [json_name = "log"];</code>
   * @return The log.
   */
  datapower.noesis.v1.LogMsg getLog();
  /**
   * <pre>
   * Structured logs
   * </pre>
   *
   * <code>.datapower.noesis.v1.LogMsg log = 4 [json_name = "log"];</code>
   */
  datapower.noesis.v1.LogMsgOrBuilder getLogOrBuilder();

  /**
   * <pre>
   * Simple metrics
   * </pre>
   *
   * <code>.datapower.noesis.v1.MetricMsg metric = 5 [json_name = "metric"];</code>
   * @return Whether the metric field is set.
   */
  boolean hasMetric();
  /**
   * <pre>
   * Simple metrics
   * </pre>
   *
   * <code>.datapower.noesis.v1.MetricMsg metric = 5 [json_name = "metric"];</code>
   * @return The metric.
   */
  datapower.noesis.v1.MetricMsg getMetric();
  /**
   * <pre>
   * Simple metrics
   * </pre>
   *
   * <code>.datapower.noesis.v1.MetricMsg metric = 5 [json_name = "metric"];</code>
   */
  datapower.noesis.v1.MetricMsgOrBuilder getMetricOrBuilder();

  datapower.noesis.v1.ReadMessage.MsgCase getMsgCase();
}
