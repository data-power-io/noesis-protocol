// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

/**
 * <pre>
 * CheckpointConfig defines checkpointing behavior
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.CheckpointConfig}
 */
public final class CheckpointConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.CheckpointConfig)
    CheckpointConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CheckpointConfig.newBuilder() to construct.
  private CheckpointConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CheckpointConfig() {
    mode_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CheckpointConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_CheckpointConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_CheckpointConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.CheckpointConfig.class, datapower.noesis.v1.CheckpointConfig.Builder.class);
  }

  public static final int INTERVAL_MS_FIELD_NUMBER = 1;
  private long intervalMs_ = 0L;
  /**
   * <pre>
   * Checkpoint interval in milliseconds
   * </pre>
   *
   * <code>int64 interval_ms = 1 [json_name = "intervalMs"];</code>
   * @return The intervalMs.
   */
  @java.lang.Override
  public long getIntervalMs() {
    return intervalMs_;
  }

  public static final int MODE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object mode_ = "";
  /**
   * <pre>
   * Checkpoint mode (exactly_once, at_least_once)
   * </pre>
   *
   * <code>string mode = 2 [json_name = "mode"];</code>
   * @return The mode.
   */
  @java.lang.Override
  public java.lang.String getMode() {
    java.lang.Object ref = mode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      mode_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Checkpoint mode (exactly_once, at_least_once)
   * </pre>
   *
   * <code>string mode = 2 [json_name = "mode"];</code>
   * @return The bytes for mode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getModeBytes() {
    java.lang.Object ref = mode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      mode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TIMEOUT_MS_FIELD_NUMBER = 3;
  private long timeoutMs_ = 0L;
  /**
   * <pre>
   * Checkpoint timeout in milliseconds
   * </pre>
   *
   * <code>int64 timeout_ms = 3 [json_name = "timeoutMs"];</code>
   * @return The timeoutMs.
   */
  @java.lang.Override
  public long getTimeoutMs() {
    return timeoutMs_;
  }

  public static final int MIN_PAUSE_MS_FIELD_NUMBER = 4;
  private long minPauseMs_ = 0L;
  /**
   * <pre>
   * Min pause between checkpoints in milliseconds
   * </pre>
   *
   * <code>int64 min_pause_ms = 4 [json_name = "minPauseMs"];</code>
   * @return The minPauseMs.
   */
  @java.lang.Override
  public long getMinPauseMs() {
    return minPauseMs_;
  }

  public static final int MAX_CONCURRENT_FIELD_NUMBER = 5;
  private int maxConcurrent_ = 0;
  /**
   * <pre>
   * Max concurrent checkpoints
   * </pre>
   *
   * <code>int32 max_concurrent = 5 [json_name = "maxConcurrent"];</code>
   * @return The maxConcurrent.
   */
  @java.lang.Override
  public int getMaxConcurrent() {
    return maxConcurrent_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (intervalMs_ != 0L) {
      output.writeInt64(1, intervalMs_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mode_);
    }
    if (timeoutMs_ != 0L) {
      output.writeInt64(3, timeoutMs_);
    }
    if (minPauseMs_ != 0L) {
      output.writeInt64(4, minPauseMs_);
    }
    if (maxConcurrent_ != 0) {
      output.writeInt32(5, maxConcurrent_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (intervalMs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, intervalMs_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mode_);
    }
    if (timeoutMs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, timeoutMs_);
    }
    if (minPauseMs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, minPauseMs_);
    }
    if (maxConcurrent_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, maxConcurrent_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.CheckpointConfig)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.CheckpointConfig other = (datapower.noesis.v1.CheckpointConfig) obj;

    if (getIntervalMs()
        != other.getIntervalMs()) return false;
    if (!getMode()
        .equals(other.getMode())) return false;
    if (getTimeoutMs()
        != other.getTimeoutMs()) return false;
    if (getMinPauseMs()
        != other.getMinPauseMs()) return false;
    if (getMaxConcurrent()
        != other.getMaxConcurrent()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INTERVAL_MS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getIntervalMs());
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + getMode().hashCode();
    hash = (37 * hash) + TIMEOUT_MS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimeoutMs());
    hash = (37 * hash) + MIN_PAUSE_MS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinPauseMs());
    hash = (37 * hash) + MAX_CONCURRENT_FIELD_NUMBER;
    hash = (53 * hash) + getMaxConcurrent();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.CheckpointConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.CheckpointConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.CheckpointConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.CheckpointConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CheckpointConfig defines checkpointing behavior
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.CheckpointConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.CheckpointConfig)
      datapower.noesis.v1.CheckpointConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_CheckpointConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_CheckpointConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.CheckpointConfig.class, datapower.noesis.v1.CheckpointConfig.Builder.class);
    }

    // Construct using datapower.noesis.v1.CheckpointConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      intervalMs_ = 0L;
      mode_ = "";
      timeoutMs_ = 0L;
      minPauseMs_ = 0L;
      maxConcurrent_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.Execution.internal_static_datapower_noesis_v1_CheckpointConfig_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.CheckpointConfig getDefaultInstanceForType() {
      return datapower.noesis.v1.CheckpointConfig.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.CheckpointConfig build() {
      datapower.noesis.v1.CheckpointConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.CheckpointConfig buildPartial() {
      datapower.noesis.v1.CheckpointConfig result = new datapower.noesis.v1.CheckpointConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(datapower.noesis.v1.CheckpointConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.intervalMs_ = intervalMs_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.mode_ = mode_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.timeoutMs_ = timeoutMs_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.minPauseMs_ = minPauseMs_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.maxConcurrent_ = maxConcurrent_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.CheckpointConfig) {
        return mergeFrom((datapower.noesis.v1.CheckpointConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.CheckpointConfig other) {
      if (other == datapower.noesis.v1.CheckpointConfig.getDefaultInstance()) return this;
      if (other.getIntervalMs() != 0L) {
        setIntervalMs(other.getIntervalMs());
      }
      if (!other.getMode().isEmpty()) {
        mode_ = other.mode_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.getTimeoutMs() != 0L) {
        setTimeoutMs(other.getTimeoutMs());
      }
      if (other.getMinPauseMs() != 0L) {
        setMinPauseMs(other.getMinPauseMs());
      }
      if (other.getMaxConcurrent() != 0) {
        setMaxConcurrent(other.getMaxConcurrent());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              intervalMs_ = input.readInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              mode_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              timeoutMs_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              minPauseMs_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              maxConcurrent_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long intervalMs_ ;
    /**
     * <pre>
     * Checkpoint interval in milliseconds
     * </pre>
     *
     * <code>int64 interval_ms = 1 [json_name = "intervalMs"];</code>
     * @return The intervalMs.
     */
    @java.lang.Override
    public long getIntervalMs() {
      return intervalMs_;
    }
    /**
     * <pre>
     * Checkpoint interval in milliseconds
     * </pre>
     *
     * <code>int64 interval_ms = 1 [json_name = "intervalMs"];</code>
     * @param value The intervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setIntervalMs(long value) {

      intervalMs_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Checkpoint interval in milliseconds
     * </pre>
     *
     * <code>int64 interval_ms = 1 [json_name = "intervalMs"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIntervalMs() {
      bitField0_ = (bitField0_ & ~0x00000001);
      intervalMs_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object mode_ = "";
    /**
     * <pre>
     * Checkpoint mode (exactly_once, at_least_once)
     * </pre>
     *
     * <code>string mode = 2 [json_name = "mode"];</code>
     * @return The mode.
     */
    public java.lang.String getMode() {
      java.lang.Object ref = mode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Checkpoint mode (exactly_once, at_least_once)
     * </pre>
     *
     * <code>string mode = 2 [json_name = "mode"];</code>
     * @return The bytes for mode.
     */
    public com.google.protobuf.ByteString
        getModeBytes() {
      java.lang.Object ref = mode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Checkpoint mode (exactly_once, at_least_once)
     * </pre>
     *
     * <code>string mode = 2 [json_name = "mode"];</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      mode_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Checkpoint mode (exactly_once, at_least_once)
     * </pre>
     *
     * <code>string mode = 2 [json_name = "mode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      mode_ = getDefaultInstance().getMode();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Checkpoint mode (exactly_once, at_least_once)
     * </pre>
     *
     * <code>string mode = 2 [json_name = "mode"];</code>
     * @param value The bytes for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      mode_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private long timeoutMs_ ;
    /**
     * <pre>
     * Checkpoint timeout in milliseconds
     * </pre>
     *
     * <code>int64 timeout_ms = 3 [json_name = "timeoutMs"];</code>
     * @return The timeoutMs.
     */
    @java.lang.Override
    public long getTimeoutMs() {
      return timeoutMs_;
    }
    /**
     * <pre>
     * Checkpoint timeout in milliseconds
     * </pre>
     *
     * <code>int64 timeout_ms = 3 [json_name = "timeoutMs"];</code>
     * @param value The timeoutMs to set.
     * @return This builder for chaining.
     */
    public Builder setTimeoutMs(long value) {

      timeoutMs_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Checkpoint timeout in milliseconds
     * </pre>
     *
     * <code>int64 timeout_ms = 3 [json_name = "timeoutMs"];</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeoutMs() {
      bitField0_ = (bitField0_ & ~0x00000004);
      timeoutMs_ = 0L;
      onChanged();
      return this;
    }

    private long minPauseMs_ ;
    /**
     * <pre>
     * Min pause between checkpoints in milliseconds
     * </pre>
     *
     * <code>int64 min_pause_ms = 4 [json_name = "minPauseMs"];</code>
     * @return The minPauseMs.
     */
    @java.lang.Override
    public long getMinPauseMs() {
      return minPauseMs_;
    }
    /**
     * <pre>
     * Min pause between checkpoints in milliseconds
     * </pre>
     *
     * <code>int64 min_pause_ms = 4 [json_name = "minPauseMs"];</code>
     * @param value The minPauseMs to set.
     * @return This builder for chaining.
     */
    public Builder setMinPauseMs(long value) {

      minPauseMs_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Min pause between checkpoints in milliseconds
     * </pre>
     *
     * <code>int64 min_pause_ms = 4 [json_name = "minPauseMs"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinPauseMs() {
      bitField0_ = (bitField0_ & ~0x00000008);
      minPauseMs_ = 0L;
      onChanged();
      return this;
    }

    private int maxConcurrent_ ;
    /**
     * <pre>
     * Max concurrent checkpoints
     * </pre>
     *
     * <code>int32 max_concurrent = 5 [json_name = "maxConcurrent"];</code>
     * @return The maxConcurrent.
     */
    @java.lang.Override
    public int getMaxConcurrent() {
      return maxConcurrent_;
    }
    /**
     * <pre>
     * Max concurrent checkpoints
     * </pre>
     *
     * <code>int32 max_concurrent = 5 [json_name = "maxConcurrent"];</code>
     * @param value The maxConcurrent to set.
     * @return This builder for chaining.
     */
    public Builder setMaxConcurrent(int value) {

      maxConcurrent_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Max concurrent checkpoints
     * </pre>
     *
     * <code>int32 max_concurrent = 5 [json_name = "maxConcurrent"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxConcurrent() {
      bitField0_ = (bitField0_ & ~0x00000010);
      maxConcurrent_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.CheckpointConfig)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.CheckpointConfig)
  private static final datapower.noesis.v1.CheckpointConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.CheckpointConfig();
  }

  public static datapower.noesis.v1.CheckpointConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckpointConfig>
      PARSER = new com.google.protobuf.AbstractParser<CheckpointConfig>() {
    @java.lang.Override
    public CheckpointConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CheckpointConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckpointConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.CheckpointConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

