// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

/**
 * <pre>
 * Keep Filter simple and vendor-neutral. Use one of:
 * - expression: connector-level expression language or SQL-ish string
 * - predicates: a simple list of (field, op, value) triplets (optional to implement)
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.Filter}
 */
public final class Filter extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.Filter)
    FilterOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Filter.newBuilder() to construct.
  private Filter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Filter() {
    expression_ = "";
    predicates_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Filter();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Filter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Filter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.Filter.class, datapower.noesis.v1.Filter.Builder.class);
  }

  public static final int EXPRESSION_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object expression_ = "";
  /**
   * <pre>
   * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
   * </pre>
   *
   * <code>string expression = 1 [json_name = "expression"];</code>
   * @return The expression.
   */
  @java.lang.Override
  public java.lang.String getExpression() {
    java.lang.Object ref = expression_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      expression_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
   * </pre>
   *
   * <code>string expression = 1 [json_name = "expression"];</code>
   * @return The bytes for expression.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getExpressionBytes() {
    java.lang.Object ref = expression_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      expression_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PREDICATES_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.Predicate> predicates_;
  /**
   * <pre>
   * Optional alternative for structured filters
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.Predicate> getPredicatesList() {
    return predicates_;
  }
  /**
   * <pre>
   * Optional alternative for structured filters
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.PredicateOrBuilder> 
      getPredicatesOrBuilderList() {
    return predicates_;
  }
  /**
   * <pre>
   * Optional alternative for structured filters
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
   */
  @java.lang.Override
  public int getPredicatesCount() {
    return predicates_.size();
  }
  /**
   * <pre>
   * Optional alternative for structured filters
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.Predicate getPredicates(int index) {
    return predicates_.get(index);
  }
  /**
   * <pre>
   * Optional alternative for structured filters
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.PredicateOrBuilder getPredicatesOrBuilder(
      int index) {
    return predicates_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(expression_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, expression_);
    }
    for (int i = 0; i < predicates_.size(); i++) {
      output.writeMessage(2, predicates_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(expression_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, expression_);
    }
    for (int i = 0; i < predicates_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, predicates_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.Filter)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.Filter other = (datapower.noesis.v1.Filter) obj;

    if (!getExpression()
        .equals(other.getExpression())) return false;
    if (!getPredicatesList()
        .equals(other.getPredicatesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
    hash = (53 * hash) + getExpression().hashCode();
    if (getPredicatesCount() > 0) {
      hash = (37 * hash) + PREDICATES_FIELD_NUMBER;
      hash = (53 * hash) + getPredicatesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.Filter parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Filter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Filter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.Filter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.Filter parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.Filter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.Filter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Keep Filter simple and vendor-neutral. Use one of:
   * - expression: connector-level expression language or SQL-ish string
   * - predicates: a simple list of (field, op, value) triplets (optional to implement)
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.Filter}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.Filter)
      datapower.noesis.v1.FilterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Filter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Filter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.Filter.class, datapower.noesis.v1.Filter.Builder.class);
    }

    // Construct using datapower.noesis.v1.Filter.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      expression_ = "";
      if (predicatesBuilder_ == null) {
        predicates_ = java.util.Collections.emptyList();
      } else {
        predicates_ = null;
        predicatesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Filter_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.Filter getDefaultInstanceForType() {
      return datapower.noesis.v1.Filter.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.Filter build() {
      datapower.noesis.v1.Filter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.Filter buildPartial() {
      datapower.noesis.v1.Filter result = new datapower.noesis.v1.Filter(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(datapower.noesis.v1.Filter result) {
      if (predicatesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          predicates_ = java.util.Collections.unmodifiableList(predicates_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.predicates_ = predicates_;
      } else {
        result.predicates_ = predicatesBuilder_.build();
      }
    }

    private void buildPartial0(datapower.noesis.v1.Filter result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.expression_ = expression_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.Filter) {
        return mergeFrom((datapower.noesis.v1.Filter)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.Filter other) {
      if (other == datapower.noesis.v1.Filter.getDefaultInstance()) return this;
      if (!other.getExpression().isEmpty()) {
        expression_ = other.expression_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (predicatesBuilder_ == null) {
        if (!other.predicates_.isEmpty()) {
          if (predicates_.isEmpty()) {
            predicates_ = other.predicates_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePredicatesIsMutable();
            predicates_.addAll(other.predicates_);
          }
          onChanged();
        }
      } else {
        if (!other.predicates_.isEmpty()) {
          if (predicatesBuilder_.isEmpty()) {
            predicatesBuilder_.dispose();
            predicatesBuilder_ = null;
            predicates_ = other.predicates_;
            bitField0_ = (bitField0_ & ~0x00000002);
            predicatesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPredicatesFieldBuilder() : null;
          } else {
            predicatesBuilder_.addAllMessages(other.predicates_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              expression_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              datapower.noesis.v1.Predicate m =
                  input.readMessage(
                      datapower.noesis.v1.Predicate.parser(),
                      extensionRegistry);
              if (predicatesBuilder_ == null) {
                ensurePredicatesIsMutable();
                predicates_.add(m);
              } else {
                predicatesBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object expression_ = "";
    /**
     * <pre>
     * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
     * </pre>
     *
     * <code>string expression = 1 [json_name = "expression"];</code>
     * @return The expression.
     */
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
     * </pre>
     *
     * <code>string expression = 1 [json_name = "expression"];</code>
     * @return The bytes for expression.
     */
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
     * </pre>
     *
     * <code>string expression = 1 [json_name = "expression"];</code>
     * @param value The expression to set.
     * @return This builder for chaining.
     */
    public Builder setExpression(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      expression_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
     * </pre>
     *
     * <code>string expression = 1 [json_name = "expression"];</code>
     * @return This builder for chaining.
     */
    public Builder clearExpression() {
      expression_ = getDefaultInstance().getExpression();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * e.g., "updated_at &gt;= '2024-01-01T00:00:00Z' AND status IN ('A','B')"
     * </pre>
     *
     * <code>string expression = 1 [json_name = "expression"];</code>
     * @param value The bytes for expression to set.
     * @return This builder for chaining.
     */
    public Builder setExpressionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      expression_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<datapower.noesis.v1.Predicate> predicates_ =
      java.util.Collections.emptyList();
    private void ensurePredicatesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        predicates_ = new java.util.ArrayList<datapower.noesis.v1.Predicate>(predicates_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.Predicate, datapower.noesis.v1.Predicate.Builder, datapower.noesis.v1.PredicateOrBuilder> predicatesBuilder_;

    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public java.util.List<datapower.noesis.v1.Predicate> getPredicatesList() {
      if (predicatesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(predicates_);
      } else {
        return predicatesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public int getPredicatesCount() {
      if (predicatesBuilder_ == null) {
        return predicates_.size();
      } else {
        return predicatesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public datapower.noesis.v1.Predicate getPredicates(int index) {
      if (predicatesBuilder_ == null) {
        return predicates_.get(index);
      } else {
        return predicatesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder setPredicates(
        int index, datapower.noesis.v1.Predicate value) {
      if (predicatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePredicatesIsMutable();
        predicates_.set(index, value);
        onChanged();
      } else {
        predicatesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder setPredicates(
        int index, datapower.noesis.v1.Predicate.Builder builderForValue) {
      if (predicatesBuilder_ == null) {
        ensurePredicatesIsMutable();
        predicates_.set(index, builderForValue.build());
        onChanged();
      } else {
        predicatesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder addPredicates(datapower.noesis.v1.Predicate value) {
      if (predicatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePredicatesIsMutable();
        predicates_.add(value);
        onChanged();
      } else {
        predicatesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder addPredicates(
        int index, datapower.noesis.v1.Predicate value) {
      if (predicatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePredicatesIsMutable();
        predicates_.add(index, value);
        onChanged();
      } else {
        predicatesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder addPredicates(
        datapower.noesis.v1.Predicate.Builder builderForValue) {
      if (predicatesBuilder_ == null) {
        ensurePredicatesIsMutable();
        predicates_.add(builderForValue.build());
        onChanged();
      } else {
        predicatesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder addPredicates(
        int index, datapower.noesis.v1.Predicate.Builder builderForValue) {
      if (predicatesBuilder_ == null) {
        ensurePredicatesIsMutable();
        predicates_.add(index, builderForValue.build());
        onChanged();
      } else {
        predicatesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder addAllPredicates(
        java.lang.Iterable<? extends datapower.noesis.v1.Predicate> values) {
      if (predicatesBuilder_ == null) {
        ensurePredicatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, predicates_);
        onChanged();
      } else {
        predicatesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder clearPredicates() {
      if (predicatesBuilder_ == null) {
        predicates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        predicatesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public Builder removePredicates(int index) {
      if (predicatesBuilder_ == null) {
        ensurePredicatesIsMutable();
        predicates_.remove(index);
        onChanged();
      } else {
        predicatesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public datapower.noesis.v1.Predicate.Builder getPredicatesBuilder(
        int index) {
      return getPredicatesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public datapower.noesis.v1.PredicateOrBuilder getPredicatesOrBuilder(
        int index) {
      if (predicatesBuilder_ == null) {
        return predicates_.get(index);  } else {
        return predicatesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.PredicateOrBuilder> 
         getPredicatesOrBuilderList() {
      if (predicatesBuilder_ != null) {
        return predicatesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(predicates_);
      }
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public datapower.noesis.v1.Predicate.Builder addPredicatesBuilder() {
      return getPredicatesFieldBuilder().addBuilder(
          datapower.noesis.v1.Predicate.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public datapower.noesis.v1.Predicate.Builder addPredicatesBuilder(
        int index) {
      return getPredicatesFieldBuilder().addBuilder(
          index, datapower.noesis.v1.Predicate.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional alternative for structured filters
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.Predicate predicates = 2 [json_name = "predicates"];</code>
     */
    public java.util.List<datapower.noesis.v1.Predicate.Builder> 
         getPredicatesBuilderList() {
      return getPredicatesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.Predicate, datapower.noesis.v1.Predicate.Builder, datapower.noesis.v1.PredicateOrBuilder> 
        getPredicatesFieldBuilder() {
      if (predicatesBuilder_ == null) {
        predicatesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.Predicate, datapower.noesis.v1.Predicate.Builder, datapower.noesis.v1.PredicateOrBuilder>(
                predicates_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        predicates_ = null;
      }
      return predicatesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.Filter)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.Filter)
  private static final datapower.noesis.v1.Filter DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.Filter();
  }

  public static datapower.noesis.v1.Filter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Filter>
      PARSER = new com.google.protobuf.AbstractParser<Filter>() {
    @java.lang.Override
    public Filter parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Filter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Filter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.Filter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

