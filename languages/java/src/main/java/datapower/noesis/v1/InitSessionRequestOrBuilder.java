// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/sidecar.proto

package datapower.noesis.v1;

public interface InitSessionRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.InitSessionRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique session identifier
   * </pre>
   *
   * <code>string session_id = 1 [json_name = "sessionId"];</code>
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   * <pre>
   * Unique session identifier
   * </pre>
   *
   * <code>string session_id = 1 [json_name = "sessionId"];</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * Entity being extracted (e.g., "customers")
   * </pre>
   *
   * <code>string entity = 2 [json_name = "entity"];</code>
   * @return The entity.
   */
  java.lang.String getEntity();
  /**
   * <pre>
   * Entity being extracted (e.g., "customers")
   * </pre>
   *
   * <code>string entity = 2 [json_name = "entity"];</code>
   * @return The bytes for entity.
   */
  com.google.protobuf.ByteString
      getEntityBytes();

  /**
   * <pre>
   * Schema for the data
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructuredSchemaDescriptor schema = 3 [json_name = "schema"];</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <pre>
   * Schema for the data
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructuredSchemaDescriptor schema = 3 [json_name = "schema"];</code>
   * @return The schema.
   */
  datapower.noesis.v1.StructuredSchemaDescriptor getSchema();
  /**
   * <pre>
   * Schema for the data
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructuredSchemaDescriptor schema = 3 [json_name = "schema"];</code>
   */
  datapower.noesis.v1.StructuredSchemaDescriptorOrBuilder getSchemaOrBuilder();

  /**
   * <pre>
   * Where to upload files (S3, GCS, etc.)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StorageConfig storage = 4 [json_name = "storage"];</code>
   * @return Whether the storage field is set.
   */
  boolean hasStorage();
  /**
   * <pre>
   * Where to upload files (S3, GCS, etc.)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StorageConfig storage = 4 [json_name = "storage"];</code>
   * @return The storage.
   */
  datapower.noesis.v1.StorageConfig getStorage();
  /**
   * <pre>
   * Where to upload files (S3, GCS, etc.)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StorageConfig storage = 4 [json_name = "storage"];</code>
   */
  datapower.noesis.v1.StorageConfigOrBuilder getStorageOrBuilder();

  /**
   * <pre>
   * Parquet file settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.ParquetConfig parquet_config = 5 [json_name = "parquetConfig"];</code>
   * @return Whether the parquetConfig field is set.
   */
  boolean hasParquetConfig();
  /**
   * <pre>
   * Parquet file settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.ParquetConfig parquet_config = 5 [json_name = "parquetConfig"];</code>
   * @return The parquetConfig.
   */
  datapower.noesis.v1.ParquetConfig getParquetConfig();
  /**
   * <pre>
   * Parquet file settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.ParquetConfig parquet_config = 5 [json_name = "parquetConfig"];</code>
   */
  datapower.noesis.v1.ParquetConfigOrBuilder getParquetConfigOrBuilder();

  /**
   * <pre>
   * Iceberg table settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.IcebergConfig iceberg_config = 7 [json_name = "icebergConfig"];</code>
   * @return Whether the icebergConfig field is set.
   */
  boolean hasIcebergConfig();
  /**
   * <pre>
   * Iceberg table settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.IcebergConfig iceberg_config = 7 [json_name = "icebergConfig"];</code>
   * @return The icebergConfig.
   */
  datapower.noesis.v1.IcebergConfig getIcebergConfig();
  /**
   * <pre>
   * Iceberg table settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.IcebergConfig iceberg_config = 7 [json_name = "icebergConfig"];</code>
   */
  datapower.noesis.v1.IcebergConfigOrBuilder getIcebergConfigOrBuilder();

  /**
   * <pre>
   * Delta Lake table settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.DeltaConfig delta_config = 8 [json_name = "deltaConfig"];</code>
   * @return Whether the deltaConfig field is set.
   */
  boolean hasDeltaConfig();
  /**
   * <pre>
   * Delta Lake table settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.DeltaConfig delta_config = 8 [json_name = "deltaConfig"];</code>
   * @return The deltaConfig.
   */
  datapower.noesis.v1.DeltaConfig getDeltaConfig();
  /**
   * <pre>
   * Delta Lake table settings
   * </pre>
   *
   * <code>.datapower.noesis.v1.DeltaConfig delta_config = 8 [json_name = "deltaConfig"];</code>
   */
  datapower.noesis.v1.DeltaConfigOrBuilder getDeltaConfigOrBuilder();

  /**
   * <pre>
   * Optional: split identifier for this extraction
   * </pre>
   *
   * <code>string split_id = 6 [json_name = "splitId"];</code>
   * @return The splitId.
   */
  java.lang.String getSplitId();
  /**
   * <pre>
   * Optional: split identifier for this extraction
   * </pre>
   *
   * <code>string split_id = 6 [json_name = "splitId"];</code>
   * @return The bytes for splitId.
   */
  com.google.protobuf.ByteString
      getSplitIdBytes();

  datapower.noesis.v1.InitSessionRequest.FormatConfigCase getFormatConfigCase();
}
