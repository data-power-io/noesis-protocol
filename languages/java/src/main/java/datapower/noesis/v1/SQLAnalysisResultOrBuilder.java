// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface SQLAnalysisResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.SQLAnalysisResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Whether SQL is valid
   * </pre>
   *
   * <code>bool valid = 1 [json_name = "valid"];</code>
   * @return The valid.
   */
  boolean getValid();

  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @return A list containing the parseErrors.
   */
  java.util.List<java.lang.String>
      getParseErrorsList();
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @return The count of parseErrors.
   */
  int getParseErrorsCount();
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @param index The index of the element to return.
   * @return The parseErrors at the given index.
   */
  java.lang.String getParseErrors(int index);
  /**
   * <pre>
   * Parse errors (if any)
   * </pre>
   *
   * <code>repeated string parse_errors = 2 [json_name = "parseErrors"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the parseErrors at the given index.
   */
  com.google.protobuf.ByteString
      getParseErrorsBytes(int index);

  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @return A list containing the referencedSources.
   */
  java.util.List<java.lang.String>
      getReferencedSourcesList();
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @return The count of referencedSources.
   */
  int getReferencedSourcesCount();
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @param index The index of the element to return.
   * @return The referencedSources at the given index.
   */
  java.lang.String getReferencedSources(int index);
  /**
   * <pre>
   * Referenced source aliases
   * </pre>
   *
   * <code>repeated string referenced_sources = 3 [json_name = "referencedSources"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the referencedSources at the given index.
   */
  com.google.protobuf.ByteString
      getReferencedSourcesBytes(int index);

  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  int getSourceColumnsCount();
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  boolean containsSourceColumns(
      java.lang.String key);
  /**
   * Use {@link #getSourceColumnsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList>
  getSourceColumns();
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  java.util.Map<java.lang.String, datapower.noesis.v1.ColumnList>
  getSourceColumnsMap();
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  /* nullable */
datapower.noesis.v1.ColumnList getSourceColumnsOrDefault(
      java.lang.String key,
      /* nullable */
datapower.noesis.v1.ColumnList defaultValue);
  /**
   * <pre>
   * Referenced columns per source
   * </pre>
   *
   * <code>map&lt;string, .datapower.noesis.v1.ColumnList&gt; source_columns = 4 [json_name = "sourceColumns"];</code>
   */
  datapower.noesis.v1.ColumnList getSourceColumnsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @return A list containing the outputColumns.
   */
  java.util.List<java.lang.String>
      getOutputColumnsList();
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @return The count of outputColumns.
   */
  int getOutputColumnsCount();
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @param index The index of the element to return.
   * @return The outputColumns at the given index.
   */
  java.lang.String getOutputColumns(int index);
  /**
   * <pre>
   * Output columns (SELECT list)
   * </pre>
   *
   * <code>repeated string output_columns = 5 [json_name = "outputColumns"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the outputColumns at the given index.
   */
  com.google.protobuf.ByteString
      getOutputColumnsBytes(int index);

  /**
   * <pre>
   * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
   * </pre>
   *
   * <code>string query_type = 6 [json_name = "queryType"];</code>
   * @return The queryType.
   */
  java.lang.String getQueryType();
  /**
   * <pre>
   * Query type (SELECT, JOIN, AGGREGATION, WINDOW)
   * </pre>
   *
   * <code>string query_type = 6 [json_name = "queryType"];</code>
   * @return The bytes for queryType.
   */
  com.google.protobuf.ByteString
      getQueryTypeBytes();

  /**
   * <pre>
   * Has GROUP BY clause
   * </pre>
   *
   * <code>bool has_grouping = 7 [json_name = "hasGrouping"];</code>
   * @return The hasGrouping.
   */
  boolean getHasGrouping();

  /**
   * <pre>
   * Has window functions
   * </pre>
   *
   * <code>bool has_windowing = 8 [json_name = "hasWindowing"];</code>
   * @return The hasWindowing.
   */
  boolean getHasWindowing();

  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @return A list containing the joinTypes.
   */
  java.util.List<java.lang.String>
      getJoinTypesList();
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @return The count of joinTypes.
   */
  int getJoinTypesCount();
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @param index The index of the element to return.
   * @return The joinTypes at the given index.
   */
  java.lang.String getJoinTypes(int index);
  /**
   * <pre>
   * Join types used (INNER, LEFT, RIGHT, FULL)
   * </pre>
   *
   * <code>repeated string join_types = 9 [json_name = "joinTypes"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the joinTypes at the given index.
   */
  com.google.protobuf.ByteString
      getJoinTypesBytes(int index);
}
