// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/pipeline.proto

package datapower.noesis.v1;

/**
 * <pre>
 * Source represents an input data source
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.Source}
 */
public final class Source extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.Source)
    SourceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Source.newBuilder() to construct.
  private Source(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Source() {
    alias_ = "";
    type_ = 0;
    name_ = "";
    schema_ = java.util.Collections.emptyList();
    partitionKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Source();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_Source_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_Source_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.Source.class, datapower.noesis.v1.Source.Builder.class);
  }

  public static final int ALIAS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object alias_ = "";
  /**
   * <pre>
   * Alias used to reference this source in SQL queries
   * </pre>
   *
   * <code>string alias = 1 [json_name = "alias"];</code>
   * @return The alias.
   */
  @java.lang.Override
  public java.lang.String getAlias() {
    java.lang.Object ref = alias_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      alias_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Alias used to reference this source in SQL queries
   * </pre>
   *
   * <code>string alias = 1 [json_name = "alias"];</code>
   * @return The bytes for alias.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAliasBytes() {
    java.lang.Object ref = alias_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      alias_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TYPE_FIELD_NUMBER = 2;
  private int type_ = 0;
  /**
   * <pre>
   * Type of source (iceberg_table or kafka_topic)
   * </pre>
   *
   * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * Type of source (iceberg_table or kafka_topic)
   * </pre>
   *
   * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
   * @return The type.
   */
  @java.lang.Override public datapower.noesis.v1.SourceType getType() {
    datapower.noesis.v1.SourceType result = datapower.noesis.v1.SourceType.forNumber(type_);
    return result == null ? datapower.noesis.v1.SourceType.UNRECOGNIZED : result;
  }

  public static final int NAME_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   * <pre>
   * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
   * </pre>
   *
   * <code>string name = 3 [json_name = "name"];</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
   * </pre>
   *
   * <code>string name = 3 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STREAMING_SOURCE_FIELD_NUMBER = 4;
  private datapower.noesis.v1.StreamingSource streamingSource_;
  /**
   * <pre>
   * For Iceberg tables that are fed by streaming sources
   * This indicates the table has real-time updates
   * </pre>
   *
   * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
   * @return Whether the streamingSource field is set.
   */
  @java.lang.Override
  public boolean hasStreamingSource() {
    return streamingSource_ != null;
  }
  /**
   * <pre>
   * For Iceberg tables that are fed by streaming sources
   * This indicates the table has real-time updates
   * </pre>
   *
   * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
   * @return The streamingSource.
   */
  @java.lang.Override
  public datapower.noesis.v1.StreamingSource getStreamingSource() {
    return streamingSource_ == null ? datapower.noesis.v1.StreamingSource.getDefaultInstance() : streamingSource_;
  }
  /**
   * <pre>
   * For Iceberg tables that are fed by streaming sources
   * This indicates the table has real-time updates
   * </pre>
   *
   * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.StreamingSourceOrBuilder getStreamingSourceOrBuilder() {
    return streamingSource_ == null ? datapower.noesis.v1.StreamingSource.getDefaultInstance() : streamingSource_;
  }

  public static final int SCHEMA_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.SchemaField> schema_;
  /**
   * <pre>
   * Schema definition for this source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.SchemaField> getSchemaList() {
    return schema_;
  }
  /**
   * <pre>
   * Schema definition for this source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.SchemaFieldOrBuilder> 
      getSchemaOrBuilderList() {
    return schema_;
  }
  /**
   * <pre>
   * Schema definition for this source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public int getSchemaCount() {
    return schema_.size();
  }
  /**
   * <pre>
   * Schema definition for this source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.SchemaField getSchema(int index) {
    return schema_.get(index);
  }
  /**
   * <pre>
   * Schema definition for this source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.SchemaFieldOrBuilder getSchemaOrBuilder(
      int index) {
    return schema_.get(index);
  }

  public static final int PARTITION_KEYS_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList partitionKeys_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Optional: Partitioning information for optimization
   * </pre>
   *
   * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
   * @return A list containing the partitionKeys.
   */
  public com.google.protobuf.ProtocolStringList
      getPartitionKeysList() {
    return partitionKeys_;
  }
  /**
   * <pre>
   * Optional: Partitioning information for optimization
   * </pre>
   *
   * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
   * @return The count of partitionKeys.
   */
  public int getPartitionKeysCount() {
    return partitionKeys_.size();
  }
  /**
   * <pre>
   * Optional: Partitioning information for optimization
   * </pre>
   *
   * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
   * @param index The index of the element to return.
   * @return The partitionKeys at the given index.
   */
  public java.lang.String getPartitionKeys(int index) {
    return partitionKeys_.get(index);
  }
  /**
   * <pre>
   * Optional: Partitioning information for optimization
   * </pre>
   *
   * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the partitionKeys at the given index.
   */
  public com.google.protobuf.ByteString
      getPartitionKeysBytes(int index) {
    return partitionKeys_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(alias_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, alias_);
    }
    if (type_ != datapower.noesis.v1.SourceType.SOURCE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, type_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
    }
    if (streamingSource_ != null) {
      output.writeMessage(4, getStreamingSource());
    }
    for (int i = 0; i < schema_.size(); i++) {
      output.writeMessage(5, schema_.get(i));
    }
    for (int i = 0; i < partitionKeys_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, partitionKeys_.getRaw(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(alias_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, alias_);
    }
    if (type_ != datapower.noesis.v1.SourceType.SOURCE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, type_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
    }
    if (streamingSource_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getStreamingSource());
    }
    for (int i = 0; i < schema_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, schema_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < partitionKeys_.size(); i++) {
        dataSize += computeStringSizeNoTag(partitionKeys_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getPartitionKeysList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.Source)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.Source other = (datapower.noesis.v1.Source) obj;

    if (!getAlias()
        .equals(other.getAlias())) return false;
    if (type_ != other.type_) return false;
    if (!getName()
        .equals(other.getName())) return false;
    if (hasStreamingSource() != other.hasStreamingSource()) return false;
    if (hasStreamingSource()) {
      if (!getStreamingSource()
          .equals(other.getStreamingSource())) return false;
    }
    if (!getSchemaList()
        .equals(other.getSchemaList())) return false;
    if (!getPartitionKeysList()
        .equals(other.getPartitionKeysList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ALIAS_FIELD_NUMBER;
    hash = (53 * hash) + getAlias().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (hasStreamingSource()) {
      hash = (37 * hash) + STREAMING_SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getStreamingSource().hashCode();
    }
    if (getSchemaCount() > 0) {
      hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getSchemaList().hashCode();
    }
    if (getPartitionKeysCount() > 0) {
      hash = (37 * hash) + PARTITION_KEYS_FIELD_NUMBER;
      hash = (53 * hash) + getPartitionKeysList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.Source parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Source parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Source parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Source parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Source parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Source parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Source parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.Source parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.Source parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.Source parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.Source parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.Source parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.Source prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Source represents an input data source
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.Source}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.Source)
      datapower.noesis.v1.SourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_Source_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_Source_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.Source.class, datapower.noesis.v1.Source.Builder.class);
    }

    // Construct using datapower.noesis.v1.Source.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      alias_ = "";
      type_ = 0;
      name_ = "";
      streamingSource_ = null;
      if (streamingSourceBuilder_ != null) {
        streamingSourceBuilder_.dispose();
        streamingSourceBuilder_ = null;
      }
      if (schemaBuilder_ == null) {
        schema_ = java.util.Collections.emptyList();
      } else {
        schema_ = null;
        schemaBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      partitionKeys_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.Pipeline.internal_static_datapower_noesis_v1_Source_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.Source getDefaultInstanceForType() {
      return datapower.noesis.v1.Source.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.Source build() {
      datapower.noesis.v1.Source result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.Source buildPartial() {
      datapower.noesis.v1.Source result = new datapower.noesis.v1.Source(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(datapower.noesis.v1.Source result) {
      if (schemaBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          schema_ = java.util.Collections.unmodifiableList(schema_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.schema_ = schema_;
      } else {
        result.schema_ = schemaBuilder_.build();
      }
    }

    private void buildPartial0(datapower.noesis.v1.Source result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.alias_ = alias_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.type_ = type_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.name_ = name_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.streamingSource_ = streamingSourceBuilder_ == null
            ? streamingSource_
            : streamingSourceBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        partitionKeys_.makeImmutable();
        result.partitionKeys_ = partitionKeys_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.Source) {
        return mergeFrom((datapower.noesis.v1.Source)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.Source other) {
      if (other == datapower.noesis.v1.Source.getDefaultInstance()) return this;
      if (!other.getAlias().isEmpty()) {
        alias_ = other.alias_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.hasStreamingSource()) {
        mergeStreamingSource(other.getStreamingSource());
      }
      if (schemaBuilder_ == null) {
        if (!other.schema_.isEmpty()) {
          if (schema_.isEmpty()) {
            schema_ = other.schema_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSchemaIsMutable();
            schema_.addAll(other.schema_);
          }
          onChanged();
        }
      } else {
        if (!other.schema_.isEmpty()) {
          if (schemaBuilder_.isEmpty()) {
            schemaBuilder_.dispose();
            schemaBuilder_ = null;
            schema_ = other.schema_;
            bitField0_ = (bitField0_ & ~0x00000010);
            schemaBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSchemaFieldBuilder() : null;
          } else {
            schemaBuilder_.addAllMessages(other.schema_);
          }
        }
      }
      if (!other.partitionKeys_.isEmpty()) {
        if (partitionKeys_.isEmpty()) {
          partitionKeys_ = other.partitionKeys_;
          bitField0_ |= 0x00000020;
        } else {
          ensurePartitionKeysIsMutable();
          partitionKeys_.addAll(other.partitionKeys_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              alias_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              type_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              name_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getStreamingSourceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              datapower.noesis.v1.SchemaField m =
                  input.readMessage(
                      datapower.noesis.v1.SchemaField.parser(),
                      extensionRegistry);
              if (schemaBuilder_ == null) {
                ensureSchemaIsMutable();
                schema_.add(m);
              } else {
                schemaBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();
              ensurePartitionKeysIsMutable();
              partitionKeys_.add(s);
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object alias_ = "";
    /**
     * <pre>
     * Alias used to reference this source in SQL queries
     * </pre>
     *
     * <code>string alias = 1 [json_name = "alias"];</code>
     * @return The alias.
     */
    public java.lang.String getAlias() {
      java.lang.Object ref = alias_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        alias_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Alias used to reference this source in SQL queries
     * </pre>
     *
     * <code>string alias = 1 [json_name = "alias"];</code>
     * @return The bytes for alias.
     */
    public com.google.protobuf.ByteString
        getAliasBytes() {
      java.lang.Object ref = alias_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        alias_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Alias used to reference this source in SQL queries
     * </pre>
     *
     * <code>string alias = 1 [json_name = "alias"];</code>
     * @param value The alias to set.
     * @return This builder for chaining.
     */
    public Builder setAlias(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      alias_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Alias used to reference this source in SQL queries
     * </pre>
     *
     * <code>string alias = 1 [json_name = "alias"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAlias() {
      alias_ = getDefaultInstance().getAlias();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Alias used to reference this source in SQL queries
     * </pre>
     *
     * <code>string alias = 1 [json_name = "alias"];</code>
     * @param value The bytes for alias to set.
     * @return This builder for chaining.
     */
    public Builder setAliasBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      alias_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <pre>
     * Type of source (iceberg_table or kafka_topic)
     * </pre>
     *
     * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type of source (iceberg_table or kafka_topic)
     * </pre>
     *
     * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of source (iceberg_table or kafka_topic)
     * </pre>
     *
     * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
     * @return The type.
     */
    @java.lang.Override
    public datapower.noesis.v1.SourceType getType() {
      datapower.noesis.v1.SourceType result = datapower.noesis.v1.SourceType.forNumber(type_);
      return result == null ? datapower.noesis.v1.SourceType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Type of source (iceberg_table or kafka_topic)
     * </pre>
     *
     * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(datapower.noesis.v1.SourceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of source (iceberg_table or kafka_topic)
     * </pre>
     *
     * <code>.datapower.noesis.v1.SourceType type = 2 [json_name = "type"];</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      type_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
     * </pre>
     *
     * <code>string name = 3 [json_name = "name"];</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
     * </pre>
     *
     * <code>string name = 3 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
     * </pre>
     *
     * <code>string name = 3 [json_name = "name"];</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
     * </pre>
     *
     * <code>string name = 3 [json_name = "name"];</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fully qualified name (e.g., "raw.customers_db" for Iceberg, "raw-orders-events" for Kafka)
     * </pre>
     *
     * <code>string name = 3 [json_name = "name"];</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private datapower.noesis.v1.StreamingSource streamingSource_;
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.StreamingSource, datapower.noesis.v1.StreamingSource.Builder, datapower.noesis.v1.StreamingSourceOrBuilder> streamingSourceBuilder_;
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     * @return Whether the streamingSource field is set.
     */
    public boolean hasStreamingSource() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     * @return The streamingSource.
     */
    public datapower.noesis.v1.StreamingSource getStreamingSource() {
      if (streamingSourceBuilder_ == null) {
        return streamingSource_ == null ? datapower.noesis.v1.StreamingSource.getDefaultInstance() : streamingSource_;
      } else {
        return streamingSourceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    public Builder setStreamingSource(datapower.noesis.v1.StreamingSource value) {
      if (streamingSourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        streamingSource_ = value;
      } else {
        streamingSourceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    public Builder setStreamingSource(
        datapower.noesis.v1.StreamingSource.Builder builderForValue) {
      if (streamingSourceBuilder_ == null) {
        streamingSource_ = builderForValue.build();
      } else {
        streamingSourceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    public Builder mergeStreamingSource(datapower.noesis.v1.StreamingSource value) {
      if (streamingSourceBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          streamingSource_ != null &&
          streamingSource_ != datapower.noesis.v1.StreamingSource.getDefaultInstance()) {
          getStreamingSourceBuilder().mergeFrom(value);
        } else {
          streamingSource_ = value;
        }
      } else {
        streamingSourceBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    public Builder clearStreamingSource() {
      bitField0_ = (bitField0_ & ~0x00000008);
      streamingSource_ = null;
      if (streamingSourceBuilder_ != null) {
        streamingSourceBuilder_.dispose();
        streamingSourceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    public datapower.noesis.v1.StreamingSource.Builder getStreamingSourceBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getStreamingSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    public datapower.noesis.v1.StreamingSourceOrBuilder getStreamingSourceOrBuilder() {
      if (streamingSourceBuilder_ != null) {
        return streamingSourceBuilder_.getMessageOrBuilder();
      } else {
        return streamingSource_ == null ?
            datapower.noesis.v1.StreamingSource.getDefaultInstance() : streamingSource_;
      }
    }
    /**
     * <pre>
     * For Iceberg tables that are fed by streaming sources
     * This indicates the table has real-time updates
     * </pre>
     *
     * <code>.datapower.noesis.v1.StreamingSource streaming_source = 4 [json_name = "streamingSource"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.StreamingSource, datapower.noesis.v1.StreamingSource.Builder, datapower.noesis.v1.StreamingSourceOrBuilder> 
        getStreamingSourceFieldBuilder() {
      if (streamingSourceBuilder_ == null) {
        streamingSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.StreamingSource, datapower.noesis.v1.StreamingSource.Builder, datapower.noesis.v1.StreamingSourceOrBuilder>(
                getStreamingSource(),
                getParentForChildren(),
                isClean());
        streamingSource_ = null;
      }
      return streamingSourceBuilder_;
    }

    private java.util.List<datapower.noesis.v1.SchemaField> schema_ =
      java.util.Collections.emptyList();
    private void ensureSchemaIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        schema_ = new java.util.ArrayList<datapower.noesis.v1.SchemaField>(schema_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.SchemaField, datapower.noesis.v1.SchemaField.Builder, datapower.noesis.v1.SchemaFieldOrBuilder> schemaBuilder_;

    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public java.util.List<datapower.noesis.v1.SchemaField> getSchemaList() {
      if (schemaBuilder_ == null) {
        return java.util.Collections.unmodifiableList(schema_);
      } else {
        return schemaBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public int getSchemaCount() {
      if (schemaBuilder_ == null) {
        return schema_.size();
      } else {
        return schemaBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField getSchema(int index) {
      if (schemaBuilder_ == null) {
        return schema_.get(index);
      } else {
        return schemaBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder setSchema(
        int index, datapower.noesis.v1.SchemaField value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchemaIsMutable();
        schema_.set(index, value);
        onChanged();
      } else {
        schemaBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder setSchema(
        int index, datapower.noesis.v1.SchemaField.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.set(index, builderForValue.build());
        onChanged();
      } else {
        schemaBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder addSchema(datapower.noesis.v1.SchemaField value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchemaIsMutable();
        schema_.add(value);
        onChanged();
      } else {
        schemaBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder addSchema(
        int index, datapower.noesis.v1.SchemaField value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSchemaIsMutable();
        schema_.add(index, value);
        onChanged();
      } else {
        schemaBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder addSchema(
        datapower.noesis.v1.SchemaField.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.add(builderForValue.build());
        onChanged();
      } else {
        schemaBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder addSchema(
        int index, datapower.noesis.v1.SchemaField.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.add(index, builderForValue.build());
        onChanged();
      } else {
        schemaBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder addAllSchema(
        java.lang.Iterable<? extends datapower.noesis.v1.SchemaField> values) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, schema_);
        onChanged();
      } else {
        schemaBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder clearSchema() {
      if (schemaBuilder_ == null) {
        schema_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        schemaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public Builder removeSchema(int index) {
      if (schemaBuilder_ == null) {
        ensureSchemaIsMutable();
        schema_.remove(index);
        onChanged();
      } else {
        schemaBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField.Builder getSchemaBuilder(
        int index) {
      return getSchemaFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaFieldOrBuilder getSchemaOrBuilder(
        int index) {
      if (schemaBuilder_ == null) {
        return schema_.get(index);  } else {
        return schemaBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.SchemaFieldOrBuilder> 
         getSchemaOrBuilderList() {
      if (schemaBuilder_ != null) {
        return schemaBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(schema_);
      }
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField.Builder addSchemaBuilder() {
      return getSchemaFieldBuilder().addBuilder(
          datapower.noesis.v1.SchemaField.getDefaultInstance());
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public datapower.noesis.v1.SchemaField.Builder addSchemaBuilder(
        int index) {
      return getSchemaFieldBuilder().addBuilder(
          index, datapower.noesis.v1.SchemaField.getDefaultInstance());
    }
    /**
     * <pre>
     * Schema definition for this source
     * </pre>
     *
     * <code>repeated .datapower.noesis.v1.SchemaField schema = 5 [json_name = "schema"];</code>
     */
    public java.util.List<datapower.noesis.v1.SchemaField.Builder> 
         getSchemaBuilderList() {
      return getSchemaFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.SchemaField, datapower.noesis.v1.SchemaField.Builder, datapower.noesis.v1.SchemaFieldOrBuilder> 
        getSchemaFieldBuilder() {
      if (schemaBuilder_ == null) {
        schemaBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.SchemaField, datapower.noesis.v1.SchemaField.Builder, datapower.noesis.v1.SchemaFieldOrBuilder>(
                schema_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        schema_ = null;
      }
      return schemaBuilder_;
    }

    private com.google.protobuf.LazyStringArrayList partitionKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensurePartitionKeysIsMutable() {
      if (!partitionKeys_.isModifiable()) {
        partitionKeys_ = new com.google.protobuf.LazyStringArrayList(partitionKeys_);
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @return A list containing the partitionKeys.
     */
    public com.google.protobuf.ProtocolStringList
        getPartitionKeysList() {
      partitionKeys_.makeImmutable();
      return partitionKeys_;
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @return The count of partitionKeys.
     */
    public int getPartitionKeysCount() {
      return partitionKeys_.size();
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @param index The index of the element to return.
     * @return The partitionKeys at the given index.
     */
    public java.lang.String getPartitionKeys(int index) {
      return partitionKeys_.get(index);
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the partitionKeys at the given index.
     */
    public com.google.protobuf.ByteString
        getPartitionKeysBytes(int index) {
      return partitionKeys_.getByteString(index);
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @param index The index to set the value at.
     * @param value The partitionKeys to set.
     * @return This builder for chaining.
     */
    public Builder setPartitionKeys(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensurePartitionKeysIsMutable();
      partitionKeys_.set(index, value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @param value The partitionKeys to add.
     * @return This builder for chaining.
     */
    public Builder addPartitionKeys(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensurePartitionKeysIsMutable();
      partitionKeys_.add(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @param values The partitionKeys to add.
     * @return This builder for chaining.
     */
    public Builder addAllPartitionKeys(
        java.lang.Iterable<java.lang.String> values) {
      ensurePartitionKeysIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, partitionKeys_);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPartitionKeys() {
      partitionKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Partitioning information for optimization
     * </pre>
     *
     * <code>repeated string partition_keys = 6 [json_name = "partitionKeys"];</code>
     * @param value The bytes of the partitionKeys to add.
     * @return This builder for chaining.
     */
    public Builder addPartitionKeysBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensurePartitionKeysIsMutable();
      partitionKeys_.add(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.Source)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.Source)
  private static final datapower.noesis.v1.Source DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.Source();
  }

  public static datapower.noesis.v1.Source getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Source>
      PARSER = new com.google.protobuf.AbstractParser<Source>() {
    @java.lang.Override
    public Source parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Source> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Source> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.Source getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

