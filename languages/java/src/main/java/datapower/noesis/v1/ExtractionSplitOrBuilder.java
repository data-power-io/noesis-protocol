// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface ExtractionSplitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.ExtractionSplit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique identifier for this split (e.g., "split-0001")
   * </pre>
   *
   * <code>string split_id = 1 [json_name = "splitId"];</code>
   * @return The splitId.
   */
  java.lang.String getSplitId();
  /**
   * <pre>
   * Unique identifier for this split (e.g., "split-0001")
   * </pre>
   *
   * <code>string split_id = 1 [json_name = "splitId"];</code>
   * @return The bytes for splitId.
   */
  com.google.protobuf.ByteString
      getSplitIdBytes();

  /**
   * <pre>
   * Opaque connector-specific split metadata
   * </pre>
   *
   * <code>bytes split_token = 2 [json_name = "splitToken"];</code>
   * @return The splitToken.
   */
  com.google.protobuf.ByteString getSplitToken();

  /**
   * <pre>
   * Estimated rows in this split (0 if unknown)
   * </pre>
   *
   * <code>int64 estimated_rows = 3 [json_name = "estimatedRows"];</code>
   * @return The estimatedRows.
   */
  long getEstimatedRows();

  /**
   * <pre>
   * Optional split metadata (for logging/debugging)
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  int getMetadataCount();
  /**
   * <pre>
   * Optional split metadata (for logging/debugging)
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  boolean containsMetadata(
      java.lang.String key);
  /**
   * Use {@link #getMetadataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getMetadata();
  /**
   * <pre>
   * Optional split metadata (for logging/debugging)
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getMetadataMap();
  /**
   * <pre>
   * Optional split metadata (for logging/debugging)
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  /* nullable */
java.lang.String getMetadataOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Optional split metadata (for logging/debugging)
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  java.lang.String getMetadataOrThrow(
      java.lang.String key);
}
