// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface ExtractionSplitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.ExtractionSplit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique split identifier (e.g., "split-0", "split-1")
   * </pre>
   *
   * <code>string split_id = 1 [json_name = "splitId"];</code>
   * @return The splitId.
   */
  java.lang.String getSplitId();
  /**
   * <pre>
   * Unique split identifier (e.g., "split-0", "split-1")
   * </pre>
   *
   * <code>string split_id = 1 [json_name = "splitId"];</code>
   * @return The bytes for splitId.
   */
  com.google.protobuf.ByteString
      getSplitIdBytes();

  /**
   * <pre>
   * Source alias this split belongs to
   * </pre>
   *
   * <code>string source_alias = 2 [json_name = "sourceAlias"];</code>
   * @return The sourceAlias.
   */
  java.lang.String getSourceAlias();
  /**
   * <pre>
   * Source alias this split belongs to
   * </pre>
   *
   * <code>string source_alias = 2 [json_name = "sourceAlias"];</code>
   * @return The bytes for sourceAlias.
   */
  com.google.protobuf.ByteString
      getSourceAliasBytes();

  /**
   * <pre>
   * Filter condition for this split (e.g., "WHERE id BETWEEN 1 AND 1000000")
   * </pre>
   *
   * <code>string filter_condition = 3 [json_name = "filterCondition"];</code>
   * @return The filterCondition.
   */
  java.lang.String getFilterCondition();
  /**
   * <pre>
   * Filter condition for this split (e.g., "WHERE id BETWEEN 1 AND 1000000")
   * </pre>
   *
   * <code>string filter_condition = 3 [json_name = "filterCondition"];</code>
   * @return The bytes for filterCondition.
   */
  com.google.protobuf.ByteString
      getFilterConditionBytes();

  /**
   * <pre>
   * Estimated rows in this split
   * </pre>
   *
   * <code>int64 estimated_rows = 4 [json_name = "estimatedRows"];</code>
   * @return The estimatedRows.
   */
  long getEstimatedRows();

  /**
   * <pre>
   * Connector configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 5 [json_name = "connector"];</code>
   * @return Whether the connector field is set.
   */
  boolean hasConnector();
  /**
   * <pre>
   * Connector configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 5 [json_name = "connector"];</code>
   * @return The connector.
   */
  datapower.noesis.v1.ConnectorConfig getConnector();
  /**
   * <pre>
   * Connector configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 5 [json_name = "connector"];</code>
   */
  datapower.noesis.v1.ConnectorConfigOrBuilder getConnectorOrBuilder();

  /**
   * <pre>
   * Output configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.OutputConfig output = 6 [json_name = "output"];</code>
   * @return Whether the output field is set.
   */
  boolean hasOutput();
  /**
   * <pre>
   * Output configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.OutputConfig output = 6 [json_name = "output"];</code>
   * @return The output.
   */
  datapower.noesis.v1.OutputConfig getOutput();
  /**
   * <pre>
   * Output configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.OutputConfig output = 6 [json_name = "output"];</code>
   */
  datapower.noesis.v1.OutputConfigOrBuilder getOutputOrBuilder();
}
