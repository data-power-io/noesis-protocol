// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/patch_events.proto

package datapower.noesis.v1;

public interface SourceInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.SourceInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
   * @return The sourceAlias.
   */
  java.lang.String getSourceAlias();
  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
   * @return The bytes for sourceAlias.
   */
  com.google.protobuf.ByteString
      getSourceAliasBytes();

  /**
   * <pre>
   * Original event timestamp from source
   * </pre>
   *
   * <code>.google.protobuf.Timestamp source_timestamp = 2 [json_name = "sourceTimestamp"];</code>
   * @return Whether the sourceTimestamp field is set.
   */
  boolean hasSourceTimestamp();
  /**
   * <pre>
   * Original event timestamp from source
   * </pre>
   *
   * <code>.google.protobuf.Timestamp source_timestamp = 2 [json_name = "sourceTimestamp"];</code>
   * @return The sourceTimestamp.
   */
  com.google.protobuf.Timestamp getSourceTimestamp();
  /**
   * <pre>
   * Original event timestamp from source
   * </pre>
   *
   * <code>.google.protobuf.Timestamp source_timestamp = 2 [json_name = "sourceTimestamp"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getSourceTimestampOrBuilder();

  /**
   * <pre>
   * Source record key/ID
   * </pre>
   *
   * <code>string source_record_id = 3 [json_name = "sourceRecordId"];</code>
   * @return The sourceRecordId.
   */
  java.lang.String getSourceRecordId();
  /**
   * <pre>
   * Source record key/ID
   * </pre>
   *
   * <code>string source_record_id = 3 [json_name = "sourceRecordId"];</code>
   * @return The bytes for sourceRecordId.
   */
  com.google.protobuf.ByteString
      getSourceRecordIdBytes();

  /**
   * <pre>
   * Additional source metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  int getMetadataCount();
  /**
   * <pre>
   * Additional source metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  boolean containsMetadata(
      java.lang.String key);
  /**
   * Use {@link #getMetadataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getMetadata();
  /**
   * <pre>
   * Additional source metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getMetadataMap();
  /**
   * <pre>
   * Additional source metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  /* nullable */
java.lang.String getMetadataOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Additional source metadata
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 4 [json_name = "metadata"];</code>
   */
  java.lang.String getMetadataOrThrow(
      java.lang.String key);
}
