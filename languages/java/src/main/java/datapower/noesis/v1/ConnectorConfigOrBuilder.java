// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface ConnectorConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.ConnectorConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Connector type (e.g., "postgres", "mysql", "oracle")
   * </pre>
   *
   * <code>string connector_type = 1 [json_name = "connectorType"];</code>
   * @return The connectorType.
   */
  java.lang.String getConnectorType();
  /**
   * <pre>
   * Connector type (e.g., "postgres", "mysql", "oracle")
   * </pre>
   *
   * <code>string connector_type = 1 [json_name = "connectorType"];</code>
   * @return The bytes for connectorType.
   */
  com.google.protobuf.ByteString
      getConnectorTypeBytes();

  /**
   * <pre>
   * Docker image for the connector
   * </pre>
   *
   * <code>string connector_image = 2 [json_name = "connectorImage"];</code>
   * @return The connectorImage.
   */
  java.lang.String getConnectorImage();
  /**
   * <pre>
   * Docker image for the connector
   * </pre>
   *
   * <code>string connector_image = 2 [json_name = "connectorImage"];</code>
   * @return The bytes for connectorImage.
   */
  com.google.protobuf.ByteString
      getConnectorImageBytes();

  /**
   * <pre>
   * Connector version
   * </pre>
   *
   * <code>string connector_version = 3 [json_name = "connectorVersion"];</code>
   * @return The connectorVersion.
   */
  java.lang.String getConnectorVersion();
  /**
   * <pre>
   * Connector version
   * </pre>
   *
   * <code>string connector_version = 3 [json_name = "connectorVersion"];</code>
   * @return The bytes for connectorVersion.
   */
  com.google.protobuf.ByteString
      getConnectorVersionBytes();

  /**
   * <pre>
   * Connection configuration (credentials, endpoints, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  int getConfigCount();
  /**
   * <pre>
   * Connection configuration (credentials, endpoints, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  boolean containsConfig(
      java.lang.String key);
  /**
   * Use {@link #getConfigMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getConfig();
  /**
   * <pre>
   * Connection configuration (credentials, endpoints, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getConfigMap();
  /**
   * <pre>
   * Connection configuration (credentials, endpoints, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  /* nullable */
java.lang.String getConfigOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Connection configuration (credentials, endpoints, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  java.lang.String getConfigOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Entity name in source system
   * </pre>
   *
   * <code>string entity_name = 5 [json_name = "entityName"];</code>
   * @return The entityName.
   */
  java.lang.String getEntityName();
  /**
   * <pre>
   * Entity name in source system
   * </pre>
   *
   * <code>string entity_name = 5 [json_name = "entityName"];</code>
   * @return The bytes for entityName.
   */
  com.google.protobuf.ByteString
      getEntityNameBytes();
}
