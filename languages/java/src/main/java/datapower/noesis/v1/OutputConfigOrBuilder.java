// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface OutputConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.OutputConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Object storage bucket (e.g., "gs://my-bucket", "s3://my-bucket")
   * </pre>
   *
   * <code>string bucket = 1 [json_name = "bucket"];</code>
   * @return The bucket.
   */
  java.lang.String getBucket();
  /**
   * <pre>
   * Object storage bucket (e.g., "gs://my-bucket", "s3://my-bucket")
   * </pre>
   *
   * <code>string bucket = 1 [json_name = "bucket"];</code>
   * @return The bytes for bucket.
   */
  com.google.protobuf.ByteString
      getBucketBytes();

  /**
   * <pre>
   * Path within bucket (e.g., "staging/customers_batch/run-xyz/partition-1")
   * </pre>
   *
   * <code>string path = 2 [json_name = "path"];</code>
   * @return The path.
   */
  java.lang.String getPath();
  /**
   * <pre>
   * Path within bucket (e.g., "staging/customers_batch/run-xyz/partition-1")
   * </pre>
   *
   * <code>string path = 2 [json_name = "path"];</code>
   * @return The bytes for path.
   */
  com.google.protobuf.ByteString
      getPathBytes();

  /**
   * <pre>
   * Parquet file format options
   * </pre>
   *
   * <code>.datapower.noesis.v1.ParquetOptions parquet = 3 [json_name = "parquet"];</code>
   * @return Whether the parquet field is set.
   */
  boolean hasParquet();
  /**
   * <pre>
   * Parquet file format options
   * </pre>
   *
   * <code>.datapower.noesis.v1.ParquetOptions parquet = 3 [json_name = "parquet"];</code>
   * @return The parquet.
   */
  datapower.noesis.v1.ParquetOptions getParquet();
  /**
   * <pre>
   * Parquet file format options
   * </pre>
   *
   * <code>.datapower.noesis.v1.ParquetOptions parquet = 3 [json_name = "parquet"];</code>
   */
  datapower.noesis.v1.ParquetOptionsOrBuilder getParquetOrBuilder();
}
