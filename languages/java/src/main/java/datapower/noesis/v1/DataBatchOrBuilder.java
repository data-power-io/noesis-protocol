// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/sidecar.proto

package datapower.noesis.v1;

public interface DataBatchOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.DataBatch)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Must match InitSession
   * </pre>
   *
   * <code>string session_id = 1 [json_name = "sessionId"];</code>
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   * <pre>
   * Must match InitSession
   * </pre>
   *
   * <code>string session_id = 1 [json_name = "sessionId"];</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * Batch of records (reuse RecordMsg from connector.proto)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.RecordMsg records = 2 [json_name = "records"];</code>
   */
  java.util.List<datapower.noesis.v1.RecordMsg> 
      getRecordsList();
  /**
   * <pre>
   * Batch of records (reuse RecordMsg from connector.proto)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.RecordMsg records = 2 [json_name = "records"];</code>
   */
  datapower.noesis.v1.RecordMsg getRecords(int index);
  /**
   * <pre>
   * Batch of records (reuse RecordMsg from connector.proto)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.RecordMsg records = 2 [json_name = "records"];</code>
   */
  int getRecordsCount();
  /**
   * <pre>
   * Batch of records (reuse RecordMsg from connector.proto)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.RecordMsg records = 2 [json_name = "records"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.RecordMsgOrBuilder> 
      getRecordsOrBuilderList();
  /**
   * <pre>
   * Batch of records (reuse RecordMsg from connector.proto)
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.RecordMsg records = 2 [json_name = "records"];</code>
   */
  datapower.noesis.v1.RecordMsgOrBuilder getRecordsOrBuilder(
      int index);

  /**
   * <pre>
   * Monotonically increasing batch sequence number
   * </pre>
   *
   * <code>int64 batch_seq = 3 [json_name = "batchSeq"];</code>
   * @return The batchSeq.
   */
  long getBatchSeq();

  /**
   * <pre>
   * True if this is the final batch in the stream
   * </pre>
   *
   * <code>bool is_last_batch = 4 [json_name = "isLastBatch"];</code>
   * @return The isLastBatch.
   */
  boolean getIsLastBatch();
}
