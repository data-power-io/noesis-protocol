// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

/**
 * <pre>
 * Typed value supporting common database types.
 * Designed to map cleanly to Parquet, Arrow, and SQL types.
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.Value}
 */
public final class Value extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.Value)
    ValueOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Value.newBuilder() to construct.
  private Value(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Value() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Value();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Value_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Value_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.Value.class, datapower.noesis.v1.Value.Builder.class);
  }

  private int kindCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object kind_;
  public enum KindCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    STRING_VAL(1),
    INT64_VAL(2),
    INT32_VAL(3),
    DOUBLE_VAL(4),
    FLOAT_VAL(5),
    BOOL_VAL(6),
    BYTES_VAL(7),
    TIMESTAMP_MICROS(10),
    DATE_DAYS(11),
    TIME_MICROS(12),
    NULL_VAL(20),
    STRUCT_VAL(21),
    LIST_VAL(22),
    MAP_VAL(23),
    KIND_NOT_SET(0);
    private final int value;
    private KindCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KindCase valueOf(int value) {
      return forNumber(value);
    }

    public static KindCase forNumber(int value) {
      switch (value) {
        case 1: return STRING_VAL;
        case 2: return INT64_VAL;
        case 3: return INT32_VAL;
        case 4: return DOUBLE_VAL;
        case 5: return FLOAT_VAL;
        case 6: return BOOL_VAL;
        case 7: return BYTES_VAL;
        case 10: return TIMESTAMP_MICROS;
        case 11: return DATE_DAYS;
        case 12: return TIME_MICROS;
        case 20: return NULL_VAL;
        case 21: return STRUCT_VAL;
        case 22: return LIST_VAL;
        case 23: return MAP_VAL;
        case 0: return KIND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public KindCase
  getKindCase() {
    return KindCase.forNumber(
        kindCase_);
  }

  public static final int STRING_VAL_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Primitive types
   * </pre>
   *
   * <code>string string_val = 1 [json_name = "stringVal"];</code>
   * @return Whether the stringVal field is set.
   */
  public boolean hasStringVal() {
    return kindCase_ == 1;
  }
  /**
   * <pre>
   * Primitive types
   * </pre>
   *
   * <code>string string_val = 1 [json_name = "stringVal"];</code>
   * @return The stringVal.
   */
  public java.lang.String getStringVal() {
    java.lang.Object ref = "";
    if (kindCase_ == 1) {
      ref = kind_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (kindCase_ == 1) {
        kind_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Primitive types
   * </pre>
   *
   * <code>string string_val = 1 [json_name = "stringVal"];</code>
   * @return The bytes for stringVal.
   */
  public com.google.protobuf.ByteString
      getStringValBytes() {
    java.lang.Object ref = "";
    if (kindCase_ == 1) {
      ref = kind_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (kindCase_ == 1) {
        kind_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INT64_VAL_FIELD_NUMBER = 2;
  /**
   * <code>int64 int64_val = 2 [json_name = "int64Val"];</code>
   * @return Whether the int64Val field is set.
   */
  @java.lang.Override
  public boolean hasInt64Val() {
    return kindCase_ == 2;
  }
  /**
   * <code>int64 int64_val = 2 [json_name = "int64Val"];</code>
   * @return The int64Val.
   */
  @java.lang.Override
  public long getInt64Val() {
    if (kindCase_ == 2) {
      return (java.lang.Long) kind_;
    }
    return 0L;
  }

  public static final int INT32_VAL_FIELD_NUMBER = 3;
  /**
   * <code>int32 int32_val = 3 [json_name = "int32Val"];</code>
   * @return Whether the int32Val field is set.
   */
  @java.lang.Override
  public boolean hasInt32Val() {
    return kindCase_ == 3;
  }
  /**
   * <code>int32 int32_val = 3 [json_name = "int32Val"];</code>
   * @return The int32Val.
   */
  @java.lang.Override
  public int getInt32Val() {
    if (kindCase_ == 3) {
      return (java.lang.Integer) kind_;
    }
    return 0;
  }

  public static final int DOUBLE_VAL_FIELD_NUMBER = 4;
  /**
   * <code>double double_val = 4 [json_name = "doubleVal"];</code>
   * @return Whether the doubleVal field is set.
   */
  @java.lang.Override
  public boolean hasDoubleVal() {
    return kindCase_ == 4;
  }
  /**
   * <code>double double_val = 4 [json_name = "doubleVal"];</code>
   * @return The doubleVal.
   */
  @java.lang.Override
  public double getDoubleVal() {
    if (kindCase_ == 4) {
      return (java.lang.Double) kind_;
    }
    return 0D;
  }

  public static final int FLOAT_VAL_FIELD_NUMBER = 5;
  /**
   * <code>float float_val = 5 [json_name = "floatVal"];</code>
   * @return Whether the floatVal field is set.
   */
  @java.lang.Override
  public boolean hasFloatVal() {
    return kindCase_ == 5;
  }
  /**
   * <code>float float_val = 5 [json_name = "floatVal"];</code>
   * @return The floatVal.
   */
  @java.lang.Override
  public float getFloatVal() {
    if (kindCase_ == 5) {
      return (java.lang.Float) kind_;
    }
    return 0F;
  }

  public static final int BOOL_VAL_FIELD_NUMBER = 6;
  /**
   * <code>bool bool_val = 6 [json_name = "boolVal"];</code>
   * @return Whether the boolVal field is set.
   */
  @java.lang.Override
  public boolean hasBoolVal() {
    return kindCase_ == 6;
  }
  /**
   * <code>bool bool_val = 6 [json_name = "boolVal"];</code>
   * @return The boolVal.
   */
  @java.lang.Override
  public boolean getBoolVal() {
    if (kindCase_ == 6) {
      return (java.lang.Boolean) kind_;
    }
    return false;
  }

  public static final int BYTES_VAL_FIELD_NUMBER = 7;
  /**
   * <code>bytes bytes_val = 7 [json_name = "bytesVal"];</code>
   * @return Whether the bytesVal field is set.
   */
  @java.lang.Override
  public boolean hasBytesVal() {
    return kindCase_ == 7;
  }
  /**
   * <code>bytes bytes_val = 7 [json_name = "bytesVal"];</code>
   * @return The bytesVal.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getBytesVal() {
    if (kindCase_ == 7) {
      return (com.google.protobuf.ByteString) kind_;
    }
    return com.google.protobuf.ByteString.EMPTY;
  }

  public static final int TIMESTAMP_MICROS_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Temporal types (microseconds precision)
   * </pre>
   *
   * <code>int64 timestamp_micros = 10 [json_name = "timestampMicros"];</code>
   * @return Whether the timestampMicros field is set.
   */
  @java.lang.Override
  public boolean hasTimestampMicros() {
    return kindCase_ == 10;
  }
  /**
   * <pre>
   * Temporal types (microseconds precision)
   * </pre>
   *
   * <code>int64 timestamp_micros = 10 [json_name = "timestampMicros"];</code>
   * @return The timestampMicros.
   */
  @java.lang.Override
  public long getTimestampMicros() {
    if (kindCase_ == 10) {
      return (java.lang.Long) kind_;
    }
    return 0L;
  }

  public static final int DATE_DAYS_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Date: days since Unix epoch (1970-01-01)
   * </pre>
   *
   * <code>int32 date_days = 11 [json_name = "dateDays"];</code>
   * @return Whether the dateDays field is set.
   */
  @java.lang.Override
  public boolean hasDateDays() {
    return kindCase_ == 11;
  }
  /**
   * <pre>
   * Date: days since Unix epoch (1970-01-01)
   * </pre>
   *
   * <code>int32 date_days = 11 [json_name = "dateDays"];</code>
   * @return The dateDays.
   */
  @java.lang.Override
  public int getDateDays() {
    if (kindCase_ == 11) {
      return (java.lang.Integer) kind_;
    }
    return 0;
  }

  public static final int TIME_MICROS_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Time: microseconds since midnight
   * </pre>
   *
   * <code>int64 time_micros = 12 [json_name = "timeMicros"];</code>
   * @return Whether the timeMicros field is set.
   */
  @java.lang.Override
  public boolean hasTimeMicros() {
    return kindCase_ == 12;
  }
  /**
   * <pre>
   * Time: microseconds since midnight
   * </pre>
   *
   * <code>int64 time_micros = 12 [json_name = "timeMicros"];</code>
   * @return The timeMicros.
   */
  @java.lang.Override
  public long getTimeMicros() {
    if (kindCase_ == 12) {
      return (java.lang.Long) kind_;
    }
    return 0L;
  }

  public static final int NULL_VAL_FIELD_NUMBER = 20;
  /**
   * <pre>
   * Special values
   * </pre>
   *
   * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
   * @return Whether the nullVal field is set.
   */
  public boolean hasNullVal() {
    return kindCase_ == 20;
  }
  /**
   * <pre>
   * Special values
   * </pre>
   *
   * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
   * @return The enum numeric value on the wire for nullVal.
   */
  public int getNullValValue() {
    if (kindCase_ == 20) {
      return (java.lang.Integer) kind_;
    }
    return 0;
  }
  /**
   * <pre>
   * Special values
   * </pre>
   *
   * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
   * @return The nullVal.
   */
  public datapower.noesis.v1.NullValue getNullVal() {
    if (kindCase_ == 20) {
      datapower.noesis.v1.NullValue result = datapower.noesis.v1.NullValue.forNumber(
          (java.lang.Integer) kind_);
      return result == null ? datapower.noesis.v1.NullValue.UNRECOGNIZED : result;
    }
    return datapower.noesis.v1.NullValue.NULL_VALUE;
  }

  public static final int STRUCT_VAL_FIELD_NUMBER = 21;
  /**
   * <pre>
   * Nested types (for complex schemas)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
   * @return Whether the structVal field is set.
   */
  @java.lang.Override
  public boolean hasStructVal() {
    return kindCase_ == 21;
  }
  /**
   * <pre>
   * Nested types (for complex schemas)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
   * @return The structVal.
   */
  @java.lang.Override
  public datapower.noesis.v1.StructValue getStructVal() {
    if (kindCase_ == 21) {
       return (datapower.noesis.v1.StructValue) kind_;
    }
    return datapower.noesis.v1.StructValue.getDefaultInstance();
  }
  /**
   * <pre>
   * Nested types (for complex schemas)
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.StructValueOrBuilder getStructValOrBuilder() {
    if (kindCase_ == 21) {
       return (datapower.noesis.v1.StructValue) kind_;
    }
    return datapower.noesis.v1.StructValue.getDefaultInstance();
  }

  public static final int LIST_VAL_FIELD_NUMBER = 22;
  /**
   * <pre>
   * Array/list
   * </pre>
   *
   * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
   * @return Whether the listVal field is set.
   */
  @java.lang.Override
  public boolean hasListVal() {
    return kindCase_ == 22;
  }
  /**
   * <pre>
   * Array/list
   * </pre>
   *
   * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
   * @return The listVal.
   */
  @java.lang.Override
  public datapower.noesis.v1.ListValue getListVal() {
    if (kindCase_ == 22) {
       return (datapower.noesis.v1.ListValue) kind_;
    }
    return datapower.noesis.v1.ListValue.getDefaultInstance();
  }
  /**
   * <pre>
   * Array/list
   * </pre>
   *
   * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.ListValueOrBuilder getListValOrBuilder() {
    if (kindCase_ == 22) {
       return (datapower.noesis.v1.ListValue) kind_;
    }
    return datapower.noesis.v1.ListValue.getDefaultInstance();
  }

  public static final int MAP_VAL_FIELD_NUMBER = 23;
  /**
   * <pre>
   * Map/dictionary
   * </pre>
   *
   * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
   * @return Whether the mapVal field is set.
   */
  @java.lang.Override
  public boolean hasMapVal() {
    return kindCase_ == 23;
  }
  /**
   * <pre>
   * Map/dictionary
   * </pre>
   *
   * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
   * @return The mapVal.
   */
  @java.lang.Override
  public datapower.noesis.v1.MapValue getMapVal() {
    if (kindCase_ == 23) {
       return (datapower.noesis.v1.MapValue) kind_;
    }
    return datapower.noesis.v1.MapValue.getDefaultInstance();
  }
  /**
   * <pre>
   * Map/dictionary
   * </pre>
   *
   * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.MapValueOrBuilder getMapValOrBuilder() {
    if (kindCase_ == 23) {
       return (datapower.noesis.v1.MapValue) kind_;
    }
    return datapower.noesis.v1.MapValue.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (kindCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, kind_);
    }
    if (kindCase_ == 2) {
      output.writeInt64(
          2, (long)((java.lang.Long) kind_));
    }
    if (kindCase_ == 3) {
      output.writeInt32(
          3, (int)((java.lang.Integer) kind_));
    }
    if (kindCase_ == 4) {
      output.writeDouble(
          4, (double)((java.lang.Double) kind_));
    }
    if (kindCase_ == 5) {
      output.writeFloat(
          5, (float)((java.lang.Float) kind_));
    }
    if (kindCase_ == 6) {
      output.writeBool(
          6, (boolean)((java.lang.Boolean) kind_));
    }
    if (kindCase_ == 7) {
      output.writeBytes(
          7, (com.google.protobuf.ByteString) kind_);
    }
    if (kindCase_ == 10) {
      output.writeInt64(
          10, (long)((java.lang.Long) kind_));
    }
    if (kindCase_ == 11) {
      output.writeInt32(
          11, (int)((java.lang.Integer) kind_));
    }
    if (kindCase_ == 12) {
      output.writeInt64(
          12, (long)((java.lang.Long) kind_));
    }
    if (kindCase_ == 20) {
      output.writeEnum(20, ((java.lang.Integer) kind_));
    }
    if (kindCase_ == 21) {
      output.writeMessage(21, (datapower.noesis.v1.StructValue) kind_);
    }
    if (kindCase_ == 22) {
      output.writeMessage(22, (datapower.noesis.v1.ListValue) kind_);
    }
    if (kindCase_ == 23) {
      output.writeMessage(23, (datapower.noesis.v1.MapValue) kind_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (kindCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, kind_);
    }
    if (kindCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(
            2, (long)((java.lang.Long) kind_));
    }
    if (kindCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(
            3, (int)((java.lang.Integer) kind_));
    }
    if (kindCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(
            4, (double)((java.lang.Double) kind_));
    }
    if (kindCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(
            5, (float)((java.lang.Float) kind_));
    }
    if (kindCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            6, (boolean)((java.lang.Boolean) kind_));
    }
    if (kindCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(
            7, (com.google.protobuf.ByteString) kind_);
    }
    if (kindCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(
            10, (long)((java.lang.Long) kind_));
    }
    if (kindCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(
            11, (int)((java.lang.Integer) kind_));
    }
    if (kindCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(
            12, (long)((java.lang.Long) kind_));
    }
    if (kindCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(20, ((java.lang.Integer) kind_));
    }
    if (kindCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (datapower.noesis.v1.StructValue) kind_);
    }
    if (kindCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (datapower.noesis.v1.ListValue) kind_);
    }
    if (kindCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (datapower.noesis.v1.MapValue) kind_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.Value)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.Value other = (datapower.noesis.v1.Value) obj;

    if (!getKindCase().equals(other.getKindCase())) return false;
    switch (kindCase_) {
      case 1:
        if (!getStringVal()
            .equals(other.getStringVal())) return false;
        break;
      case 2:
        if (getInt64Val()
            != other.getInt64Val()) return false;
        break;
      case 3:
        if (getInt32Val()
            != other.getInt32Val()) return false;
        break;
      case 4:
        if (java.lang.Double.doubleToLongBits(getDoubleVal())
            != java.lang.Double.doubleToLongBits(
                other.getDoubleVal())) return false;
        break;
      case 5:
        if (java.lang.Float.floatToIntBits(getFloatVal())
            != java.lang.Float.floatToIntBits(
                other.getFloatVal())) return false;
        break;
      case 6:
        if (getBoolVal()
            != other.getBoolVal()) return false;
        break;
      case 7:
        if (!getBytesVal()
            .equals(other.getBytesVal())) return false;
        break;
      case 10:
        if (getTimestampMicros()
            != other.getTimestampMicros()) return false;
        break;
      case 11:
        if (getDateDays()
            != other.getDateDays()) return false;
        break;
      case 12:
        if (getTimeMicros()
            != other.getTimeMicros()) return false;
        break;
      case 20:
        if (getNullValValue()
            != other.getNullValValue()) return false;
        break;
      case 21:
        if (!getStructVal()
            .equals(other.getStructVal())) return false;
        break;
      case 22:
        if (!getListVal()
            .equals(other.getListVal())) return false;
        break;
      case 23:
        if (!getMapVal()
            .equals(other.getMapVal())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (kindCase_) {
      case 1:
        hash = (37 * hash) + STRING_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getStringVal().hashCode();
        break;
      case 2:
        hash = (37 * hash) + INT64_VAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getInt64Val());
        break;
      case 3:
        hash = (37 * hash) + INT32_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getInt32Val();
        break;
      case 4:
        hash = (37 * hash) + DOUBLE_VAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDoubleVal()));
        break;
      case 5:
        hash = (37 * hash) + FLOAT_VAL_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFloatVal());
        break;
      case 6:
        hash = (37 * hash) + BOOL_VAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBoolVal());
        break;
      case 7:
        hash = (37 * hash) + BYTES_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getBytesVal().hashCode();
        break;
      case 10:
        hash = (37 * hash) + TIMESTAMP_MICROS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTimestampMicros());
        break;
      case 11:
        hash = (37 * hash) + DATE_DAYS_FIELD_NUMBER;
        hash = (53 * hash) + getDateDays();
        break;
      case 12:
        hash = (37 * hash) + TIME_MICROS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTimeMicros());
        break;
      case 20:
        hash = (37 * hash) + NULL_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getNullValValue();
        break;
      case 21:
        hash = (37 * hash) + STRUCT_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getStructVal().hashCode();
        break;
      case 22:
        hash = (37 * hash) + LIST_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getListVal().hashCode();
        break;
      case 23:
        hash = (37 * hash) + MAP_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getMapVal().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.Value parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Value parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Value parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Value parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Value parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.Value parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.Value parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.Value parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.Value parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.Value parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.Value parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.Value parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.Value prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Typed value supporting common database types.
   * Designed to map cleanly to Parquet, Arrow, and SQL types.
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.Value}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.Value)
      datapower.noesis.v1.ValueOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Value_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Value_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.Value.class, datapower.noesis.v1.Value.Builder.class);
    }

    // Construct using datapower.noesis.v1.Value.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (structValBuilder_ != null) {
        structValBuilder_.clear();
      }
      if (listValBuilder_ != null) {
        listValBuilder_.clear();
      }
      if (mapValBuilder_ != null) {
        mapValBuilder_.clear();
      }
      kindCase_ = 0;
      kind_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.ConnectorOuterClass.internal_static_datapower_noesis_v1_Value_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.Value getDefaultInstanceForType() {
      return datapower.noesis.v1.Value.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.Value build() {
      datapower.noesis.v1.Value result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.Value buildPartial() {
      datapower.noesis.v1.Value result = new datapower.noesis.v1.Value(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(datapower.noesis.v1.Value result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(datapower.noesis.v1.Value result) {
      result.kindCase_ = kindCase_;
      result.kind_ = this.kind_;
      if (kindCase_ == 21 &&
          structValBuilder_ != null) {
        result.kind_ = structValBuilder_.build();
      }
      if (kindCase_ == 22 &&
          listValBuilder_ != null) {
        result.kind_ = listValBuilder_.build();
      }
      if (kindCase_ == 23 &&
          mapValBuilder_ != null) {
        result.kind_ = mapValBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.Value) {
        return mergeFrom((datapower.noesis.v1.Value)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.Value other) {
      if (other == datapower.noesis.v1.Value.getDefaultInstance()) return this;
      switch (other.getKindCase()) {
        case STRING_VAL: {
          kindCase_ = 1;
          kind_ = other.kind_;
          onChanged();
          break;
        }
        case INT64_VAL: {
          setInt64Val(other.getInt64Val());
          break;
        }
        case INT32_VAL: {
          setInt32Val(other.getInt32Val());
          break;
        }
        case DOUBLE_VAL: {
          setDoubleVal(other.getDoubleVal());
          break;
        }
        case FLOAT_VAL: {
          setFloatVal(other.getFloatVal());
          break;
        }
        case BOOL_VAL: {
          setBoolVal(other.getBoolVal());
          break;
        }
        case BYTES_VAL: {
          setBytesVal(other.getBytesVal());
          break;
        }
        case TIMESTAMP_MICROS: {
          setTimestampMicros(other.getTimestampMicros());
          break;
        }
        case DATE_DAYS: {
          setDateDays(other.getDateDays());
          break;
        }
        case TIME_MICROS: {
          setTimeMicros(other.getTimeMicros());
          break;
        }
        case NULL_VAL: {
          setNullValValue(other.getNullValValue());
          break;
        }
        case STRUCT_VAL: {
          mergeStructVal(other.getStructVal());
          break;
        }
        case LIST_VAL: {
          mergeListVal(other.getListVal());
          break;
        }
        case MAP_VAL: {
          mergeMapVal(other.getMapVal());
          break;
        }
        case KIND_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              kindCase_ = 1;
              kind_ = s;
              break;
            } // case 10
            case 16: {
              kind_ = input.readInt64();
              kindCase_ = 2;
              break;
            } // case 16
            case 24: {
              kind_ = input.readInt32();
              kindCase_ = 3;
              break;
            } // case 24
            case 33: {
              kind_ = input.readDouble();
              kindCase_ = 4;
              break;
            } // case 33
            case 45: {
              kind_ = input.readFloat();
              kindCase_ = 5;
              break;
            } // case 45
            case 48: {
              kind_ = input.readBool();
              kindCase_ = 6;
              break;
            } // case 48
            case 58: {
              kind_ = input.readBytes();
              kindCase_ = 7;
              break;
            } // case 58
            case 80: {
              kind_ = input.readInt64();
              kindCase_ = 10;
              break;
            } // case 80
            case 88: {
              kind_ = input.readInt32();
              kindCase_ = 11;
              break;
            } // case 88
            case 96: {
              kind_ = input.readInt64();
              kindCase_ = 12;
              break;
            } // case 96
            case 160: {
              int rawValue = input.readEnum();
              kindCase_ = 20;
              kind_ = rawValue;
              break;
            } // case 160
            case 170: {
              input.readMessage(
                  getStructValFieldBuilder().getBuilder(),
                  extensionRegistry);
              kindCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getListValFieldBuilder().getBuilder(),
                  extensionRegistry);
              kindCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getMapValFieldBuilder().getBuilder(),
                  extensionRegistry);
              kindCase_ = 23;
              break;
            } // case 186
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public KindCase
        getKindCase() {
      return KindCase.forNumber(
          kindCase_);
    }

    public Builder clearKind() {
      kindCase_ = 0;
      kind_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <pre>
     * Primitive types
     * </pre>
     *
     * <code>string string_val = 1 [json_name = "stringVal"];</code>
     * @return Whether the stringVal field is set.
     */
    @java.lang.Override
    public boolean hasStringVal() {
      return kindCase_ == 1;
    }
    /**
     * <pre>
     * Primitive types
     * </pre>
     *
     * <code>string string_val = 1 [json_name = "stringVal"];</code>
     * @return The stringVal.
     */
    @java.lang.Override
    public java.lang.String getStringVal() {
      java.lang.Object ref = "";
      if (kindCase_ == 1) {
        ref = kind_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (kindCase_ == 1) {
          kind_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Primitive types
     * </pre>
     *
     * <code>string string_val = 1 [json_name = "stringVal"];</code>
     * @return The bytes for stringVal.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStringValBytes() {
      java.lang.Object ref = "";
      if (kindCase_ == 1) {
        ref = kind_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (kindCase_ == 1) {
          kind_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Primitive types
     * </pre>
     *
     * <code>string string_val = 1 [json_name = "stringVal"];</code>
     * @param value The stringVal to set.
     * @return This builder for chaining.
     */
    public Builder setStringVal(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      kindCase_ = 1;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Primitive types
     * </pre>
     *
     * <code>string string_val = 1 [json_name = "stringVal"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStringVal() {
      if (kindCase_ == 1) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Primitive types
     * </pre>
     *
     * <code>string string_val = 1 [json_name = "stringVal"];</code>
     * @param value The bytes for stringVal to set.
     * @return This builder for chaining.
     */
    public Builder setStringValBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      kindCase_ = 1;
      kind_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>int64 int64_val = 2 [json_name = "int64Val"];</code>
     * @return Whether the int64Val field is set.
     */
    public boolean hasInt64Val() {
      return kindCase_ == 2;
    }
    /**
     * <code>int64 int64_val = 2 [json_name = "int64Val"];</code>
     * @return The int64Val.
     */
    public long getInt64Val() {
      if (kindCase_ == 2) {
        return (java.lang.Long) kind_;
      }
      return 0L;
    }
    /**
     * <code>int64 int64_val = 2 [json_name = "int64Val"];</code>
     * @param value The int64Val to set.
     * @return This builder for chaining.
     */
    public Builder setInt64Val(long value) {

      kindCase_ = 2;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 int64_val = 2 [json_name = "int64Val"];</code>
     * @return This builder for chaining.
     */
    public Builder clearInt64Val() {
      if (kindCase_ == 2) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int32 int32_val = 3 [json_name = "int32Val"];</code>
     * @return Whether the int32Val field is set.
     */
    public boolean hasInt32Val() {
      return kindCase_ == 3;
    }
    /**
     * <code>int32 int32_val = 3 [json_name = "int32Val"];</code>
     * @return The int32Val.
     */
    public int getInt32Val() {
      if (kindCase_ == 3) {
        return (java.lang.Integer) kind_;
      }
      return 0;
    }
    /**
     * <code>int32 int32_val = 3 [json_name = "int32Val"];</code>
     * @param value The int32Val to set.
     * @return This builder for chaining.
     */
    public Builder setInt32Val(int value) {

      kindCase_ = 3;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 int32_val = 3 [json_name = "int32Val"];</code>
     * @return This builder for chaining.
     */
    public Builder clearInt32Val() {
      if (kindCase_ == 3) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>double double_val = 4 [json_name = "doubleVal"];</code>
     * @return Whether the doubleVal field is set.
     */
    public boolean hasDoubleVal() {
      return kindCase_ == 4;
    }
    /**
     * <code>double double_val = 4 [json_name = "doubleVal"];</code>
     * @return The doubleVal.
     */
    public double getDoubleVal() {
      if (kindCase_ == 4) {
        return (java.lang.Double) kind_;
      }
      return 0D;
    }
    /**
     * <code>double double_val = 4 [json_name = "doubleVal"];</code>
     * @param value The doubleVal to set.
     * @return This builder for chaining.
     */
    public Builder setDoubleVal(double value) {

      kindCase_ = 4;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double double_val = 4 [json_name = "doubleVal"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDoubleVal() {
      if (kindCase_ == 4) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>float float_val = 5 [json_name = "floatVal"];</code>
     * @return Whether the floatVal field is set.
     */
    public boolean hasFloatVal() {
      return kindCase_ == 5;
    }
    /**
     * <code>float float_val = 5 [json_name = "floatVal"];</code>
     * @return The floatVal.
     */
    public float getFloatVal() {
      if (kindCase_ == 5) {
        return (java.lang.Float) kind_;
      }
      return 0F;
    }
    /**
     * <code>float float_val = 5 [json_name = "floatVal"];</code>
     * @param value The floatVal to set.
     * @return This builder for chaining.
     */
    public Builder setFloatVal(float value) {

      kindCase_ = 5;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float float_val = 5 [json_name = "floatVal"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFloatVal() {
      if (kindCase_ == 5) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>bool bool_val = 6 [json_name = "boolVal"];</code>
     * @return Whether the boolVal field is set.
     */
    public boolean hasBoolVal() {
      return kindCase_ == 6;
    }
    /**
     * <code>bool bool_val = 6 [json_name = "boolVal"];</code>
     * @return The boolVal.
     */
    public boolean getBoolVal() {
      if (kindCase_ == 6) {
        return (java.lang.Boolean) kind_;
      }
      return false;
    }
    /**
     * <code>bool bool_val = 6 [json_name = "boolVal"];</code>
     * @param value The boolVal to set.
     * @return This builder for chaining.
     */
    public Builder setBoolVal(boolean value) {

      kindCase_ = 6;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool bool_val = 6 [json_name = "boolVal"];</code>
     * @return This builder for chaining.
     */
    public Builder clearBoolVal() {
      if (kindCase_ == 6) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>bytes bytes_val = 7 [json_name = "bytesVal"];</code>
     * @return Whether the bytesVal field is set.
     */
    public boolean hasBytesVal() {
      return kindCase_ == 7;
    }
    /**
     * <code>bytes bytes_val = 7 [json_name = "bytesVal"];</code>
     * @return The bytesVal.
     */
    public com.google.protobuf.ByteString getBytesVal() {
      if (kindCase_ == 7) {
        return (com.google.protobuf.ByteString) kind_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <code>bytes bytes_val = 7 [json_name = "bytesVal"];</code>
     * @param value The bytesVal to set.
     * @return This builder for chaining.
     */
    public Builder setBytesVal(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      kindCase_ = 7;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bytes bytes_val = 7 [json_name = "bytesVal"];</code>
     * @return This builder for chaining.
     */
    public Builder clearBytesVal() {
      if (kindCase_ == 7) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * Temporal types (microseconds precision)
     * </pre>
     *
     * <code>int64 timestamp_micros = 10 [json_name = "timestampMicros"];</code>
     * @return Whether the timestampMicros field is set.
     */
    public boolean hasTimestampMicros() {
      return kindCase_ == 10;
    }
    /**
     * <pre>
     * Temporal types (microseconds precision)
     * </pre>
     *
     * <code>int64 timestamp_micros = 10 [json_name = "timestampMicros"];</code>
     * @return The timestampMicros.
     */
    public long getTimestampMicros() {
      if (kindCase_ == 10) {
        return (java.lang.Long) kind_;
      }
      return 0L;
    }
    /**
     * <pre>
     * Temporal types (microseconds precision)
     * </pre>
     *
     * <code>int64 timestamp_micros = 10 [json_name = "timestampMicros"];</code>
     * @param value The timestampMicros to set.
     * @return This builder for chaining.
     */
    public Builder setTimestampMicros(long value) {

      kindCase_ = 10;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Temporal types (microseconds precision)
     * </pre>
     *
     * <code>int64 timestamp_micros = 10 [json_name = "timestampMicros"];</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestampMicros() {
      if (kindCase_ == 10) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * Date: days since Unix epoch (1970-01-01)
     * </pre>
     *
     * <code>int32 date_days = 11 [json_name = "dateDays"];</code>
     * @return Whether the dateDays field is set.
     */
    public boolean hasDateDays() {
      return kindCase_ == 11;
    }
    /**
     * <pre>
     * Date: days since Unix epoch (1970-01-01)
     * </pre>
     *
     * <code>int32 date_days = 11 [json_name = "dateDays"];</code>
     * @return The dateDays.
     */
    public int getDateDays() {
      if (kindCase_ == 11) {
        return (java.lang.Integer) kind_;
      }
      return 0;
    }
    /**
     * <pre>
     * Date: days since Unix epoch (1970-01-01)
     * </pre>
     *
     * <code>int32 date_days = 11 [json_name = "dateDays"];</code>
     * @param value The dateDays to set.
     * @return This builder for chaining.
     */
    public Builder setDateDays(int value) {

      kindCase_ = 11;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Date: days since Unix epoch (1970-01-01)
     * </pre>
     *
     * <code>int32 date_days = 11 [json_name = "dateDays"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDateDays() {
      if (kindCase_ == 11) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * Time: microseconds since midnight
     * </pre>
     *
     * <code>int64 time_micros = 12 [json_name = "timeMicros"];</code>
     * @return Whether the timeMicros field is set.
     */
    public boolean hasTimeMicros() {
      return kindCase_ == 12;
    }
    /**
     * <pre>
     * Time: microseconds since midnight
     * </pre>
     *
     * <code>int64 time_micros = 12 [json_name = "timeMicros"];</code>
     * @return The timeMicros.
     */
    public long getTimeMicros() {
      if (kindCase_ == 12) {
        return (java.lang.Long) kind_;
      }
      return 0L;
    }
    /**
     * <pre>
     * Time: microseconds since midnight
     * </pre>
     *
     * <code>int64 time_micros = 12 [json_name = "timeMicros"];</code>
     * @param value The timeMicros to set.
     * @return This builder for chaining.
     */
    public Builder setTimeMicros(long value) {

      kindCase_ = 12;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Time: microseconds since midnight
     * </pre>
     *
     * <code>int64 time_micros = 12 [json_name = "timeMicros"];</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeMicros() {
      if (kindCase_ == 12) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * Special values
     * </pre>
     *
     * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
     * @return Whether the nullVal field is set.
     */
    @java.lang.Override
    public boolean hasNullVal() {
      return kindCase_ == 20;
    }
    /**
     * <pre>
     * Special values
     * </pre>
     *
     * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
     * @return The enum numeric value on the wire for nullVal.
     */
    @java.lang.Override
    public int getNullValValue() {
      if (kindCase_ == 20) {
        return ((java.lang.Integer) kind_).intValue();
      }
      return 0;
    }
    /**
     * <pre>
     * Special values
     * </pre>
     *
     * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
     * @param value The enum numeric value on the wire for nullVal to set.
     * @return This builder for chaining.
     */
    public Builder setNullValValue(int value) {
      kindCase_ = 20;
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Special values
     * </pre>
     *
     * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
     * @return The nullVal.
     */
    @java.lang.Override
    public datapower.noesis.v1.NullValue getNullVal() {
      if (kindCase_ == 20) {
        datapower.noesis.v1.NullValue result = datapower.noesis.v1.NullValue.forNumber(
            (java.lang.Integer) kind_);
        return result == null ? datapower.noesis.v1.NullValue.UNRECOGNIZED : result;
      }
      return datapower.noesis.v1.NullValue.NULL_VALUE;
    }
    /**
     * <pre>
     * Special values
     * </pre>
     *
     * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
     * @param value The nullVal to set.
     * @return This builder for chaining.
     */
    public Builder setNullVal(datapower.noesis.v1.NullValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      kindCase_ = 20;
      kind_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Special values
     * </pre>
     *
     * <code>.datapower.noesis.v1.NullValue null_val = 20 [json_name = "nullVal"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNullVal() {
      if (kindCase_ == 20) {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.StructValue, datapower.noesis.v1.StructValue.Builder, datapower.noesis.v1.StructValueOrBuilder> structValBuilder_;
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     * @return Whether the structVal field is set.
     */
    @java.lang.Override
    public boolean hasStructVal() {
      return kindCase_ == 21;
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     * @return The structVal.
     */
    @java.lang.Override
    public datapower.noesis.v1.StructValue getStructVal() {
      if (structValBuilder_ == null) {
        if (kindCase_ == 21) {
          return (datapower.noesis.v1.StructValue) kind_;
        }
        return datapower.noesis.v1.StructValue.getDefaultInstance();
      } else {
        if (kindCase_ == 21) {
          return structValBuilder_.getMessage();
        }
        return datapower.noesis.v1.StructValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    public Builder setStructVal(datapower.noesis.v1.StructValue value) {
      if (structValBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;
        onChanged();
      } else {
        structValBuilder_.setMessage(value);
      }
      kindCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    public Builder setStructVal(
        datapower.noesis.v1.StructValue.Builder builderForValue) {
      if (structValBuilder_ == null) {
        kind_ = builderForValue.build();
        onChanged();
      } else {
        structValBuilder_.setMessage(builderForValue.build());
      }
      kindCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    public Builder mergeStructVal(datapower.noesis.v1.StructValue value) {
      if (structValBuilder_ == null) {
        if (kindCase_ == 21 &&
            kind_ != datapower.noesis.v1.StructValue.getDefaultInstance()) {
          kind_ = datapower.noesis.v1.StructValue.newBuilder((datapower.noesis.v1.StructValue) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }
        onChanged();
      } else {
        if (kindCase_ == 21) {
          structValBuilder_.mergeFrom(value);
        } else {
          structValBuilder_.setMessage(value);
        }
      }
      kindCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    public Builder clearStructVal() {
      if (structValBuilder_ == null) {
        if (kindCase_ == 21) {
          kindCase_ = 0;
          kind_ = null;
          onChanged();
        }
      } else {
        if (kindCase_ == 21) {
          kindCase_ = 0;
          kind_ = null;
        }
        structValBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    public datapower.noesis.v1.StructValue.Builder getStructValBuilder() {
      return getStructValFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    @java.lang.Override
    public datapower.noesis.v1.StructValueOrBuilder getStructValOrBuilder() {
      if ((kindCase_ == 21) && (structValBuilder_ != null)) {
        return structValBuilder_.getMessageOrBuilder();
      } else {
        if (kindCase_ == 21) {
          return (datapower.noesis.v1.StructValue) kind_;
        }
        return datapower.noesis.v1.StructValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested types (for complex schemas)
     * </pre>
     *
     * <code>.datapower.noesis.v1.StructValue struct_val = 21 [json_name = "structVal"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.StructValue, datapower.noesis.v1.StructValue.Builder, datapower.noesis.v1.StructValueOrBuilder> 
        getStructValFieldBuilder() {
      if (structValBuilder_ == null) {
        if (!(kindCase_ == 21)) {
          kind_ = datapower.noesis.v1.StructValue.getDefaultInstance();
        }
        structValBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.StructValue, datapower.noesis.v1.StructValue.Builder, datapower.noesis.v1.StructValueOrBuilder>(
                (datapower.noesis.v1.StructValue) kind_,
                getParentForChildren(),
                isClean());
        kind_ = null;
      }
      kindCase_ = 21;
      onChanged();
      return structValBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.ListValue, datapower.noesis.v1.ListValue.Builder, datapower.noesis.v1.ListValueOrBuilder> listValBuilder_;
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     * @return Whether the listVal field is set.
     */
    @java.lang.Override
    public boolean hasListVal() {
      return kindCase_ == 22;
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     * @return The listVal.
     */
    @java.lang.Override
    public datapower.noesis.v1.ListValue getListVal() {
      if (listValBuilder_ == null) {
        if (kindCase_ == 22) {
          return (datapower.noesis.v1.ListValue) kind_;
        }
        return datapower.noesis.v1.ListValue.getDefaultInstance();
      } else {
        if (kindCase_ == 22) {
          return listValBuilder_.getMessage();
        }
        return datapower.noesis.v1.ListValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    public Builder setListVal(datapower.noesis.v1.ListValue value) {
      if (listValBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;
        onChanged();
      } else {
        listValBuilder_.setMessage(value);
      }
      kindCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    public Builder setListVal(
        datapower.noesis.v1.ListValue.Builder builderForValue) {
      if (listValBuilder_ == null) {
        kind_ = builderForValue.build();
        onChanged();
      } else {
        listValBuilder_.setMessage(builderForValue.build());
      }
      kindCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    public Builder mergeListVal(datapower.noesis.v1.ListValue value) {
      if (listValBuilder_ == null) {
        if (kindCase_ == 22 &&
            kind_ != datapower.noesis.v1.ListValue.getDefaultInstance()) {
          kind_ = datapower.noesis.v1.ListValue.newBuilder((datapower.noesis.v1.ListValue) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }
        onChanged();
      } else {
        if (kindCase_ == 22) {
          listValBuilder_.mergeFrom(value);
        } else {
          listValBuilder_.setMessage(value);
        }
      }
      kindCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    public Builder clearListVal() {
      if (listValBuilder_ == null) {
        if (kindCase_ == 22) {
          kindCase_ = 0;
          kind_ = null;
          onChanged();
        }
      } else {
        if (kindCase_ == 22) {
          kindCase_ = 0;
          kind_ = null;
        }
        listValBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    public datapower.noesis.v1.ListValue.Builder getListValBuilder() {
      return getListValFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    @java.lang.Override
    public datapower.noesis.v1.ListValueOrBuilder getListValOrBuilder() {
      if ((kindCase_ == 22) && (listValBuilder_ != null)) {
        return listValBuilder_.getMessageOrBuilder();
      } else {
        if (kindCase_ == 22) {
          return (datapower.noesis.v1.ListValue) kind_;
        }
        return datapower.noesis.v1.ListValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Array/list
     * </pre>
     *
     * <code>.datapower.noesis.v1.ListValue list_val = 22 [json_name = "listVal"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.ListValue, datapower.noesis.v1.ListValue.Builder, datapower.noesis.v1.ListValueOrBuilder> 
        getListValFieldBuilder() {
      if (listValBuilder_ == null) {
        if (!(kindCase_ == 22)) {
          kind_ = datapower.noesis.v1.ListValue.getDefaultInstance();
        }
        listValBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.ListValue, datapower.noesis.v1.ListValue.Builder, datapower.noesis.v1.ListValueOrBuilder>(
                (datapower.noesis.v1.ListValue) kind_,
                getParentForChildren(),
                isClean());
        kind_ = null;
      }
      kindCase_ = 22;
      onChanged();
      return listValBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.MapValue, datapower.noesis.v1.MapValue.Builder, datapower.noesis.v1.MapValueOrBuilder> mapValBuilder_;
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     * @return Whether the mapVal field is set.
     */
    @java.lang.Override
    public boolean hasMapVal() {
      return kindCase_ == 23;
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     * @return The mapVal.
     */
    @java.lang.Override
    public datapower.noesis.v1.MapValue getMapVal() {
      if (mapValBuilder_ == null) {
        if (kindCase_ == 23) {
          return (datapower.noesis.v1.MapValue) kind_;
        }
        return datapower.noesis.v1.MapValue.getDefaultInstance();
      } else {
        if (kindCase_ == 23) {
          return mapValBuilder_.getMessage();
        }
        return datapower.noesis.v1.MapValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    public Builder setMapVal(datapower.noesis.v1.MapValue value) {
      if (mapValBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;
        onChanged();
      } else {
        mapValBuilder_.setMessage(value);
      }
      kindCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    public Builder setMapVal(
        datapower.noesis.v1.MapValue.Builder builderForValue) {
      if (mapValBuilder_ == null) {
        kind_ = builderForValue.build();
        onChanged();
      } else {
        mapValBuilder_.setMessage(builderForValue.build());
      }
      kindCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    public Builder mergeMapVal(datapower.noesis.v1.MapValue value) {
      if (mapValBuilder_ == null) {
        if (kindCase_ == 23 &&
            kind_ != datapower.noesis.v1.MapValue.getDefaultInstance()) {
          kind_ = datapower.noesis.v1.MapValue.newBuilder((datapower.noesis.v1.MapValue) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }
        onChanged();
      } else {
        if (kindCase_ == 23) {
          mapValBuilder_.mergeFrom(value);
        } else {
          mapValBuilder_.setMessage(value);
        }
      }
      kindCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    public Builder clearMapVal() {
      if (mapValBuilder_ == null) {
        if (kindCase_ == 23) {
          kindCase_ = 0;
          kind_ = null;
          onChanged();
        }
      } else {
        if (kindCase_ == 23) {
          kindCase_ = 0;
          kind_ = null;
        }
        mapValBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    public datapower.noesis.v1.MapValue.Builder getMapValBuilder() {
      return getMapValFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    @java.lang.Override
    public datapower.noesis.v1.MapValueOrBuilder getMapValOrBuilder() {
      if ((kindCase_ == 23) && (mapValBuilder_ != null)) {
        return mapValBuilder_.getMessageOrBuilder();
      } else {
        if (kindCase_ == 23) {
          return (datapower.noesis.v1.MapValue) kind_;
        }
        return datapower.noesis.v1.MapValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Map/dictionary
     * </pre>
     *
     * <code>.datapower.noesis.v1.MapValue map_val = 23 [json_name = "mapVal"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        datapower.noesis.v1.MapValue, datapower.noesis.v1.MapValue.Builder, datapower.noesis.v1.MapValueOrBuilder> 
        getMapValFieldBuilder() {
      if (mapValBuilder_ == null) {
        if (!(kindCase_ == 23)) {
          kind_ = datapower.noesis.v1.MapValue.getDefaultInstance();
        }
        mapValBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            datapower.noesis.v1.MapValue, datapower.noesis.v1.MapValue.Builder, datapower.noesis.v1.MapValueOrBuilder>(
                (datapower.noesis.v1.MapValue) kind_,
                getParentForChildren(),
                isClean());
        kind_ = null;
      }
      kindCase_ = 23;
      onChanged();
      return mapValBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.Value)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.Value)
  private static final datapower.noesis.v1.Value DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.Value();
  }

  public static datapower.noesis.v1.Value getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Value>
      PARSER = new com.google.protobuf.AbstractParser<Value>() {
    @java.lang.Override
    public Value parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Value> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Value> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.Value getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

