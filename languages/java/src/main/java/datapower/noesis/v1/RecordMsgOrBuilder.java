// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface RecordMsgOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.RecordMsg)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * e.g., "Part" or "BOMLink"
   * </pre>
   *
   * <code>string entity = 1 [json_name = "entity"];</code>
   * @return The entity.
   */
  java.lang.String getEntity();
  /**
   * <pre>
   * e.g., "Part" or "BOMLink"
   * </pre>
   *
   * <code>string entity = 1 [json_name = "entity"];</code>
   * @return The bytes for entity.
   */
  com.google.protobuf.ByteString
      getEntityBytes();

  /**
   * <pre>
   * The actual row data (typed columns)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Row data = 2 [json_name = "data"];</code>
   * @return Whether the data field is set.
   */
  boolean hasData();
  /**
   * <pre>
   * The actual row data (typed columns)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Row data = 2 [json_name = "data"];</code>
   * @return The data.
   */
  datapower.noesis.v1.Row getData();
  /**
   * <pre>
   * The actual row data (typed columns)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Row data = 2 [json_name = "data"];</code>
   */
  datapower.noesis.v1.RowOrBuilder getDataOrBuilder();

  /**
   * <pre>
   * UPSERT/DELETE
   * </pre>
   *
   * <code>.datapower.noesis.v1.Op op = 3 [json_name = "op"];</code>
   * @return The enum numeric value on the wire for op.
   */
  int getOpValue();
  /**
   * <pre>
   * UPSERT/DELETE
   * </pre>
   *
   * <code>.datapower.noesis.v1.Op op = 3 [json_name = "op"];</code>
   * @return The op.
   */
  datapower.noesis.v1.Op getOp();

  /**
   * <pre>
   * Source event timestamp (epoch millis)
   * </pre>
   *
   * <code>int64 event_time_ms = 4 [json_name = "eventTimeMs"];</code>
   * @return The eventTimeMs.
   */
  long getEventTimeMs();

  /**
   * <pre>
   * Schema version identifier
   * </pre>
   *
   * <code>string schema_id = 5 [json_name = "schemaId"];</code>
   * @return The schemaId.
   */
  java.lang.String getSchemaId();
  /**
   * <pre>
   * Schema version identifier
   * </pre>
   *
   * <code>string schema_id = 5 [json_name = "schemaId"];</code>
   * @return The bytes for schemaId.
   */
  com.google.protobuf.ByteString
      getSchemaIdBytes();

  /**
   * <pre>
   * For subgraph: group all records belonging to the same head
   * </pre>
   *
   * <code>string group_id = 6 [json_name = "groupId"];</code>
   * @return The groupId.
   */
  java.lang.String getGroupId();
  /**
   * <pre>
   * For subgraph: group all records belonging to the same head
   * </pre>
   *
   * <code>string group_id = 6 [json_name = "groupId"];</code>
   * @return The bytes for groupId.
   */
  com.google.protobuf.ByteString
      getGroupIdBytes();
}
