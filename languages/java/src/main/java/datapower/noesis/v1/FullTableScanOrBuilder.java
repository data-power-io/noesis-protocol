// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface FullTableScanOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.FullTableScan)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Entity name (NODE or LINK)
   * </pre>
   *
   * <code>string entity = 1 [json_name = "entity"];</code>
   * @return The entity.
   */
  java.lang.String getEntity();
  /**
   * <pre>
   * Entity name (NODE or LINK)
   * </pre>
   *
   * <code>string entity = 1 [json_name = "entity"];</code>
   * @return The bytes for entity.
   */
  com.google.protobuf.ByteString
      getEntityBytes();

  /**
   * <pre>
   * Opaque cursor for resume (page token, last_pk, etc.)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Cursor resume_from = 2 [json_name = "resumeFrom"];</code>
   * @return Whether the resumeFrom field is set.
   */
  boolean hasResumeFrom();
  /**
   * <pre>
   * Opaque cursor for resume (page token, last_pk, etc.)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Cursor resume_from = 2 [json_name = "resumeFrom"];</code>
   * @return The resumeFrom.
   */
  datapower.noesis.v1.Cursor getResumeFrom();
  /**
   * <pre>
   * Opaque cursor for resume (page token, last_pk, etc.)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Cursor resume_from = 2 [json_name = "resumeFrom"];</code>
   */
  datapower.noesis.v1.CursorOrBuilder getResumeFromOrBuilder();

  /**
   * <pre>
   * Optional server-side filter
   * </pre>
   *
   * <code>.datapower.noesis.v1.Filter filter = 3 [json_name = "filter"];</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <pre>
   * Optional server-side filter
   * </pre>
   *
   * <code>.datapower.noesis.v1.Filter filter = 3 [json_name = "filter"];</code>
   * @return The filter.
   */
  datapower.noesis.v1.Filter getFilter();
  /**
   * <pre>
   * Optional server-side filter
   * </pre>
   *
   * <code>.datapower.noesis.v1.Filter filter = 3 [json_name = "filter"];</code>
   */
  datapower.noesis.v1.FilterOrBuilder getFilterOrBuilder();

  /**
   * <pre>
   * Stable ordering (e.g., primary key asc)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Ordering ordering = 4 [json_name = "ordering"];</code>
   * @return Whether the ordering field is set.
   */
  boolean hasOrdering();
  /**
   * <pre>
   * Stable ordering (e.g., primary key asc)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Ordering ordering = 4 [json_name = "ordering"];</code>
   * @return The ordering.
   */
  datapower.noesis.v1.Ordering getOrdering();
  /**
   * <pre>
   * Stable ordering (e.g., primary key asc)
   * </pre>
   *
   * <code>.datapower.noesis.v1.Ordering ordering = 4 [json_name = "ordering"];</code>
   */
  datapower.noesis.v1.OrderingOrBuilder getOrderingOrBuilder();

  /**
   * <pre>
   * How to ensure consistency
   * </pre>
   *
   * <code>.datapower.noesis.v1.SnapshotOptions snapshot = 5 [json_name = "snapshot"];</code>
   * @return Whether the snapshot field is set.
   */
  boolean hasSnapshot();
  /**
   * <pre>
   * How to ensure consistency
   * </pre>
   *
   * <code>.datapower.noesis.v1.SnapshotOptions snapshot = 5 [json_name = "snapshot"];</code>
   * @return The snapshot.
   */
  datapower.noesis.v1.SnapshotOptions getSnapshot();
  /**
   * <pre>
   * How to ensure consistency
   * </pre>
   *
   * <code>.datapower.noesis.v1.SnapshotOptions snapshot = 5 [json_name = "snapshot"];</code>
   */
  datapower.noesis.v1.SnapshotOptionsOrBuilder getSnapshotOrBuilder();
}
