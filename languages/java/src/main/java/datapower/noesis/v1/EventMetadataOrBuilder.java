// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/patch_events.proto

package datapower.noesis.v1;

public interface EventMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.EventMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Pipeline that produced this event
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The pipelineName.
   */
  java.lang.String getPipelineName();
  /**
   * <pre>
   * Pipeline that produced this event
   * </pre>
   *
   * <code>string pipeline_name = 1 [json_name = "pipelineName"];</code>
   * @return The bytes for pipelineName.
   */
  com.google.protobuf.ByteString
      getPipelineNameBytes();

  /**
   * <pre>
   * Job that produced this event (streaming or batch job name)
   * </pre>
   *
   * <code>string job_name = 2 [json_name = "jobName"];</code>
   * @return The jobName.
   */
  java.lang.String getJobName();
  /**
   * <pre>
   * Job that produced this event (streaming or batch job name)
   * </pre>
   *
   * <code>string job_name = 2 [json_name = "jobName"];</code>
   * @return The bytes for jobName.
   */
  com.google.protobuf.ByteString
      getJobNameBytes();

  /**
   * <pre>
   * Job type (streaming or batch)
   * </pre>
   *
   * <code>.datapower.noesis.v1.JobType job_type = 3 [json_name = "jobType"];</code>
   * @return The enum numeric value on the wire for jobType.
   */
  int getJobTypeValue();
  /**
   * <pre>
   * Job type (streaming or batch)
   * </pre>
   *
   * <code>.datapower.noesis.v1.JobType job_type = 3 [json_name = "jobType"];</code>
   * @return The jobType.
   */
  datapower.noesis.v1.JobType getJobType();

  /**
   * <pre>
   * When the event was produced (Flink processing time)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp produced_at = 4 [json_name = "producedAt"];</code>
   * @return Whether the producedAt field is set.
   */
  boolean hasProducedAt();
  /**
   * <pre>
   * When the event was produced (Flink processing time)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp produced_at = 4 [json_name = "producedAt"];</code>
   * @return The producedAt.
   */
  com.google.protobuf.Timestamp getProducedAt();
  /**
   * <pre>
   * When the event was produced (Flink processing time)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp produced_at = 4 [json_name = "producedAt"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getProducedAtOrBuilder();

  /**
   * <pre>
   * Event time (for streaming events, based on source data timestamp)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];</code>
   * @return Whether the eventTime field is set.
   */
  boolean hasEventTime();
  /**
   * <pre>
   * Event time (for streaming events, based on source data timestamp)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];</code>
   * @return The eventTime.
   */
  com.google.protobuf.Timestamp getEventTime();
  /**
   * <pre>
   * Event time (for streaming events, based on source data timestamp)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp event_time = 5 [json_name = "eventTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getEventTimeOrBuilder();

  /**
   * <pre>
   * Watermark (for streaming events)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp watermark = 6 [json_name = "watermark"];</code>
   * @return Whether the watermark field is set.
   */
  boolean hasWatermark();
  /**
   * <pre>
   * Watermark (for streaming events)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp watermark = 6 [json_name = "watermark"];</code>
   * @return The watermark.
   */
  com.google.protobuf.Timestamp getWatermark();
  /**
   * <pre>
   * Watermark (for streaming events)
   * </pre>
   *
   * <code>.google.protobuf.Timestamp watermark = 6 [json_name = "watermark"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getWatermarkOrBuilder();

  /**
   * <pre>
   * Execution ID (workflow run ID that produced this event)
   * </pre>
   *
   * <code>string execution_id = 7 [json_name = "executionId"];</code>
   * @return The executionId.
   */
  java.lang.String getExecutionId();
  /**
   * <pre>
   * Execution ID (workflow run ID that produced this event)
   * </pre>
   *
   * <code>string execution_id = 7 [json_name = "executionId"];</code>
   * @return The bytes for executionId.
   */
  com.google.protobuf.ByteString
      getExecutionIdBytes();

  /**
   * <pre>
   * Kafka partition this event was written to
   * </pre>
   *
   * <code>int32 kafka_partition = 8 [json_name = "kafkaPartition"];</code>
   * @return The kafkaPartition.
   */
  int getKafkaPartition();

  /**
   * <pre>
   * Kafka offset
   * </pre>
   *
   * <code>int64 kafka_offset = 9 [json_name = "kafkaOffset"];</code>
   * @return The kafkaOffset.
   */
  long getKafkaOffset();
}
