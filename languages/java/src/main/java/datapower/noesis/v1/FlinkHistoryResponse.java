// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/enrichment_service.proto

package datapower.noesis.v1;

/**
 * <pre>
 * Flink-specific history response
 * </pre>
 *
 * Protobuf type {@code datapower.noesis.v1.FlinkHistoryResponse}
 */
public final class FlinkHistoryResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:datapower.noesis.v1.FlinkHistoryResponse)
    FlinkHistoryResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FlinkHistoryResponse.newBuilder() to construct.
  private FlinkHistoryResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FlinkHistoryResponse() {
    records_ = java.util.Collections.emptyList();
    error_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FlinkHistoryResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return datapower.noesis.v1.FlinkEnrichmentServiceProto.internal_static_datapower_noesis_v1_FlinkHistoryResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return datapower.noesis.v1.FlinkEnrichmentServiceProto.internal_static_datapower_noesis_v1_FlinkHistoryResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            datapower.noesis.v1.FlinkHistoryResponse.class, datapower.noesis.v1.FlinkHistoryResponse.Builder.class);
  }

  public static final int RECORDS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<datapower.noesis.v1.FlinkHistoricalRecord> records_;
  /**
   * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
   */
  @java.lang.Override
  public java.util.List<datapower.noesis.v1.FlinkHistoricalRecord> getRecordsList() {
    return records_;
  }
  /**
   * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends datapower.noesis.v1.FlinkHistoricalRecordOrBuilder> 
      getRecordsOrBuilderList() {
    return records_;
  }
  /**
   * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
   */
  @java.lang.Override
  public int getRecordsCount() {
    return records_.size();
  }
  /**
   * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.FlinkHistoricalRecord getRecords(int index) {
    return records_.get(index);
  }
  /**
   * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
   */
  @java.lang.Override
  public datapower.noesis.v1.FlinkHistoricalRecordOrBuilder getRecordsOrBuilder(
      int index) {
    return records_.get(index);
  }

  public static final int ERROR_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object error_ = "";
  /**
   * <code>string error = 2 [json_name = "error"];</code>
   * @return The error.
   */
  @java.lang.Override
  public java.lang.String getError() {
    java.lang.Object ref = error_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      error_ = s;
      return s;
    }
  }
  /**
   * <code>string error = 2 [json_name = "error"];</code>
   * @return The bytes for error.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getErrorBytes() {
    java.lang.Object ref = error_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      error_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int QUERY_TIME_MS_FIELD_NUMBER = 3;
  private long queryTimeMs_ = 0L;
  /**
   * <pre>
   * Flink query execution time
   * </pre>
   *
   * <code>int64 query_time_ms = 3 [json_name = "queryTimeMs"];</code>
   * @return The queryTimeMs.
   */
  @java.lang.Override
  public long getQueryTimeMs() {
    return queryTimeMs_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < records_.size(); i++) {
      output.writeMessage(1, records_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, error_);
    }
    if (queryTimeMs_ != 0L) {
      output.writeInt64(3, queryTimeMs_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < records_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, records_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, error_);
    }
    if (queryTimeMs_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, queryTimeMs_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof datapower.noesis.v1.FlinkHistoryResponse)) {
      return super.equals(obj);
    }
    datapower.noesis.v1.FlinkHistoryResponse other = (datapower.noesis.v1.FlinkHistoryResponse) obj;

    if (!getRecordsList()
        .equals(other.getRecordsList())) return false;
    if (!getError()
        .equals(other.getError())) return false;
    if (getQueryTimeMs()
        != other.getQueryTimeMs()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getRecordsCount() > 0) {
      hash = (37 * hash) + RECORDS_FIELD_NUMBER;
      hash = (53 * hash) + getRecordsList().hashCode();
    }
    hash = (37 * hash) + ERROR_FIELD_NUMBER;
    hash = (53 * hash) + getError().hashCode();
    hash = (37 * hash) + QUERY_TIME_MS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getQueryTimeMs());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static datapower.noesis.v1.FlinkHistoryResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static datapower.noesis.v1.FlinkHistoryResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static datapower.noesis.v1.FlinkHistoryResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(datapower.noesis.v1.FlinkHistoryResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Flink-specific history response
   * </pre>
   *
   * Protobuf type {@code datapower.noesis.v1.FlinkHistoryResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:datapower.noesis.v1.FlinkHistoryResponse)
      datapower.noesis.v1.FlinkHistoryResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return datapower.noesis.v1.FlinkEnrichmentServiceProto.internal_static_datapower_noesis_v1_FlinkHistoryResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return datapower.noesis.v1.FlinkEnrichmentServiceProto.internal_static_datapower_noesis_v1_FlinkHistoryResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              datapower.noesis.v1.FlinkHistoryResponse.class, datapower.noesis.v1.FlinkHistoryResponse.Builder.class);
    }

    // Construct using datapower.noesis.v1.FlinkHistoryResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (recordsBuilder_ == null) {
        records_ = java.util.Collections.emptyList();
      } else {
        records_ = null;
        recordsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      error_ = "";
      queryTimeMs_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return datapower.noesis.v1.FlinkEnrichmentServiceProto.internal_static_datapower_noesis_v1_FlinkHistoryResponse_descriptor;
    }

    @java.lang.Override
    public datapower.noesis.v1.FlinkHistoryResponse getDefaultInstanceForType() {
      return datapower.noesis.v1.FlinkHistoryResponse.getDefaultInstance();
    }

    @java.lang.Override
    public datapower.noesis.v1.FlinkHistoryResponse build() {
      datapower.noesis.v1.FlinkHistoryResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public datapower.noesis.v1.FlinkHistoryResponse buildPartial() {
      datapower.noesis.v1.FlinkHistoryResponse result = new datapower.noesis.v1.FlinkHistoryResponse(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(datapower.noesis.v1.FlinkHistoryResponse result) {
      if (recordsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          records_ = java.util.Collections.unmodifiableList(records_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.records_ = records_;
      } else {
        result.records_ = recordsBuilder_.build();
      }
    }

    private void buildPartial0(datapower.noesis.v1.FlinkHistoryResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.error_ = error_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.queryTimeMs_ = queryTimeMs_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof datapower.noesis.v1.FlinkHistoryResponse) {
        return mergeFrom((datapower.noesis.v1.FlinkHistoryResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(datapower.noesis.v1.FlinkHistoryResponse other) {
      if (other == datapower.noesis.v1.FlinkHistoryResponse.getDefaultInstance()) return this;
      if (recordsBuilder_ == null) {
        if (!other.records_.isEmpty()) {
          if (records_.isEmpty()) {
            records_ = other.records_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRecordsIsMutable();
            records_.addAll(other.records_);
          }
          onChanged();
        }
      } else {
        if (!other.records_.isEmpty()) {
          if (recordsBuilder_.isEmpty()) {
            recordsBuilder_.dispose();
            recordsBuilder_ = null;
            records_ = other.records_;
            bitField0_ = (bitField0_ & ~0x00000001);
            recordsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRecordsFieldBuilder() : null;
          } else {
            recordsBuilder_.addAllMessages(other.records_);
          }
        }
      }
      if (!other.getError().isEmpty()) {
        error_ = other.error_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.getQueryTimeMs() != 0L) {
        setQueryTimeMs(other.getQueryTimeMs());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              datapower.noesis.v1.FlinkHistoricalRecord m =
                  input.readMessage(
                      datapower.noesis.v1.FlinkHistoricalRecord.parser(),
                      extensionRegistry);
              if (recordsBuilder_ == null) {
                ensureRecordsIsMutable();
                records_.add(m);
              } else {
                recordsBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              error_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              queryTimeMs_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<datapower.noesis.v1.FlinkHistoricalRecord> records_ =
      java.util.Collections.emptyList();
    private void ensureRecordsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        records_ = new java.util.ArrayList<datapower.noesis.v1.FlinkHistoricalRecord>(records_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.FlinkHistoricalRecord, datapower.noesis.v1.FlinkHistoricalRecord.Builder, datapower.noesis.v1.FlinkHistoricalRecordOrBuilder> recordsBuilder_;

    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public java.util.List<datapower.noesis.v1.FlinkHistoricalRecord> getRecordsList() {
      if (recordsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(records_);
      } else {
        return recordsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public int getRecordsCount() {
      if (recordsBuilder_ == null) {
        return records_.size();
      } else {
        return recordsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public datapower.noesis.v1.FlinkHistoricalRecord getRecords(int index) {
      if (recordsBuilder_ == null) {
        return records_.get(index);
      } else {
        return recordsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder setRecords(
        int index, datapower.noesis.v1.FlinkHistoricalRecord value) {
      if (recordsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRecordsIsMutable();
        records_.set(index, value);
        onChanged();
      } else {
        recordsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder setRecords(
        int index, datapower.noesis.v1.FlinkHistoricalRecord.Builder builderForValue) {
      if (recordsBuilder_ == null) {
        ensureRecordsIsMutable();
        records_.set(index, builderForValue.build());
        onChanged();
      } else {
        recordsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder addRecords(datapower.noesis.v1.FlinkHistoricalRecord value) {
      if (recordsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRecordsIsMutable();
        records_.add(value);
        onChanged();
      } else {
        recordsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder addRecords(
        int index, datapower.noesis.v1.FlinkHistoricalRecord value) {
      if (recordsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRecordsIsMutable();
        records_.add(index, value);
        onChanged();
      } else {
        recordsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder addRecords(
        datapower.noesis.v1.FlinkHistoricalRecord.Builder builderForValue) {
      if (recordsBuilder_ == null) {
        ensureRecordsIsMutable();
        records_.add(builderForValue.build());
        onChanged();
      } else {
        recordsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder addRecords(
        int index, datapower.noesis.v1.FlinkHistoricalRecord.Builder builderForValue) {
      if (recordsBuilder_ == null) {
        ensureRecordsIsMutable();
        records_.add(index, builderForValue.build());
        onChanged();
      } else {
        recordsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder addAllRecords(
        java.lang.Iterable<? extends datapower.noesis.v1.FlinkHistoricalRecord> values) {
      if (recordsBuilder_ == null) {
        ensureRecordsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, records_);
        onChanged();
      } else {
        recordsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder clearRecords() {
      if (recordsBuilder_ == null) {
        records_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        recordsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public Builder removeRecords(int index) {
      if (recordsBuilder_ == null) {
        ensureRecordsIsMutable();
        records_.remove(index);
        onChanged();
      } else {
        recordsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public datapower.noesis.v1.FlinkHistoricalRecord.Builder getRecordsBuilder(
        int index) {
      return getRecordsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public datapower.noesis.v1.FlinkHistoricalRecordOrBuilder getRecordsOrBuilder(
        int index) {
      if (recordsBuilder_ == null) {
        return records_.get(index);  } else {
        return recordsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public java.util.List<? extends datapower.noesis.v1.FlinkHistoricalRecordOrBuilder> 
         getRecordsOrBuilderList() {
      if (recordsBuilder_ != null) {
        return recordsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(records_);
      }
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public datapower.noesis.v1.FlinkHistoricalRecord.Builder addRecordsBuilder() {
      return getRecordsFieldBuilder().addBuilder(
          datapower.noesis.v1.FlinkHistoricalRecord.getDefaultInstance());
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public datapower.noesis.v1.FlinkHistoricalRecord.Builder addRecordsBuilder(
        int index) {
      return getRecordsFieldBuilder().addBuilder(
          index, datapower.noesis.v1.FlinkHistoricalRecord.getDefaultInstance());
    }
    /**
     * <code>repeated .datapower.noesis.v1.FlinkHistoricalRecord records = 1 [json_name = "records"];</code>
     */
    public java.util.List<datapower.noesis.v1.FlinkHistoricalRecord.Builder> 
         getRecordsBuilderList() {
      return getRecordsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        datapower.noesis.v1.FlinkHistoricalRecord, datapower.noesis.v1.FlinkHistoricalRecord.Builder, datapower.noesis.v1.FlinkHistoricalRecordOrBuilder> 
        getRecordsFieldBuilder() {
      if (recordsBuilder_ == null) {
        recordsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            datapower.noesis.v1.FlinkHistoricalRecord, datapower.noesis.v1.FlinkHistoricalRecord.Builder, datapower.noesis.v1.FlinkHistoricalRecordOrBuilder>(
                records_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        records_ = null;
      }
      return recordsBuilder_;
    }

    private java.lang.Object error_ = "";
    /**
     * <code>string error = 2 [json_name = "error"];</code>
     * @return The error.
     */
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string error = 2 [json_name = "error"];</code>
     * @return The bytes for error.
     */
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string error = 2 [json_name = "error"];</code>
     * @param value The error to set.
     * @return This builder for chaining.
     */
    public Builder setError(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      error_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>string error = 2 [json_name = "error"];</code>
     * @return This builder for chaining.
     */
    public Builder clearError() {
      error_ = getDefaultInstance().getError();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>string error = 2 [json_name = "error"];</code>
     * @param value The bytes for error to set.
     * @return This builder for chaining.
     */
    public Builder setErrorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      error_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private long queryTimeMs_ ;
    /**
     * <pre>
     * Flink query execution time
     * </pre>
     *
     * <code>int64 query_time_ms = 3 [json_name = "queryTimeMs"];</code>
     * @return The queryTimeMs.
     */
    @java.lang.Override
    public long getQueryTimeMs() {
      return queryTimeMs_;
    }
    /**
     * <pre>
     * Flink query execution time
     * </pre>
     *
     * <code>int64 query_time_ms = 3 [json_name = "queryTimeMs"];</code>
     * @param value The queryTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setQueryTimeMs(long value) {

      queryTimeMs_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Flink query execution time
     * </pre>
     *
     * <code>int64 query_time_ms = 3 [json_name = "queryTimeMs"];</code>
     * @return This builder for chaining.
     */
    public Builder clearQueryTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000004);
      queryTimeMs_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:datapower.noesis.v1.FlinkHistoryResponse)
  }

  // @@protoc_insertion_point(class_scope:datapower.noesis.v1.FlinkHistoryResponse)
  private static final datapower.noesis.v1.FlinkHistoryResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new datapower.noesis.v1.FlinkHistoryResponse();
  }

  public static datapower.noesis.v1.FlinkHistoryResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FlinkHistoryResponse>
      PARSER = new com.google.protobuf.AbstractParser<FlinkHistoryResponse>() {
    @java.lang.Override
    public FlinkHistoryResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FlinkHistoryResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FlinkHistoryResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public datapower.noesis.v1.FlinkHistoryResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

