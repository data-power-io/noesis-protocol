// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface PlanExtractionRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.PlanExtractionRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * For multi-tenant scoping
   * </pre>
   *
   * <code>string tenant_id = 1 [json_name = "tenantId"];</code>
   * @return The tenantId.
   */
  java.lang.String getTenantId();
  /**
   * <pre>
   * For multi-tenant scoping
   * </pre>
   *
   * <code>string tenant_id = 1 [json_name = "tenantId"];</code>
   * @return The bytes for tenantId.
   */
  com.google.protobuf.ByteString
      getTenantIdBytes();

  /**
   * <pre>
   * Entity to extract (e.g., "customers")
   * </pre>
   *
   * <code>string entity = 2 [json_name = "entity"];</code>
   * @return The entity.
   */
  java.lang.String getEntity();
  /**
   * <pre>
   * Entity to extract (e.g., "customers")
   * </pre>
   *
   * <code>string entity = 2 [json_name = "entity"];</code>
   * @return The bytes for entity.
   */
  com.google.protobuf.ByteString
      getEntityBytes();

  /**
   * <pre>
   * Hint: how many splits to generate (connector may adjust)
   * </pre>
   *
   * <code>int32 desired_parallelism = 3 [json_name = "desiredParallelism"];</code>
   * @return The desiredParallelism.
   */
  int getDesiredParallelism();

  /**
   * <pre>
   * Source connection configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  int getConfigCount();
  /**
   * <pre>
   * Source connection configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  boolean containsConfig(
      java.lang.String key);
  /**
   * Use {@link #getConfigMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getConfig();
  /**
   * <pre>
   * Source connection configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getConfigMap();
  /**
   * <pre>
   * Source connection configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  /* nullable */
java.lang.String getConfigOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Source connection configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; config = 4 [json_name = "config"];</code>
   */
  java.lang.String getConfigOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Optional: global filter to apply to all splits
   * </pre>
   *
   * <code>.datapower.noesis.v1.Filter filter = 5 [json_name = "filter"];</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <pre>
   * Optional: global filter to apply to all splits
   * </pre>
   *
   * <code>.datapower.noesis.v1.Filter filter = 5 [json_name = "filter"];</code>
   * @return The filter.
   */
  datapower.noesis.v1.Filter getFilter();
  /**
   * <pre>
   * Optional: global filter to apply to all splits
   * </pre>
   *
   * <code>.datapower.noesis.v1.Filter filter = 5 [json_name = "filter"];</code>
   */
  datapower.noesis.v1.FilterOrBuilder getFilterOrBuilder();

  /**
   * <pre>
   * Consistency requirements
   * </pre>
   *
   * <code>.datapower.noesis.v1.SnapshotOptions snapshot = 6 [json_name = "snapshot"];</code>
   * @return Whether the snapshot field is set.
   */
  boolean hasSnapshot();
  /**
   * <pre>
   * Consistency requirements
   * </pre>
   *
   * <code>.datapower.noesis.v1.SnapshotOptions snapshot = 6 [json_name = "snapshot"];</code>
   * @return The snapshot.
   */
  datapower.noesis.v1.SnapshotOptions getSnapshot();
  /**
   * <pre>
   * Consistency requirements
   * </pre>
   *
   * <code>.datapower.noesis.v1.SnapshotOptions snapshot = 6 [json_name = "snapshot"];</code>
   */
  datapower.noesis.v1.SnapshotOptionsOrBuilder getSnapshotOrBuilder();
}
