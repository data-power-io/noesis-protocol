// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface CheckpointConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.CheckpointConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Checkpoint interval in milliseconds
   * </pre>
   *
   * <code>int64 interval_ms = 1 [json_name = "intervalMs"];</code>
   * @return The intervalMs.
   */
  long getIntervalMs();

  /**
   * <pre>
   * Checkpoint mode (exactly_once, at_least_once)
   * </pre>
   *
   * <code>string mode = 2 [json_name = "mode"];</code>
   * @return The mode.
   */
  java.lang.String getMode();
  /**
   * <pre>
   * Checkpoint mode (exactly_once, at_least_once)
   * </pre>
   *
   * <code>string mode = 2 [json_name = "mode"];</code>
   * @return The bytes for mode.
   */
  com.google.protobuf.ByteString
      getModeBytes();

  /**
   * <pre>
   * Checkpoint timeout in milliseconds
   * </pre>
   *
   * <code>int64 timeout_ms = 3 [json_name = "timeoutMs"];</code>
   * @return The timeoutMs.
   */
  long getTimeoutMs();

  /**
   * <pre>
   * Min pause between checkpoints in milliseconds
   * </pre>
   *
   * <code>int64 min_pause_ms = 4 [json_name = "minPauseMs"];</code>
   * @return The minPauseMs.
   */
  long getMinPauseMs();

  /**
   * <pre>
   * Max concurrent checkpoints
   * </pre>
   *
   * <code>int32 max_concurrent = 5 [json_name = "maxConcurrent"];</code>
   * @return The maxConcurrent.
   */
  int getMaxConcurrent();
}
