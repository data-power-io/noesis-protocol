// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface StreamingJobSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.StreamingJobSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique job name (e.g., "customer-360-view_orders_patcher")
   * </pre>
   *
   * <code>string job_name = 1 [json_name = "jobName"];</code>
   * @return The jobName.
   */
  java.lang.String getJobName();
  /**
   * <pre>
   * Unique job name (e.g., "customer-360-view_orders_patcher")
   * </pre>
   *
   * <code>string job_name = 1 [json_name = "jobName"];</code>
   * @return The bytes for jobName.
   */
  com.google.protobuf.ByteString
      getJobNameBytes();

  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 2 [json_name = "sourceAlias"];</code>
   * @return The sourceAlias.
   */
  java.lang.String getSourceAlias();
  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 2 [json_name = "sourceAlias"];</code>
   * @return The bytes for sourceAlias.
   */
  com.google.protobuf.ByteString
      getSourceAliasBytes();

  /**
   * <pre>
   * Kafka topic to consume from
   * </pre>
   *
   * <code>string kafka_topic = 3 [json_name = "kafkaTopic"];</code>
   * @return The kafkaTopic.
   */
  java.lang.String getKafkaTopic();
  /**
   * <pre>
   * Kafka topic to consume from
   * </pre>
   *
   * <code>string kafka_topic = 3 [json_name = "kafkaTopic"];</code>
   * @return The bytes for kafkaTopic.
   */
  com.google.protobuf.ByteString
      getKafkaTopicBytes();

  /**
   * <pre>
   * Target fields that this job updates (all must be mutable=true)
   * </pre>
   *
   * <code>repeated string mutable_fields = 4 [json_name = "mutableFields"];</code>
   * @return A list containing the mutableFields.
   */
  java.util.List<java.lang.String>
      getMutableFieldsList();
  /**
   * <pre>
   * Target fields that this job updates (all must be mutable=true)
   * </pre>
   *
   * <code>repeated string mutable_fields = 4 [json_name = "mutableFields"];</code>
   * @return The count of mutableFields.
   */
  int getMutableFieldsCount();
  /**
   * <pre>
   * Target fields that this job updates (all must be mutable=true)
   * </pre>
   *
   * <code>repeated string mutable_fields = 4 [json_name = "mutableFields"];</code>
   * @param index The index of the element to return.
   * @return The mutableFields at the given index.
   */
  java.lang.String getMutableFields(int index);
  /**
   * <pre>
   * Target fields that this job updates (all must be mutable=true)
   * </pre>
   *
   * <code>repeated string mutable_fields = 4 [json_name = "mutableFields"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the mutableFields at the given index.
   */
  com.google.protobuf.ByteString
      getMutableFieldsBytes(int index);

  /**
   * <pre>
   * Sink topic where patch events are written
   * </pre>
   *
   * <code>string sink_topic = 5 [json_name = "sinkTopic"];</code>
   * @return The sinkTopic.
   */
  java.lang.String getSinkTopic();
  /**
   * <pre>
   * Sink topic where patch events are written
   * </pre>
   *
   * <code>string sink_topic = 5 [json_name = "sinkTopic"];</code>
   * @return The bytes for sinkTopic.
   */
  com.google.protobuf.ByteString
      getSinkTopicBytes();

  /**
   * <pre>
   * Generated Flink SQL for this streaming job
   * </pre>
   *
   * <code>string flink_sql = 6 [json_name = "flinkSql"];</code>
   * @return The flinkSql.
   */
  java.lang.String getFlinkSql();
  /**
   * <pre>
   * Generated Flink SQL for this streaming job
   * </pre>
   *
   * <code>string flink_sql = 6 [json_name = "flinkSql"];</code>
   * @return The bytes for flinkSql.
   */
  com.google.protobuf.ByteString
      getFlinkSqlBytes();

  /**
   * <pre>
   * Primary key field for grouping
   * </pre>
   *
   * <code>string primary_key = 7 [json_name = "primaryKey"];</code>
   * @return The primaryKey.
   */
  java.lang.String getPrimaryKey();
  /**
   * <pre>
   * Primary key field for grouping
   * </pre>
   *
   * <code>string primary_key = 7 [json_name = "primaryKey"];</code>
   * @return The bytes for primaryKey.
   */
  com.google.protobuf.ByteString
      getPrimaryKeyBytes();

  /**
   * <pre>
   * Kafka consumer group ID
   * </pre>
   *
   * <code>string consumer_group = 8 [json_name = "consumerGroup"];</code>
   * @return The consumerGroup.
   */
  java.lang.String getConsumerGroup();
  /**
   * <pre>
   * Kafka consumer group ID
   * </pre>
   *
   * <code>string consumer_group = 8 [json_name = "consumerGroup"];</code>
   * @return The bytes for consumerGroup.
   */
  com.google.protobuf.ByteString
      getConsumerGroupBytes();

  /**
   * <pre>
   * State backend configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.StateBackendConfig state_backend = 9 [json_name = "stateBackend"];</code>
   * @return Whether the stateBackend field is set.
   */
  boolean hasStateBackend();
  /**
   * <pre>
   * State backend configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.StateBackendConfig state_backend = 9 [json_name = "stateBackend"];</code>
   * @return The stateBackend.
   */
  datapower.noesis.v1.StateBackendConfig getStateBackend();
  /**
   * <pre>
   * State backend configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.StateBackendConfig state_backend = 9 [json_name = "stateBackend"];</code>
   */
  datapower.noesis.v1.StateBackendConfigOrBuilder getStateBackendOrBuilder();

  /**
   * <pre>
   * Checkpointing configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.CheckpointConfig checkpoint = 10 [json_name = "checkpoint"];</code>
   * @return Whether the checkpoint field is set.
   */
  boolean hasCheckpoint();
  /**
   * <pre>
   * Checkpointing configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.CheckpointConfig checkpoint = 10 [json_name = "checkpoint"];</code>
   * @return The checkpoint.
   */
  datapower.noesis.v1.CheckpointConfig getCheckpoint();
  /**
   * <pre>
   * Checkpointing configuration
   * </pre>
   *
   * <code>.datapower.noesis.v1.CheckpointConfig checkpoint = 10 [json_name = "checkpoint"];</code>
   */
  datapower.noesis.v1.CheckpointConfigOrBuilder getCheckpointOrBuilder();

  /**
   * <pre>
   * Parallelism for this job
   * </pre>
   *
   * <code>int32 parallelism = 11 [json_name = "parallelism"];</code>
   * @return The parallelism.
   */
  int getParallelism();
}
