// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/sidecar.proto

package datapower.noesis.v1;

public interface StorageConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.StorageConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * S3, GCS, MinIO, etc.
   * </pre>
   *
   * <code>.datapower.noesis.v1.StorageType type = 1 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * S3, GCS, MinIO, etc.
   * </pre>
   *
   * <code>.datapower.noesis.v1.StorageType type = 1 [json_name = "type"];</code>
   * @return The type.
   */
  datapower.noesis.v1.StorageType getType();

  /**
   * <pre>
   * Bucket/container name
   * </pre>
   *
   * <code>string bucket = 2 [json_name = "bucket"];</code>
   * @return The bucket.
   */
  java.lang.String getBucket();
  /**
   * <pre>
   * Bucket/container name
   * </pre>
   *
   * <code>string bucket = 2 [json_name = "bucket"];</code>
   * @return The bytes for bucket.
   */
  com.google.protobuf.ByteString
      getBucketBytes();

  /**
   * <pre>
   * Path prefix for uploaded files (e.g., "staging/customers/run-123/")
   * </pre>
   *
   * <code>string path_prefix = 3 [json_name = "pathPrefix"];</code>
   * @return The pathPrefix.
   */
  java.lang.String getPathPrefix();
  /**
   * <pre>
   * Path prefix for uploaded files (e.g., "staging/customers/run-123/")
   * </pre>
   *
   * <code>string path_prefix = 3 [json_name = "pathPrefix"];</code>
   * @return The bytes for pathPrefix.
   */
  com.google.protobuf.ByteString
      getPathPrefixBytes();

  /**
   * <pre>
   * Storage credentials (access keys, service account, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; credentials = 4 [json_name = "credentials"];</code>
   */
  int getCredentialsCount();
  /**
   * <pre>
   * Storage credentials (access keys, service account, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; credentials = 4 [json_name = "credentials"];</code>
   */
  boolean containsCredentials(
      java.lang.String key);
  /**
   * Use {@link #getCredentialsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getCredentials();
  /**
   * <pre>
   * Storage credentials (access keys, service account, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; credentials = 4 [json_name = "credentials"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getCredentialsMap();
  /**
   * <pre>
   * Storage credentials (access keys, service account, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; credentials = 4 [json_name = "credentials"];</code>
   */
  /* nullable */
java.lang.String getCredentialsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Storage credentials (access keys, service account, etc.)
   * </pre>
   *
   * <code>map&lt;string, string&gt; credentials = 4 [json_name = "credentials"];</code>
   */
  java.lang.String getCredentialsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Optional: custom endpoint (for MinIO, etc.)
   * </pre>
   *
   * <code>string endpoint = 5 [json_name = "endpoint"];</code>
   * @return The endpoint.
   */
  java.lang.String getEndpoint();
  /**
   * <pre>
   * Optional: custom endpoint (for MinIO, etc.)
   * </pre>
   *
   * <code>string endpoint = 5 [json_name = "endpoint"];</code>
   * @return The bytes for endpoint.
   */
  com.google.protobuf.ByteString
      getEndpointBytes();

  /**
   * <pre>
   * Whether to use SSL/TLS
   * </pre>
   *
   * <code>bool use_ssl = 6 [json_name = "useSsl"];</code>
   * @return The useSsl.
   */
  boolean getUseSsl();
}
