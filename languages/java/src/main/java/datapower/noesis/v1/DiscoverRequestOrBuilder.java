// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface DiscoverRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.DiscoverRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * For multi-tenant scoping and audit.
   * </pre>
   *
   * <code>string tenant_id = 1 [json_name = "tenantId"];</code>
   * @return The tenantId.
   */
  java.lang.String getTenantId();
  /**
   * <pre>
   * For multi-tenant scoping and audit.
   * </pre>
   *
   * <code>string tenant_id = 1 [json_name = "tenantId"];</code>
   * @return The bytes for tenantId.
   */
  com.google.protobuf.ByteString
      getTenantIdBytes();

  /**
   * <pre>
   * Optional: restrict discovery to these entity names.
   * </pre>
   *
   * <code>repeated string entity_filter = 2 [json_name = "entityFilter"];</code>
   * @return A list containing the entityFilter.
   */
  java.util.List<java.lang.String>
      getEntityFilterList();
  /**
   * <pre>
   * Optional: restrict discovery to these entity names.
   * </pre>
   *
   * <code>repeated string entity_filter = 2 [json_name = "entityFilter"];</code>
   * @return The count of entityFilter.
   */
  int getEntityFilterCount();
  /**
   * <pre>
   * Optional: restrict discovery to these entity names.
   * </pre>
   *
   * <code>repeated string entity_filter = 2 [json_name = "entityFilter"];</code>
   * @param index The index of the element to return.
   * @return The entityFilter at the given index.
   */
  java.lang.String getEntityFilter(int index);
  /**
   * <pre>
   * Optional: restrict discovery to these entity names.
   * </pre>
   *
   * <code>repeated string entity_filter = 2 [json_name = "entityFilter"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the entityFilter at the given index.
   */
  com.google.protobuf.ByteString
      getEntityFilterBytes(int index);

  /**
   * <pre>
   * If false, only metadata is returned (no schema payloads).
   * </pre>
   *
   * <code>bool include_schemas = 3 [json_name = "includeSchemas"];</code>
   * @return The includeSchemas.
   */
  boolean getIncludeSchemas();
}
