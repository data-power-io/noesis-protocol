// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/cdc_events.proto

package datapower.noesis.v1;

public interface ImportConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.ImportConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Target platform/system
   * </pre>
   *
   * <code>string target_platform = 1 [json_name = "targetPlatform"];</code>
   * @return The targetPlatform.
   */
  java.lang.String getTargetPlatform();
  /**
   * <pre>
   * Target platform/system
   * </pre>
   *
   * <code>string target_platform = 1 [json_name = "targetPlatform"];</code>
   * @return The bytes for targetPlatform.
   */
  com.google.protobuf.ByteString
      getTargetPlatformBytes();

  /**
   * <pre>
   * Import mode (upsert, insert, update, etc.)
   * </pre>
   *
   * <code>string mode = 2 [json_name = "mode"];</code>
   * @return The mode.
   */
  java.lang.String getMode();
  /**
   * <pre>
   * Import mode (upsert, insert, update, etc.)
   * </pre>
   *
   * <code>string mode = 2 [json_name = "mode"];</code>
   * @return The bytes for mode.
   */
  com.google.protobuf.ByteString
      getModeBytes();

  /**
   * <pre>
   * ID columns for matching
   * </pre>
   *
   * <code>repeated string id_columns = 3 [json_name = "idColumns"];</code>
   * @return A list containing the idColumns.
   */
  java.util.List<java.lang.String>
      getIdColumnsList();
  /**
   * <pre>
   * ID columns for matching
   * </pre>
   *
   * <code>repeated string id_columns = 3 [json_name = "idColumns"];</code>
   * @return The count of idColumns.
   */
  int getIdColumnsCount();
  /**
   * <pre>
   * ID columns for matching
   * </pre>
   *
   * <code>repeated string id_columns = 3 [json_name = "idColumns"];</code>
   * @param index The index of the element to return.
   * @return The idColumns at the given index.
   */
  java.lang.String getIdColumns(int index);
  /**
   * <pre>
   * ID columns for matching
   * </pre>
   *
   * <code>repeated string id_columns = 3 [json_name = "idColumns"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the idColumns at the given index.
   */
  com.google.protobuf.ByteString
      getIdColumnsBytes(int index);

  /**
   * <pre>
   * Whether to check dependencies
   * </pre>
   *
   * <code>bool check_dependencies = 4 [json_name = "checkDependencies"];</code>
   * @return The checkDependencies.
   */
  boolean getCheckDependencies();

  /**
   * <pre>
   * Batch size for bulk operations
   * </pre>
   *
   * <code>int32 batch_size = 5 [json_name = "batchSize"];</code>
   * @return The batchSize.
   */
  int getBatchSize();

  /**
   * <pre>
   * Additional configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 6 [json_name = "options"];</code>
   */
  int getOptionsCount();
  /**
   * <pre>
   * Additional configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 6 [json_name = "options"];</code>
   */
  boolean containsOptions(
      java.lang.String key);
  /**
   * Use {@link #getOptionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getOptions();
  /**
   * <pre>
   * Additional configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 6 [json_name = "options"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getOptionsMap();
  /**
   * <pre>
   * Additional configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 6 [json_name = "options"];</code>
   */
  /* nullable */
java.lang.String getOptionsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Additional configuration
   * </pre>
   *
   * <code>map&lt;string, string&gt; options = 6 [json_name = "options"];</code>
   */
  java.lang.String getOptionsOrThrow(
      java.lang.String key);
}
