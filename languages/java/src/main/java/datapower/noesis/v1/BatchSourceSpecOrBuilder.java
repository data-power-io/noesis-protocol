// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/execution.proto

package datapower.noesis.v1;

public interface BatchSourceSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.BatchSourceSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
   * @return The sourceAlias.
   */
  java.lang.String getSourceAlias();
  /**
   * <pre>
   * Source alias from pipeline definition
   * </pre>
   *
   * <code>string source_alias = 1 [json_name = "sourceAlias"];</code>
   * @return The bytes for sourceAlias.
   */
  com.google.protobuf.ByteString
      getSourceAliasBytes();

  /**
   * <pre>
   * Target Iceberg table name
   * </pre>
   *
   * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
   * @return The icebergTable.
   */
  java.lang.String getIcebergTable();
  /**
   * <pre>
   * Target Iceberg table name
   * </pre>
   *
   * <code>string iceberg_table = 2 [json_name = "icebergTable"];</code>
   * @return The bytes for icebergTable.
   */
  com.google.protobuf.ByteString
      getIcebergTableBytes();

  /**
   * <pre>
   * Whether this source needs extraction (false if already in Iceberg)
   * </pre>
   *
   * <code>bool needs_extraction = 3 [json_name = "needsExtraction"];</code>
   * @return The needsExtraction.
   */
  boolean getNeedsExtraction();

  /**
   * <pre>
   * Connector configuration (if needs_extraction=true)
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
   * @return Whether the connector field is set.
   */
  boolean hasConnector();
  /**
   * <pre>
   * Connector configuration (if needs_extraction=true)
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
   * @return The connector.
   */
  datapower.noesis.v1.ConnectorConfig getConnector();
  /**
   * <pre>
   * Connector configuration (if needs_extraction=true)
   * </pre>
   *
   * <code>.datapower.noesis.v1.ConnectorConfig connector = 4 [json_name = "connector"];</code>
   */
  datapower.noesis.v1.ConnectorConfigOrBuilder getConnectorOrBuilder();

  /**
   * <pre>
   * Desired parallelism for extraction
   * </pre>
   *
   * <code>int32 parallelism = 5 [json_name = "parallelism"];</code>
   * @return The parallelism.
   */
  int getParallelism();

  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  java.util.List<datapower.noesis.v1.SchemaField> 
      getSchemaList();
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  datapower.noesis.v1.SchemaField getSchema(int index);
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  int getSchemaCount();
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.SchemaFieldOrBuilder> 
      getSchemaOrBuilderList();
  /**
   * <pre>
   * Schema for the source
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.SchemaField schema = 6 [json_name = "schema"];</code>
   */
  datapower.noesis.v1.SchemaFieldOrBuilder getSchemaOrBuilder(
      int index);

  /**
   * <pre>
   * Estimated row count (for planning)
   * </pre>
   *
   * <code>int64 estimated_rows = 7 [json_name = "estimatedRows"];</code>
   * @return The estimatedRows.
   */
  long getEstimatedRows();
}
