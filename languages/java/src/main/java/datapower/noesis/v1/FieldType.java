// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

/**
 * <pre>
 * Field type enumeration for common database types
 * </pre>
 *
 * Protobuf enum {@code datapower.noesis.v1.FieldType}
 */
public enum FieldType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>FIELD_TYPE_UNSPECIFIED = 0;</code>
   */
  FIELD_TYPE_UNSPECIFIED(0),
  /**
   * <code>FIELD_TYPE_STRING = 1;</code>
   */
  FIELD_TYPE_STRING(1),
  /**
   * <code>FIELD_TYPE_INTEGER = 2;</code>
   */
  FIELD_TYPE_INTEGER(2),
  /**
   * <code>FIELD_TYPE_BIGINT = 3;</code>
   */
  FIELD_TYPE_BIGINT(3),
  /**
   * <code>FIELD_TYPE_SMALLINT = 4;</code>
   */
  FIELD_TYPE_SMALLINT(4),
  /**
   * <code>FIELD_TYPE_DECIMAL = 5;</code>
   */
  FIELD_TYPE_DECIMAL(5),
  /**
   * <code>FIELD_TYPE_FLOAT = 6;</code>
   */
  FIELD_TYPE_FLOAT(6),
  /**
   * <code>FIELD_TYPE_DOUBLE = 7;</code>
   */
  FIELD_TYPE_DOUBLE(7),
  /**
   * <code>FIELD_TYPE_BOOLEAN = 8;</code>
   */
  FIELD_TYPE_BOOLEAN(8),
  /**
   * <code>FIELD_TYPE_DATE = 9;</code>
   */
  FIELD_TYPE_DATE(9),
  /**
   * <code>FIELD_TYPE_TIME = 10;</code>
   */
  FIELD_TYPE_TIME(10),
  /**
   * <code>FIELD_TYPE_TIMESTAMP = 11;</code>
   */
  FIELD_TYPE_TIMESTAMP(11),
  /**
   * <code>FIELD_TYPE_TIMESTAMP_WITH_TZ = 12;</code>
   */
  FIELD_TYPE_TIMESTAMP_WITH_TZ(12),
  /**
   * <code>FIELD_TYPE_JSON = 13;</code>
   */
  FIELD_TYPE_JSON(13),
  /**
   * <code>FIELD_TYPE_JSONB = 14;</code>
   */
  FIELD_TYPE_JSONB(14),
  /**
   * <code>FIELD_TYPE_UUID = 15;</code>
   */
  FIELD_TYPE_UUID(15),
  /**
   * <code>FIELD_TYPE_BINARY = 16;</code>
   */
  FIELD_TYPE_BINARY(16),
  /**
   * <code>FIELD_TYPE_TEXT = 17;</code>
   */
  FIELD_TYPE_TEXT(17),
  /**
   * <code>FIELD_TYPE_ENUM = 18;</code>
   */
  FIELD_TYPE_ENUM(18),
  /**
   * <code>FIELD_TYPE_ARRAY = 19;</code>
   */
  FIELD_TYPE_ARRAY(19),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>FIELD_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int FIELD_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <code>FIELD_TYPE_STRING = 1;</code>
   */
  public static final int FIELD_TYPE_STRING_VALUE = 1;
  /**
   * <code>FIELD_TYPE_INTEGER = 2;</code>
   */
  public static final int FIELD_TYPE_INTEGER_VALUE = 2;
  /**
   * <code>FIELD_TYPE_BIGINT = 3;</code>
   */
  public static final int FIELD_TYPE_BIGINT_VALUE = 3;
  /**
   * <code>FIELD_TYPE_SMALLINT = 4;</code>
   */
  public static final int FIELD_TYPE_SMALLINT_VALUE = 4;
  /**
   * <code>FIELD_TYPE_DECIMAL = 5;</code>
   */
  public static final int FIELD_TYPE_DECIMAL_VALUE = 5;
  /**
   * <code>FIELD_TYPE_FLOAT = 6;</code>
   */
  public static final int FIELD_TYPE_FLOAT_VALUE = 6;
  /**
   * <code>FIELD_TYPE_DOUBLE = 7;</code>
   */
  public static final int FIELD_TYPE_DOUBLE_VALUE = 7;
  /**
   * <code>FIELD_TYPE_BOOLEAN = 8;</code>
   */
  public static final int FIELD_TYPE_BOOLEAN_VALUE = 8;
  /**
   * <code>FIELD_TYPE_DATE = 9;</code>
   */
  public static final int FIELD_TYPE_DATE_VALUE = 9;
  /**
   * <code>FIELD_TYPE_TIME = 10;</code>
   */
  public static final int FIELD_TYPE_TIME_VALUE = 10;
  /**
   * <code>FIELD_TYPE_TIMESTAMP = 11;</code>
   */
  public static final int FIELD_TYPE_TIMESTAMP_VALUE = 11;
  /**
   * <code>FIELD_TYPE_TIMESTAMP_WITH_TZ = 12;</code>
   */
  public static final int FIELD_TYPE_TIMESTAMP_WITH_TZ_VALUE = 12;
  /**
   * <code>FIELD_TYPE_JSON = 13;</code>
   */
  public static final int FIELD_TYPE_JSON_VALUE = 13;
  /**
   * <code>FIELD_TYPE_JSONB = 14;</code>
   */
  public static final int FIELD_TYPE_JSONB_VALUE = 14;
  /**
   * <code>FIELD_TYPE_UUID = 15;</code>
   */
  public static final int FIELD_TYPE_UUID_VALUE = 15;
  /**
   * <code>FIELD_TYPE_BINARY = 16;</code>
   */
  public static final int FIELD_TYPE_BINARY_VALUE = 16;
  /**
   * <code>FIELD_TYPE_TEXT = 17;</code>
   */
  public static final int FIELD_TYPE_TEXT_VALUE = 17;
  /**
   * <code>FIELD_TYPE_ENUM = 18;</code>
   */
  public static final int FIELD_TYPE_ENUM_VALUE = 18;
  /**
   * <code>FIELD_TYPE_ARRAY = 19;</code>
   */
  public static final int FIELD_TYPE_ARRAY_VALUE = 19;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FieldType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FieldType forNumber(int value) {
    switch (value) {
      case 0: return FIELD_TYPE_UNSPECIFIED;
      case 1: return FIELD_TYPE_STRING;
      case 2: return FIELD_TYPE_INTEGER;
      case 3: return FIELD_TYPE_BIGINT;
      case 4: return FIELD_TYPE_SMALLINT;
      case 5: return FIELD_TYPE_DECIMAL;
      case 6: return FIELD_TYPE_FLOAT;
      case 7: return FIELD_TYPE_DOUBLE;
      case 8: return FIELD_TYPE_BOOLEAN;
      case 9: return FIELD_TYPE_DATE;
      case 10: return FIELD_TYPE_TIME;
      case 11: return FIELD_TYPE_TIMESTAMP;
      case 12: return FIELD_TYPE_TIMESTAMP_WITH_TZ;
      case 13: return FIELD_TYPE_JSON;
      case 14: return FIELD_TYPE_JSONB;
      case 15: return FIELD_TYPE_UUID;
      case 16: return FIELD_TYPE_BINARY;
      case 17: return FIELD_TYPE_TEXT;
      case 18: return FIELD_TYPE_ENUM;
      case 19: return FIELD_TYPE_ARRAY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FieldType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FieldType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FieldType>() {
          public FieldType findValueByNumber(int number) {
            return FieldType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return datapower.noesis.v1.ConnectorOuterClass.getDescriptor().getEnumTypes().get(1);
  }

  private static final FieldType[] VALUES = values();

  public static FieldType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FieldType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:datapower.noesis.v1.FieldType)
}

