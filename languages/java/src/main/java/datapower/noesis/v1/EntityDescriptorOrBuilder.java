// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapower/noesis/v1/connector.proto

package datapower.noesis.v1;

public interface EntityDescriptorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:datapower.noesis.v1.EntityDescriptor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * e.g., "Part", "Document", "BOMLink"
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * e.g., "Part", "Document", "BOMLink"
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * NODE or LINK
   * </pre>
   *
   * <code>.datapower.noesis.v1.EntityKind kind = 2 [json_name = "kind"];</code>
   * @return The enum numeric value on the wire for kind.
   */
  int getKindValue();
  /**
   * <pre>
   * NODE or LINK
   * </pre>
   *
   * <code>.datapower.noesis.v1.EntityKind kind = 2 [json_name = "kind"];</code>
   * @return The kind.
   */
  datapower.noesis.v1.EntityKind getKind();

  /**
   * <pre>
   * Human-friendly label
   * </pre>
   *
   * <code>string display_name = 3 [json_name = "displayName"];</code>
   * @return The displayName.
   */
  java.lang.String getDisplayName();
  /**
   * <pre>
   * Human-friendly label
   * </pre>
   *
   * <code>string display_name = 3 [json_name = "displayName"];</code>
   * @return The bytes for displayName.
   */
  com.google.protobuf.ByteString
      getDisplayNameBytes();

  /**
   * <pre>
   * Optional docs
   * </pre>
   *
   * <code>string description = 4 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * Optional docs
   * </pre>
   *
   * <code>string description = 4 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * Schema in structured format
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructuredSchemaDescriptor schema = 5 [json_name = "schema"];</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <pre>
   * Schema in structured format
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructuredSchemaDescriptor schema = 5 [json_name = "schema"];</code>
   * @return The schema.
   */
  datapower.noesis.v1.StructuredSchemaDescriptor getSchema();
  /**
   * <pre>
   * Schema in structured format
   * </pre>
   *
   * <code>.datapower.noesis.v1.StructuredSchemaDescriptor schema = 5 [json_name = "schema"];</code>
   */
  datapower.noesis.v1.StructuredSchemaDescriptorOrBuilder getSchemaOrBuilder();

  /**
   * <pre>
   * Keys &amp; relational hints.
   * </pre>
   *
   * <code>repeated string primary_key = 6 [json_name = "primaryKey"];</code>
   * @return A list containing the primaryKey.
   */
  java.util.List<java.lang.String>
      getPrimaryKeyList();
  /**
   * <pre>
   * Keys &amp; relational hints.
   * </pre>
   *
   * <code>repeated string primary_key = 6 [json_name = "primaryKey"];</code>
   * @return The count of primaryKey.
   */
  int getPrimaryKeyCount();
  /**
   * <pre>
   * Keys &amp; relational hints.
   * </pre>
   *
   * <code>repeated string primary_key = 6 [json_name = "primaryKey"];</code>
   * @param index The index of the element to return.
   * @return The primaryKey at the given index.
   */
  java.lang.String getPrimaryKey(int index);
  /**
   * <pre>
   * Keys &amp; relational hints.
   * </pre>
   *
   * <code>repeated string primary_key = 6 [json_name = "primaryKey"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the primaryKey at the given index.
   */
  com.google.protobuf.ByteString
      getPrimaryKeyBytes(int index);

  /**
   * <pre>
   * Additional unique constraints
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.UniqueKey unique_keys = 7 [json_name = "uniqueKeys"];</code>
   */
  java.util.List<datapower.noesis.v1.UniqueKey> 
      getUniqueKeysList();
  /**
   * <pre>
   * Additional unique constraints
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.UniqueKey unique_keys = 7 [json_name = "uniqueKeys"];</code>
   */
  datapower.noesis.v1.UniqueKey getUniqueKeys(int index);
  /**
   * <pre>
   * Additional unique constraints
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.UniqueKey unique_keys = 7 [json_name = "uniqueKeys"];</code>
   */
  int getUniqueKeysCount();
  /**
   * <pre>
   * Additional unique constraints
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.UniqueKey unique_keys = 7 [json_name = "uniqueKeys"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.UniqueKeyOrBuilder> 
      getUniqueKeysOrBuilderList();
  /**
   * <pre>
   * Additional unique constraints
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.UniqueKey unique_keys = 7 [json_name = "uniqueKeys"];</code>
   */
  datapower.noesis.v1.UniqueKeyOrBuilder getUniqueKeysOrBuilder(
      int index);

  /**
   * <pre>
   * If soft deletes exist
   * </pre>
   *
   * <code>bool soft_delete = 8 [json_name = "softDelete"];</code>
   * @return The softDelete.
   */
  boolean getSoftDelete();

  /**
   * <pre>
   * Field name for soft delete marker (e.g., "deleted_at")
   * </pre>
   *
   * <code>string soft_delete_field = 9 [json_name = "softDeleteField"];</code>
   * @return The softDeleteField.
   */
  java.lang.String getSoftDeleteField();
  /**
   * <pre>
   * Field name for soft delete marker (e.g., "deleted_at")
   * </pre>
   *
   * <code>string soft_delete_field = 9 [json_name = "softDeleteField"];</code>
   * @return The bytes for softDeleteField.
   */
  com.google.protobuf.ByteString
      getSoftDeleteFieldBytes();

  /**
   * <pre>
   * For LINK (kind=LINK): logical endpoints the link connects (should match target entity PKs).
   * </pre>
   *
   * <code>.datapower.noesis.v1.LinkEndpoint src = 10 [json_name = "src"];</code>
   * @return Whether the src field is set.
   */
  boolean hasSrc();
  /**
   * <pre>
   * For LINK (kind=LINK): logical endpoints the link connects (should match target entity PKs).
   * </pre>
   *
   * <code>.datapower.noesis.v1.LinkEndpoint src = 10 [json_name = "src"];</code>
   * @return The src.
   */
  datapower.noesis.v1.LinkEndpoint getSrc();
  /**
   * <pre>
   * For LINK (kind=LINK): logical endpoints the link connects (should match target entity PKs).
   * </pre>
   *
   * <code>.datapower.noesis.v1.LinkEndpoint src = 10 [json_name = "src"];</code>
   */
  datapower.noesis.v1.LinkEndpointOrBuilder getSrcOrBuilder();

  /**
   * <code>.datapower.noesis.v1.LinkEndpoint dst = 11 [json_name = "dst"];</code>
   * @return Whether the dst field is set.
   */
  boolean hasDst();
  /**
   * <code>.datapower.noesis.v1.LinkEndpoint dst = 11 [json_name = "dst"];</code>
   * @return The dst.
   */
  datapower.noesis.v1.LinkEndpoint getDst();
  /**
   * <code>.datapower.noesis.v1.LinkEndpoint dst = 11 [json_name = "dst"];</code>
   */
  datapower.noesis.v1.LinkEndpointOrBuilder getDstOrBuilder();

  /**
   * <pre>
   * Supported cursor fields for incremental reads (updated_at, version, LSN, etc.).
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.CursorField cursors = 12 [json_name = "cursors"];</code>
   */
  java.util.List<datapower.noesis.v1.CursorField> 
      getCursorsList();
  /**
   * <pre>
   * Supported cursor fields for incremental reads (updated_at, version, LSN, etc.).
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.CursorField cursors = 12 [json_name = "cursors"];</code>
   */
  datapower.noesis.v1.CursorField getCursors(int index);
  /**
   * <pre>
   * Supported cursor fields for incremental reads (updated_at, version, LSN, etc.).
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.CursorField cursors = 12 [json_name = "cursors"];</code>
   */
  int getCursorsCount();
  /**
   * <pre>
   * Supported cursor fields for incremental reads (updated_at, version, LSN, etc.).
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.CursorField cursors = 12 [json_name = "cursors"];</code>
   */
  java.util.List<? extends datapower.noesis.v1.CursorFieldOrBuilder> 
      getCursorsOrBuilderList();
  /**
   * <pre>
   * Supported cursor fields for incremental reads (updated_at, version, LSN, etc.).
   * </pre>
   *
   * <code>repeated .datapower.noesis.v1.CursorField cursors = 12 [json_name = "cursors"];</code>
   */
  datapower.noesis.v1.CursorFieldOrBuilder getCursorsOrBuilder(
      int index);

  /**
   * <pre>
   * Which extraction modes / features are supported by this entity.
   * </pre>
   *
   * <code>.datapower.noesis.v1.ExtractionCapabilities capabilities = 13 [json_name = "capabilities"];</code>
   * @return Whether the capabilities field is set.
   */
  boolean hasCapabilities();
  /**
   * <pre>
   * Which extraction modes / features are supported by this entity.
   * </pre>
   *
   * <code>.datapower.noesis.v1.ExtractionCapabilities capabilities = 13 [json_name = "capabilities"];</code>
   * @return The capabilities.
   */
  datapower.noesis.v1.ExtractionCapabilities getCapabilities();
  /**
   * <pre>
   * Which extraction modes / features are supported by this entity.
   * </pre>
   *
   * <code>.datapower.noesis.v1.ExtractionCapabilities capabilities = 13 [json_name = "capabilities"];</code>
   */
  datapower.noesis.v1.ExtractionCapabilitiesOrBuilder getCapabilitiesOrBuilder();

  /**
   * <pre>
   * Optional sizing hint.
   * </pre>
   *
   * <code>int64 estimated_rows = 14 [json_name = "estimatedRows"];</code>
   * @return The estimatedRows.
   */
  long getEstimatedRows();
}
