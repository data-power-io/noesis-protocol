// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: datapower/noesis/v1/services.proto

package noesisv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RawDataService_GetRowById_FullMethodName  = "/datapower.noesis.v1.RawDataService/GetRowById"
	RawDataService_Search_FullMethodName      = "/datapower.noesis.v1.RawDataService/Search"
	RawDataService_BatchLookup_FullMethodName = "/datapower.noesis.v1.RawDataService/BatchLookup"
)

// RawDataServiceClient is the client API for RawDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RawDataService provides access to RAW zone data for enrichment
type RawDataServiceClient interface {
	// GetRowById retrieves a specific row by ID
	GetRowById(ctx context.Context, in *RowLookupRequest, opts ...grpc.CallOption) (*RowLookupResponse, error)
	// Search performs a search query on RAW data
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// BatchLookup retrieves multiple rows in a single request
	BatchLookup(ctx context.Context, in *BatchLookupRequest, opts ...grpc.CallOption) (*BatchLookupResponse, error)
}

type rawDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRawDataServiceClient(cc grpc.ClientConnInterface) RawDataServiceClient {
	return &rawDataServiceClient{cc}
}

func (c *rawDataServiceClient) GetRowById(ctx context.Context, in *RowLookupRequest, opts ...grpc.CallOption) (*RowLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RowLookupResponse)
	err := c.cc.Invoke(ctx, RawDataService_GetRowById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawDataServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, RawDataService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawDataServiceClient) BatchLookup(ctx context.Context, in *BatchLookupRequest, opts ...grpc.CallOption) (*BatchLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLookupResponse)
	err := c.cc.Invoke(ctx, RawDataService_BatchLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RawDataServiceServer is the server API for RawDataService service.
// All implementations must embed UnimplementedRawDataServiceServer
// for forward compatibility.
//
// RawDataService provides access to RAW zone data for enrichment
type RawDataServiceServer interface {
	// GetRowById retrieves a specific row by ID
	GetRowById(context.Context, *RowLookupRequest) (*RowLookupResponse, error)
	// Search performs a search query on RAW data
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// BatchLookup retrieves multiple rows in a single request
	BatchLookup(context.Context, *BatchLookupRequest) (*BatchLookupResponse, error)
	mustEmbedUnimplementedRawDataServiceServer()
}

// UnimplementedRawDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRawDataServiceServer struct{}

func (UnimplementedRawDataServiceServer) GetRowById(context.Context, *RowLookupRequest) (*RowLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRowById not implemented")
}
func (UnimplementedRawDataServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedRawDataServiceServer) BatchLookup(context.Context, *BatchLookupRequest) (*BatchLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLookup not implemented")
}
func (UnimplementedRawDataServiceServer) mustEmbedUnimplementedRawDataServiceServer() {}
func (UnimplementedRawDataServiceServer) testEmbeddedByValue()                        {}

// UnsafeRawDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawDataServiceServer will
// result in compilation errors.
type UnsafeRawDataServiceServer interface {
	mustEmbedUnimplementedRawDataServiceServer()
}

func RegisterRawDataServiceServer(s grpc.ServiceRegistrar, srv RawDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedRawDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RawDataService_ServiceDesc, srv)
}

func _RawDataService_GetRowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawDataServiceServer).GetRowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawDataService_GetRowById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawDataServiceServer).GetRowById(ctx, req.(*RowLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawDataService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawDataServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawDataService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawDataServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawDataService_BatchLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawDataServiceServer).BatchLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawDataService_BatchLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawDataServiceServer).BatchLookup(ctx, req.(*BatchLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RawDataService_ServiceDesc is the grpc.ServiceDesc for RawDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RawDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datapower.noesis.v1.RawDataService",
	HandlerType: (*RawDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRowById",
			Handler:    _RawDataService_GetRowById_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _RawDataService_Search_Handler,
		},
		{
			MethodName: "BatchLookup",
			Handler:    _RawDataService_BatchLookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datapower/noesis/v1/services.proto",
}

const (
	EnrichmentService_EnrichRecord_FullMethodName   = "/datapower.noesis.v1.EnrichmentService/EnrichRecord"
	EnrichmentService_ValidateRecord_FullMethodName = "/datapower.noesis.v1.EnrichmentService/ValidateRecord"
)

// EnrichmentServiceClient is the client API for EnrichmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EnrichmentService provides custom business logic enrichment
type EnrichmentServiceClient interface {
	// EnrichRecord applies business rules and enrichment logic
	EnrichRecord(ctx context.Context, in *EnrichmentRequest, opts ...grpc.CallOption) (*EnrichmentResponse, error)
	// ValidateRecord performs validation checks
	ValidateRecord(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
}

type enrichmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrichmentServiceClient(cc grpc.ClientConnInterface) EnrichmentServiceClient {
	return &enrichmentServiceClient{cc}
}

func (c *enrichmentServiceClient) EnrichRecord(ctx context.Context, in *EnrichmentRequest, opts ...grpc.CallOption) (*EnrichmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrichmentResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_EnrichRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) ValidateRecord(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_ValidateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrichmentServiceServer is the server API for EnrichmentService service.
// All implementations must embed UnimplementedEnrichmentServiceServer
// for forward compatibility.
//
// EnrichmentService provides custom business logic enrichment
type EnrichmentServiceServer interface {
	// EnrichRecord applies business rules and enrichment logic
	EnrichRecord(context.Context, *EnrichmentRequest) (*EnrichmentResponse, error)
	// ValidateRecord performs validation checks
	ValidateRecord(context.Context, *ValidationRequest) (*ValidationResponse, error)
	mustEmbedUnimplementedEnrichmentServiceServer()
}

// UnimplementedEnrichmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnrichmentServiceServer struct{}

func (UnimplementedEnrichmentServiceServer) EnrichRecord(context.Context, *EnrichmentRequest) (*EnrichmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichRecord not implemented")
}
func (UnimplementedEnrichmentServiceServer) ValidateRecord(context.Context, *ValidationRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRecord not implemented")
}
func (UnimplementedEnrichmentServiceServer) mustEmbedUnimplementedEnrichmentServiceServer() {}
func (UnimplementedEnrichmentServiceServer) testEmbeddedByValue()                           {}

// UnsafeEnrichmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrichmentServiceServer will
// result in compilation errors.
type UnsafeEnrichmentServiceServer interface {
	mustEmbedUnimplementedEnrichmentServiceServer()
}

func RegisterEnrichmentServiceServer(s grpc.ServiceRegistrar, srv EnrichmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnrichmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnrichmentService_ServiceDesc, srv)
}

func _EnrichmentService_EnrichRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).EnrichRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_EnrichRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).EnrichRecord(ctx, req.(*EnrichmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_ValidateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).ValidateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_ValidateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).ValidateRecord(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrichmentService_ServiceDesc is the grpc.ServiceDesc for EnrichmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrichmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datapower.noesis.v1.EnrichmentService",
	HandlerType: (*EnrichmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrichRecord",
			Handler:    _EnrichmentService_EnrichRecord_Handler,
		},
		{
			MethodName: "ValidateRecord",
			Handler:    _EnrichmentService_ValidateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datapower/noesis/v1/services.proto",
}
