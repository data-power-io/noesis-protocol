// Transform Events Protocol
// --------------------------
// Defines event structures produced by Flink streaming and batch jobs.
// These events flow through Kafka topics and are consumed by the CDC Generator service.
//
// Event Types:
// - ATTRIBUTE_PATCH: Incremental updates from streaming jobs (only changed fields)
// - FULL_STATE: Complete records from batch reconciliation jobs (all fields)
//
// The CDC Generator consumes these events, maintains state, and produces CDC events
// for downstream systems.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: datapower/noesis/v1/patch_events.proto

package noesisv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	// Incremental update from a streaming job
	// Contains only the primary key + changed mutable fields
	EventType_ATTRIBUTE_PATCH EventType = 1
	// Full record from a batch reconciliation job
	// Contains the primary key + all fields
	EventType_FULL_STATE EventType = 2
	// Tombstone event (for deletions)
	EventType_RECORD_DELETE EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "ATTRIBUTE_PATCH",
		2: "FULL_STATE",
		3: "RECORD_DELETE",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"ATTRIBUTE_PATCH":        1,
		"FULL_STATE":             2,
		"RECORD_DELETE":          3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_datapower_noesis_v1_patch_events_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_datapower_noesis_v1_patch_events_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{0}
}

type JobType int32

const (
	JobType_JOB_TYPE_UNSPECIFIED JobType = 0
	JobType_STREAMING            JobType = 1
	JobType_BATCH                JobType = 2
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "JOB_TYPE_UNSPECIFIED",
		1: "STREAMING",
		2: "BATCH",
	}
	JobType_value = map[string]int32{
		"JOB_TYPE_UNSPECIFIED": 0,
		"STREAMING":            1,
		"BATCH":                2,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_datapower_noesis_v1_patch_events_proto_enumTypes[1].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_datapower_noesis_v1_patch_events_proto_enumTypes[1]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{1}
}

// TransformEvent is the top-level message written to transform-events Kafka topics
// All Flink jobs (streaming and batch) produce events in this format
type TransformEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event type discriminator
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=datapower.noesis.v1.EventType" json:"event_type,omitempty"`
	// JSON-encoded payload (either AttributePatch or FullState)
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Event metadata
	Metadata *EventMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Optional: Schema version for payload
	SchemaVersion string `protobuf:"bytes,4,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformEvent) Reset() {
	*x = TransformEvent{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformEvent) ProtoMessage() {}

func (x *TransformEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformEvent.ProtoReflect.Descriptor instead.
func (*TransformEvent) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{0}
}

func (x *TransformEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *TransformEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *TransformEvent) GetMetadata() *EventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TransformEvent) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

// EventMetadata provides context about the event
type EventMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipeline that produced this event
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	// Job that produced this event (streaming or batch job name)
	JobName string `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	// Job type (streaming or batch)
	JobType JobType `protobuf:"varint,3,opt,name=job_type,json=jobType,proto3,enum=datapower.noesis.v1.JobType" json:"job_type,omitempty"`
	// When the event was produced (Flink processing time)
	ProducedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=produced_at,json=producedAt,proto3" json:"produced_at,omitempty"`
	// Event time (for streaming events, based on source data timestamp)
	EventTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Watermark (for streaming events)
	Watermark *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=watermark,proto3" json:"watermark,omitempty"`
	// Execution ID (workflow run ID that produced this event)
	ExecutionId string `protobuf:"bytes,7,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// Kafka partition this event was written to
	KafkaPartition int32 `protobuf:"varint,8,opt,name=kafka_partition,json=kafkaPartition,proto3" json:"kafka_partition,omitempty"`
	// Kafka offset
	KafkaOffset   int64 `protobuf:"varint,9,opt,name=kafka_offset,json=kafkaOffset,proto3" json:"kafka_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{1}
}

func (x *EventMetadata) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *EventMetadata) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *EventMetadata) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_JOB_TYPE_UNSPECIFIED
}

func (x *EventMetadata) GetProducedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProducedAt
	}
	return nil
}

func (x *EventMetadata) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *EventMetadata) GetWatermark() *timestamppb.Timestamp {
	if x != nil {
		return x.Watermark
	}
	return nil
}

func (x *EventMetadata) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *EventMetadata) GetKafkaPartition() int32 {
	if x != nil {
		return x.KafkaPartition
	}
	return 0
}

func (x *EventMetadata) GetKafkaOffset() int64 {
	if x != nil {
		return x.KafkaOffset
	}
	return 0
}

// AttributePatch represents an incremental update to mutable fields
// Produced by Flink streaming jobs
//
// Example JSON payload:
//
//	{
//	  "primary_key": "customer_id",
//	  "primary_key_value": "c-123",
//	  "changes": {
//	    "total_order_count": 6,
//	    "lifetime_value": 175.50,
//	    "latest_loyalty_status": "gold"
//	  }
//	}
type AttributePatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary key field name (e.g., "customer_id")
	PrimaryKey string `protobuf:"bytes,1,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// Primary key value (e.g., "c-123")
	PrimaryKeyValue string `protobuf:"bytes,2,opt,name=primary_key_value,json=primaryKeyValue,proto3" json:"primary_key_value,omitempty"`
	// Changed attributes (field name -> new value)
	// Only includes fields that have changed
	Changes map[string]*structpb.Value `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Previous values (optional, for debugging)
	PreviousValues map[string]*structpb.Value `protobuf:"bytes,4,rep,name=previous_values,json=previousValues,proto3" json:"previous_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Source information (which streaming source triggered this update)
	Source        *SourceInfo `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributePatch) Reset() {
	*x = AttributePatch{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributePatch) ProtoMessage() {}

func (x *AttributePatch) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributePatch.ProtoReflect.Descriptor instead.
func (*AttributePatch) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{2}
}

func (x *AttributePatch) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *AttributePatch) GetPrimaryKeyValue() string {
	if x != nil {
		return x.PrimaryKeyValue
	}
	return ""
}

func (x *AttributePatch) GetChanges() map[string]*structpb.Value {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *AttributePatch) GetPreviousValues() map[string]*structpb.Value {
	if x != nil {
		return x.PreviousValues
	}
	return nil
}

func (x *AttributePatch) GetSource() *SourceInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

// FullState represents a complete record
// Produced by Flink batch reconciliation jobs
//
// Example JSON payload:
//
//	{
//	  "primary_key": "customer_id",
//	  "primary_key_value": "c-123",
//	  "attributes": {
//	    "customer_id": "c-123",
//	    "signup_date": "2024-01-15",
//	    "latest_loyalty_status": "gold",
//	    "total_order_count": 6,
//	    "lifetime_value": 175.50
//	  }
//	}
type FullState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary key field name
	PrimaryKey string `protobuf:"bytes,1,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// Primary key value
	PrimaryKeyValue string `protobuf:"bytes,2,opt,name=primary_key_value,json=primaryKeyValue,proto3" json:"primary_key_value,omitempty"`
	// All attributes (both mutable and immutable)
	Attributes map[string]*structpb.Value `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Batch run information
	BatchRun      *BatchRunInfo `protobuf:"bytes,4,opt,name=batch_run,json=batchRun,proto3" json:"batch_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullState) Reset() {
	*x = FullState{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullState) ProtoMessage() {}

func (x *FullState) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullState.ProtoReflect.Descriptor instead.
func (*FullState) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{3}
}

func (x *FullState) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *FullState) GetPrimaryKeyValue() string {
	if x != nil {
		return x.PrimaryKeyValue
	}
	return ""
}

func (x *FullState) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FullState) GetBatchRun() *BatchRunInfo {
	if x != nil {
		return x.BatchRun
	}
	return nil
}

// SourceInfo identifies which streaming source triggered an update
type SourceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source alias from pipeline definition
	SourceAlias string `protobuf:"bytes,1,opt,name=source_alias,json=sourceAlias,proto3" json:"source_alias,omitempty"`
	// Original event timestamp from source
	SourceTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=source_timestamp,json=sourceTimestamp,proto3" json:"source_timestamp,omitempty"`
	// Source record key/ID
	SourceRecordId string `protobuf:"bytes,3,opt,name=source_record_id,json=sourceRecordId,proto3" json:"source_record_id,omitempty"`
	// Additional source metadata
	Metadata      map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{4}
}

func (x *SourceInfo) GetSourceAlias() string {
	if x != nil {
		return x.SourceAlias
	}
	return ""
}

func (x *SourceInfo) GetSourceTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceTimestamp
	}
	return nil
}

func (x *SourceInfo) GetSourceRecordId() string {
	if x != nil {
		return x.SourceRecordId
	}
	return ""
}

func (x *SourceInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BatchRunInfo provides context about the batch run
type BatchRunInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Batch run ID
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// When the batch started
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Batch execution mode
	ExecutionMode string `protobuf:"bytes,3,opt,name=execution_mode,json=executionMode,proto3" json:"execution_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRunInfo) Reset() {
	*x = BatchRunInfo{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRunInfo) ProtoMessage() {}

func (x *BatchRunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRunInfo.ProtoReflect.Descriptor instead.
func (*BatchRunInfo) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{5}
}

func (x *BatchRunInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *BatchRunInfo) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *BatchRunInfo) GetExecutionMode() string {
	if x != nil {
		return x.ExecutionMode
	}
	return ""
}

// DeleteEvent represents a record deletion
type DeleteEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary key field name
	PrimaryKey string `protobuf:"bytes,1,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// Primary key value of deleted record
	PrimaryKeyValue string `protobuf:"bytes,2,opt,name=primary_key_value,json=primaryKeyValue,proto3" json:"primary_key_value,omitempty"`
	// Deletion timestamp
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Reason for deletion (soft delete, hard delete, retention policy)
	DeletionReason string `protobuf:"bytes,4,opt,name=deletion_reason,json=deletionReason,proto3" json:"deletion_reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteEvent) Reset() {
	*x = DeleteEvent{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEvent) ProtoMessage() {}

func (x *DeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEvent.ProtoReflect.Descriptor instead.
func (*DeleteEvent) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteEvent) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *DeleteEvent) GetPrimaryKeyValue() string {
	if x != nil {
		return x.PrimaryKeyValue
	}
	return ""
}

func (x *DeleteEvent) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *DeleteEvent) GetDeletionReason() string {
	if x != nil {
		return x.DeletionReason
	}
	return ""
}

// TransformEventBatch is used for batch processing of events
// Useful for bulk operations and optimization
type TransformEventBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Batch ID
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Pipeline name
	PipelineName string `protobuf:"bytes,2,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	// All events in this batch
	Events []*TransformEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// Batch metadata
	Metadata      *BatchMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformEventBatch) Reset() {
	*x = TransformEventBatch{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformEventBatch) ProtoMessage() {}

func (x *TransformEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformEventBatch.ProtoReflect.Descriptor instead.
func (*TransformEventBatch) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{7}
}

func (x *TransformEventBatch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *TransformEventBatch) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *TransformEventBatch) GetEvents() []*TransformEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TransformEventBatch) GetMetadata() *BatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BatchMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of events in batch
	EventCount int32 `protobuf:"varint,1,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
	// Batch creation time
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// First event timestamp in batch
	FirstEventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=first_event_time,json=firstEventTime,proto3" json:"first_event_time,omitempty"`
	// Last event timestamp in batch
	LastEventTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
	// Batch size in bytes
	BatchSizeBytes int64 `protobuf:"varint,5,opt,name=batch_size_bytes,json=batchSizeBytes,proto3" json:"batch_size_bytes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchMetadata) Reset() {
	*x = BatchMetadata{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMetadata) ProtoMessage() {}

func (x *BatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMetadata.ProtoReflect.Descriptor instead.
func (*BatchMetadata) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{8}
}

func (x *BatchMetadata) GetEventCount() int32 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

func (x *BatchMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BatchMetadata) GetFirstEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstEventTime
	}
	return nil
}

func (x *BatchMetadata) GetLastEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

func (x *BatchMetadata) GetBatchSizeBytes() int64 {
	if x != nil {
		return x.BatchSizeBytes
	}
	return 0
}

// EventStatistics provides metrics about transform events
// Used for monitoring and observability
type EventStatistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipeline name
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	// Time window for these statistics
	WindowStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	WindowEnd   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=window_end,json=windowEnd,proto3" json:"window_end,omitempty"`
	// Event counts by type
	AttributePatchCount int64 `protobuf:"varint,4,opt,name=attribute_patch_count,json=attributePatchCount,proto3" json:"attribute_patch_count,omitempty"`
	FullStateCount      int64 `protobuf:"varint,5,opt,name=full_state_count,json=fullStateCount,proto3" json:"full_state_count,omitempty"`
	DeleteCount         int64 `protobuf:"varint,6,opt,name=delete_count,json=deleteCount,proto3" json:"delete_count,omitempty"`
	// Total events
	TotalEvents int64 `protobuf:"varint,7,opt,name=total_events,json=totalEvents,proto3" json:"total_events,omitempty"`
	// Bytes processed
	TotalBytes int64 `protobuf:"varint,8,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// Events per second
	EventsPerSecond float64 `protobuf:"fixed64,9,opt,name=events_per_second,json=eventsPerSecond,proto3" json:"events_per_second,omitempty"`
	// Bytes per second
	BytesPerSecond float64 `protobuf:"fixed64,10,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
	// Per-job statistics
	JobStats      map[string]*JobStatistics `protobuf:"bytes,11,rep,name=job_stats,json=jobStats,proto3" json:"job_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatistics) Reset() {
	*x = EventStatistics{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatistics) ProtoMessage() {}

func (x *EventStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatistics.ProtoReflect.Descriptor instead.
func (*EventStatistics) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{9}
}

func (x *EventStatistics) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *EventStatistics) GetWindowStart() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *EventStatistics) GetWindowEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.WindowEnd
	}
	return nil
}

func (x *EventStatistics) GetAttributePatchCount() int64 {
	if x != nil {
		return x.AttributePatchCount
	}
	return 0
}

func (x *EventStatistics) GetFullStateCount() int64 {
	if x != nil {
		return x.FullStateCount
	}
	return 0
}

func (x *EventStatistics) GetDeleteCount() int64 {
	if x != nil {
		return x.DeleteCount
	}
	return 0
}

func (x *EventStatistics) GetTotalEvents() int64 {
	if x != nil {
		return x.TotalEvents
	}
	return 0
}

func (x *EventStatistics) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *EventStatistics) GetEventsPerSecond() float64 {
	if x != nil {
		return x.EventsPerSecond
	}
	return 0
}

func (x *EventStatistics) GetBytesPerSecond() float64 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

func (x *EventStatistics) GetJobStats() map[string]*JobStatistics {
	if x != nil {
		return x.JobStats
	}
	return nil
}

type JobStatistics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	JobName        string                 `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	JobType        JobType                `protobuf:"varint,2,opt,name=job_type,json=jobType,proto3,enum=datapower.noesis.v1.JobType" json:"job_type,omitempty"`
	EventsProduced int64                  `protobuf:"varint,3,opt,name=events_produced,json=eventsProduced,proto3" json:"events_produced,omitempty"`
	BytesProduced  int64                  `protobuf:"varint,4,opt,name=bytes_produced,json=bytesProduced,proto3" json:"bytes_produced,omitempty"`
	LastEventTime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JobStatistics) Reset() {
	*x = JobStatistics{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics) ProtoMessage() {}

func (x *JobStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics.ProtoReflect.Descriptor instead.
func (*JobStatistics) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{10}
}

func (x *JobStatistics) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobStatistics) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_JOB_TYPE_UNSPECIFIED
}

func (x *JobStatistics) GetEventsProduced() int64 {
	if x != nil {
		return x.EventsProduced
	}
	return 0
}

func (x *JobStatistics) GetBytesProduced() int64 {
	if x != nil {
		return x.BytesProduced
	}
	return 0
}

func (x *JobStatistics) GetLastEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

// EventValidationResult for validating transform events
type EventValidationResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the event is valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Validation errors
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Validation warnings
	Warnings []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// Schema violations
	SchemaViolations []*SchemaViolation `protobuf:"bytes,4,rep,name=schema_violations,json=schemaViolations,proto3" json:"schema_violations,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EventValidationResult) Reset() {
	*x = EventValidationResult{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventValidationResult) ProtoMessage() {}

func (x *EventValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventValidationResult.ProtoReflect.Descriptor instead.
func (*EventValidationResult) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{11}
}

func (x *EventValidationResult) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *EventValidationResult) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *EventValidationResult) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *EventValidationResult) GetSchemaViolations() []*SchemaViolation {
	if x != nil {
		return x.SchemaViolations
	}
	return nil
}

type SchemaViolation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Field that violated schema
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Expected type
	ExpectedType string `protobuf:"bytes,2,opt,name=expected_type,json=expectedType,proto3" json:"expected_type,omitempty"`
	// Actual type
	ActualType string `protobuf:"bytes,3,opt,name=actual_type,json=actualType,proto3" json:"actual_type,omitempty"`
	// Error message
	Message       string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaViolation) Reset() {
	*x = SchemaViolation{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaViolation) ProtoMessage() {}

func (x *SchemaViolation) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaViolation.ProtoReflect.Descriptor instead.
func (*SchemaViolation) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{12}
}

func (x *SchemaViolation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SchemaViolation) GetExpectedType() string {
	if x != nil {
		return x.ExpectedType
	}
	return ""
}

func (x *SchemaViolation) GetActualType() string {
	if x != nil {
		return x.ActualType
	}
	return ""
}

func (x *SchemaViolation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// TransformEventFilter for filtering events (used by consumers)
type TransformEventFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by event types
	EventTypes []EventType `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=datapower.noesis.v1.EventType" json:"event_types,omitempty"`
	// Filter by pipeline names
	PipelineNames []string `protobuf:"bytes,2,rep,name=pipeline_names,json=pipelineNames,proto3" json:"pipeline_names,omitempty"`
	// Filter by job names
	JobNames []string `protobuf:"bytes,3,rep,name=job_names,json=jobNames,proto3" json:"job_names,omitempty"`
	// Time range filter
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Filter by primary key values (useful for debugging specific records)
	PrimaryKeyValues []string `protobuf:"bytes,6,rep,name=primary_key_values,json=primaryKeyValues,proto3" json:"primary_key_values,omitempty"`
	// Custom filter expression (optional, implementation-specific)
	FilterExpression string `protobuf:"bytes,7,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransformEventFilter) Reset() {
	*x = TransformEventFilter{}
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformEventFilter) ProtoMessage() {}

func (x *TransformEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_patch_events_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformEventFilter.ProtoReflect.Descriptor instead.
func (*TransformEventFilter) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_patch_events_proto_rawDescGZIP(), []int{13}
}

func (x *TransformEventFilter) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *TransformEventFilter) GetPipelineNames() []string {
	if x != nil {
		return x.PipelineNames
	}
	return nil
}

func (x *TransformEventFilter) GetJobNames() []string {
	if x != nil {
		return x.JobNames
	}
	return nil
}

func (x *TransformEventFilter) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TransformEventFilter) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TransformEventFilter) GetPrimaryKeyValues() []string {
	if x != nil {
		return x.PrimaryKeyValues
	}
	return nil
}

func (x *TransformEventFilter) GetFilterExpression() string {
	if x != nil {
		return x.FilterExpression
	}
	return ""
}

var File_datapower_noesis_v1_patch_events_proto protoreflect.FileDescriptor

const file_datapower_noesis_v1_patch_events_proto_rawDesc = "" +
	"\n" +
	"&datapower/noesis/v1/patch_events.proto\x12\x13datapower.noesis.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd0\x01\n" +
	"\x0eTransformEvent\x12=\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2\x1e.datapower.noesis.v1.EventTypeR\teventType\x12\x18\n" +
	"\apayload\x18\x02 \x01(\tR\apayload\x12>\n" +
	"\bmetadata\x18\x03 \x01(\v2\".datapower.noesis.v1.EventMetadataR\bmetadata\x12%\n" +
	"\x0eschema_version\x18\x04 \x01(\tR\rschemaVersion\"\xa9\x03\n" +
	"\rEventMetadata\x12#\n" +
	"\rpipeline_name\x18\x01 \x01(\tR\fpipelineName\x12\x19\n" +
	"\bjob_name\x18\x02 \x01(\tR\ajobName\x127\n" +
	"\bjob_type\x18\x03 \x01(\x0e2\x1c.datapower.noesis.v1.JobTypeR\ajobType\x12;\n" +
	"\vproduced_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"producedAt\x129\n" +
	"\n" +
	"event_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x128\n" +
	"\twatermark\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\twatermark\x12!\n" +
	"\fexecution_id\x18\a \x01(\tR\vexecutionId\x12'\n" +
	"\x0fkafka_partition\x18\b \x01(\x05R\x0ekafkaPartition\x12!\n" +
	"\fkafka_offset\x18\t \x01(\x03R\vkafkaOffset\"\xf3\x03\n" +
	"\x0eAttributePatch\x12\x1f\n" +
	"\vprimary_key\x18\x01 \x01(\tR\n" +
	"primaryKey\x12*\n" +
	"\x11primary_key_value\x18\x02 \x01(\tR\x0fprimaryKeyValue\x12J\n" +
	"\achanges\x18\x03 \x03(\v20.datapower.noesis.v1.AttributePatch.ChangesEntryR\achanges\x12`\n" +
	"\x0fprevious_values\x18\x04 \x03(\v27.datapower.noesis.v1.AttributePatch.PreviousValuesEntryR\x0epreviousValues\x127\n" +
	"\x06source\x18\x05 \x01(\v2\x1f.datapower.noesis.v1.SourceInfoR\x06source\x1aR\n" +
	"\fChangesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1aY\n" +
	"\x13PreviousValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xbf\x02\n" +
	"\tFullState\x12\x1f\n" +
	"\vprimary_key\x18\x01 \x01(\tR\n" +
	"primaryKey\x12*\n" +
	"\x11primary_key_value\x18\x02 \x01(\tR\x0fprimaryKeyValue\x12N\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2..datapower.noesis.v1.FullState.AttributesEntryR\n" +
	"attributes\x12>\n" +
	"\tbatch_run\x18\x04 \x01(\v2!.datapower.noesis.v1.BatchRunInfoR\bbatchRun\x1aU\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xa8\x02\n" +
	"\n" +
	"SourceInfo\x12!\n" +
	"\fsource_alias\x18\x01 \x01(\tR\vsourceAlias\x12E\n" +
	"\x10source_timestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0fsourceTimestamp\x12(\n" +
	"\x10source_record_id\x18\x03 \x01(\tR\x0esourceRecordId\x12I\n" +
	"\bmetadata\x18\x04 \x03(\v2-.datapower.noesis.v1.SourceInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x87\x01\n" +
	"\fBatchRunInfo\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x129\n" +
	"\n" +
	"started_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12%\n" +
	"\x0eexecution_mode\x18\x03 \x01(\tR\rexecutionMode\"\xbe\x01\n" +
	"\vDeleteEvent\x12\x1f\n" +
	"\vprimary_key\x18\x01 \x01(\tR\n" +
	"primaryKey\x12*\n" +
	"\x11primary_key_value\x18\x02 \x01(\tR\x0fprimaryKeyValue\x129\n" +
	"\n" +
	"deleted_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tdeletedAt\x12'\n" +
	"\x0fdeletion_reason\x18\x04 \x01(\tR\x0edeletionReason\"\xd2\x01\n" +
	"\x13TransformEventBatch\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12#\n" +
	"\rpipeline_name\x18\x02 \x01(\tR\fpipelineName\x12;\n" +
	"\x06events\x18\x03 \x03(\v2#.datapower.noesis.v1.TransformEventR\x06events\x12>\n" +
	"\bmetadata\x18\x04 \x01(\v2\".datapower.noesis.v1.BatchMetadataR\bmetadata\"\x9f\x02\n" +
	"\rBatchMetadata\x12\x1f\n" +
	"\vevent_count\x18\x01 \x01(\x05R\n" +
	"eventCount\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12D\n" +
	"\x10first_event_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0efirstEventTime\x12B\n" +
	"\x0flast_event_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rlastEventTime\x12(\n" +
	"\x10batch_size_bytes\x18\x05 \x01(\x03R\x0ebatchSizeBytes\"\xfd\x04\n" +
	"\x0fEventStatistics\x12#\n" +
	"\rpipeline_name\x18\x01 \x01(\tR\fpipelineName\x12=\n" +
	"\fwindow_start\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\vwindowStart\x129\n" +
	"\n" +
	"window_end\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\twindowEnd\x122\n" +
	"\x15attribute_patch_count\x18\x04 \x01(\x03R\x13attributePatchCount\x12(\n" +
	"\x10full_state_count\x18\x05 \x01(\x03R\x0efullStateCount\x12!\n" +
	"\fdelete_count\x18\x06 \x01(\x03R\vdeleteCount\x12!\n" +
	"\ftotal_events\x18\a \x01(\x03R\vtotalEvents\x12\x1f\n" +
	"\vtotal_bytes\x18\b \x01(\x03R\n" +
	"totalBytes\x12*\n" +
	"\x11events_per_second\x18\t \x01(\x01R\x0feventsPerSecond\x12(\n" +
	"\x10bytes_per_second\x18\n" +
	" \x01(\x01R\x0ebytesPerSecond\x12O\n" +
	"\tjob_stats\x18\v \x03(\v22.datapower.noesis.v1.EventStatistics.JobStatsEntryR\bjobStats\x1a_\n" +
	"\rJobStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x128\n" +
	"\x05value\x18\x02 \x01(\v2\".datapower.noesis.v1.JobStatisticsR\x05value:\x028\x01\"\xf7\x01\n" +
	"\rJobStatistics\x12\x19\n" +
	"\bjob_name\x18\x01 \x01(\tR\ajobName\x127\n" +
	"\bjob_type\x18\x02 \x01(\x0e2\x1c.datapower.noesis.v1.JobTypeR\ajobType\x12'\n" +
	"\x0fevents_produced\x18\x03 \x01(\x03R\x0eeventsProduced\x12%\n" +
	"\x0ebytes_produced\x18\x04 \x01(\x03R\rbytesProduced\x12B\n" +
	"\x0flast_event_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rlastEventTime\"\xb4\x01\n" +
	"\x15EventValidationResult\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\x12\x1a\n" +
	"\bwarnings\x18\x03 \x03(\tR\bwarnings\x12Q\n" +
	"\x11schema_violations\x18\x04 \x03(\v2$.datapower.noesis.v1.SchemaViolationR\x10schemaViolations\"\x87\x01\n" +
	"\x0fSchemaViolation\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12#\n" +
	"\rexpected_type\x18\x02 \x01(\tR\fexpectedType\x12\x1f\n" +
	"\vactual_type\x18\x03 \x01(\tR\n" +
	"actualType\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"\xe8\x02\n" +
	"\x14TransformEventFilter\x12?\n" +
	"\vevent_types\x18\x01 \x03(\x0e2\x1e.datapower.noesis.v1.EventTypeR\n" +
	"eventTypes\x12%\n" +
	"\x0epipeline_names\x18\x02 \x03(\tR\rpipelineNames\x12\x1b\n" +
	"\tjob_names\x18\x03 \x03(\tR\bjobNames\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12,\n" +
	"\x12primary_key_values\x18\x06 \x03(\tR\x10primaryKeyValues\x12+\n" +
	"\x11filter_expression\x18\a \x01(\tR\x10filterExpression*_\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fATTRIBUTE_PATCH\x10\x01\x12\x0e\n" +
	"\n" +
	"FULL_STATE\x10\x02\x12\x11\n" +
	"\rRECORD_DELETE\x10\x03*=\n" +
	"\aJobType\x12\x18\n" +
	"\x14JOB_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tSTREAMING\x10\x01\x12\t\n" +
	"\x05BATCH\x10\x02Bk\n" +
	"\x13datapower.noesis.v1P\x01ZRgithub.com/data-power-io/noesis-protocol/languages/go/datapower/noesis/v1;noesisv1b\x06proto3"

var (
	file_datapower_noesis_v1_patch_events_proto_rawDescOnce sync.Once
	file_datapower_noesis_v1_patch_events_proto_rawDescData []byte
)

func file_datapower_noesis_v1_patch_events_proto_rawDescGZIP() []byte {
	file_datapower_noesis_v1_patch_events_proto_rawDescOnce.Do(func() {
		file_datapower_noesis_v1_patch_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_patch_events_proto_rawDesc), len(file_datapower_noesis_v1_patch_events_proto_rawDesc)))
	})
	return file_datapower_noesis_v1_patch_events_proto_rawDescData
}

var file_datapower_noesis_v1_patch_events_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_datapower_noesis_v1_patch_events_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_datapower_noesis_v1_patch_events_proto_goTypes = []any{
	(EventType)(0),                // 0: datapower.noesis.v1.EventType
	(JobType)(0),                  // 1: datapower.noesis.v1.JobType
	(*TransformEvent)(nil),        // 2: datapower.noesis.v1.TransformEvent
	(*EventMetadata)(nil),         // 3: datapower.noesis.v1.EventMetadata
	(*AttributePatch)(nil),        // 4: datapower.noesis.v1.AttributePatch
	(*FullState)(nil),             // 5: datapower.noesis.v1.FullState
	(*SourceInfo)(nil),            // 6: datapower.noesis.v1.SourceInfo
	(*BatchRunInfo)(nil),          // 7: datapower.noesis.v1.BatchRunInfo
	(*DeleteEvent)(nil),           // 8: datapower.noesis.v1.DeleteEvent
	(*TransformEventBatch)(nil),   // 9: datapower.noesis.v1.TransformEventBatch
	(*BatchMetadata)(nil),         // 10: datapower.noesis.v1.BatchMetadata
	(*EventStatistics)(nil),       // 11: datapower.noesis.v1.EventStatistics
	(*JobStatistics)(nil),         // 12: datapower.noesis.v1.JobStatistics
	(*EventValidationResult)(nil), // 13: datapower.noesis.v1.EventValidationResult
	(*SchemaViolation)(nil),       // 14: datapower.noesis.v1.SchemaViolation
	(*TransformEventFilter)(nil),  // 15: datapower.noesis.v1.TransformEventFilter
	nil,                           // 16: datapower.noesis.v1.AttributePatch.ChangesEntry
	nil,                           // 17: datapower.noesis.v1.AttributePatch.PreviousValuesEntry
	nil,                           // 18: datapower.noesis.v1.FullState.AttributesEntry
	nil,                           // 19: datapower.noesis.v1.SourceInfo.MetadataEntry
	nil,                           // 20: datapower.noesis.v1.EventStatistics.JobStatsEntry
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*structpb.Value)(nil),        // 22: google.protobuf.Value
}
var file_datapower_noesis_v1_patch_events_proto_depIdxs = []int32{
	0,  // 0: datapower.noesis.v1.TransformEvent.event_type:type_name -> datapower.noesis.v1.EventType
	3,  // 1: datapower.noesis.v1.TransformEvent.metadata:type_name -> datapower.noesis.v1.EventMetadata
	1,  // 2: datapower.noesis.v1.EventMetadata.job_type:type_name -> datapower.noesis.v1.JobType
	21, // 3: datapower.noesis.v1.EventMetadata.produced_at:type_name -> google.protobuf.Timestamp
	21, // 4: datapower.noesis.v1.EventMetadata.event_time:type_name -> google.protobuf.Timestamp
	21, // 5: datapower.noesis.v1.EventMetadata.watermark:type_name -> google.protobuf.Timestamp
	16, // 6: datapower.noesis.v1.AttributePatch.changes:type_name -> datapower.noesis.v1.AttributePatch.ChangesEntry
	17, // 7: datapower.noesis.v1.AttributePatch.previous_values:type_name -> datapower.noesis.v1.AttributePatch.PreviousValuesEntry
	6,  // 8: datapower.noesis.v1.AttributePatch.source:type_name -> datapower.noesis.v1.SourceInfo
	18, // 9: datapower.noesis.v1.FullState.attributes:type_name -> datapower.noesis.v1.FullState.AttributesEntry
	7,  // 10: datapower.noesis.v1.FullState.batch_run:type_name -> datapower.noesis.v1.BatchRunInfo
	21, // 11: datapower.noesis.v1.SourceInfo.source_timestamp:type_name -> google.protobuf.Timestamp
	19, // 12: datapower.noesis.v1.SourceInfo.metadata:type_name -> datapower.noesis.v1.SourceInfo.MetadataEntry
	21, // 13: datapower.noesis.v1.BatchRunInfo.started_at:type_name -> google.protobuf.Timestamp
	21, // 14: datapower.noesis.v1.DeleteEvent.deleted_at:type_name -> google.protobuf.Timestamp
	2,  // 15: datapower.noesis.v1.TransformEventBatch.events:type_name -> datapower.noesis.v1.TransformEvent
	10, // 16: datapower.noesis.v1.TransformEventBatch.metadata:type_name -> datapower.noesis.v1.BatchMetadata
	21, // 17: datapower.noesis.v1.BatchMetadata.created_at:type_name -> google.protobuf.Timestamp
	21, // 18: datapower.noesis.v1.BatchMetadata.first_event_time:type_name -> google.protobuf.Timestamp
	21, // 19: datapower.noesis.v1.BatchMetadata.last_event_time:type_name -> google.protobuf.Timestamp
	21, // 20: datapower.noesis.v1.EventStatistics.window_start:type_name -> google.protobuf.Timestamp
	21, // 21: datapower.noesis.v1.EventStatistics.window_end:type_name -> google.protobuf.Timestamp
	20, // 22: datapower.noesis.v1.EventStatistics.job_stats:type_name -> datapower.noesis.v1.EventStatistics.JobStatsEntry
	1,  // 23: datapower.noesis.v1.JobStatistics.job_type:type_name -> datapower.noesis.v1.JobType
	21, // 24: datapower.noesis.v1.JobStatistics.last_event_time:type_name -> google.protobuf.Timestamp
	14, // 25: datapower.noesis.v1.EventValidationResult.schema_violations:type_name -> datapower.noesis.v1.SchemaViolation
	0,  // 26: datapower.noesis.v1.TransformEventFilter.event_types:type_name -> datapower.noesis.v1.EventType
	21, // 27: datapower.noesis.v1.TransformEventFilter.start_time:type_name -> google.protobuf.Timestamp
	21, // 28: datapower.noesis.v1.TransformEventFilter.end_time:type_name -> google.protobuf.Timestamp
	22, // 29: datapower.noesis.v1.AttributePatch.ChangesEntry.value:type_name -> google.protobuf.Value
	22, // 30: datapower.noesis.v1.AttributePatch.PreviousValuesEntry.value:type_name -> google.protobuf.Value
	22, // 31: datapower.noesis.v1.FullState.AttributesEntry.value:type_name -> google.protobuf.Value
	12, // 32: datapower.noesis.v1.EventStatistics.JobStatsEntry.value:type_name -> datapower.noesis.v1.JobStatistics
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_datapower_noesis_v1_patch_events_proto_init() }
func file_datapower_noesis_v1_patch_events_proto_init() {
	if File_datapower_noesis_v1_patch_events_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_patch_events_proto_rawDesc), len(file_datapower_noesis_v1_patch_events_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datapower_noesis_v1_patch_events_proto_goTypes,
		DependencyIndexes: file_datapower_noesis_v1_patch_events_proto_depIdxs,
		EnumInfos:         file_datapower_noesis_v1_patch_events_proto_enumTypes,
		MessageInfos:      file_datapower_noesis_v1_patch_events_proto_msgTypes,
	}.Build()
	File_datapower_noesis_v1_patch_events_proto = out.File
	file_datapower_noesis_v1_patch_events_proto_goTypes = nil
	file_datapower_noesis_v1_patch_events_proto_depIdxs = nil
}
