// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: datapower/noesis/v1/enrichment_service.proto

package noesisv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flink-specific enrichment response with additional timing information
type FlinkEnrichmentResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EnrichedRecord   *structpb.Struct       `protobuf:"bytes,1,opt,name=enriched_record,json=enrichedRecord,proto3" json:"enriched_record,omitempty"`
	AddedFields      map[string]string      `protobuf:"bytes,2,rep,name=added_fields,json=addedFields,proto3" json:"added_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Errors           []string               `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	ProcessingTimeMs int64                  `protobuf:"varint,4,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"` // Flink-specific timing
	FlinkTaskId      string                 `protobuf:"bytes,5,opt,name=flink_task_id,json=flinkTaskId,proto3" json:"flink_task_id,omitempty"`                 // Flink task identifier
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FlinkEnrichmentResponse) Reset() {
	*x = FlinkEnrichmentResponse{}
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlinkEnrichmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkEnrichmentResponse) ProtoMessage() {}

func (x *FlinkEnrichmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkEnrichmentResponse.ProtoReflect.Descriptor instead.
func (*FlinkEnrichmentResponse) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP(), []int{0}
}

func (x *FlinkEnrichmentResponse) GetEnrichedRecord() *structpb.Struct {
	if x != nil {
		return x.EnrichedRecord
	}
	return nil
}

func (x *FlinkEnrichmentResponse) GetAddedFields() map[string]string {
	if x != nil {
		return x.AddedFields
	}
	return nil
}

func (x *FlinkEnrichmentResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *FlinkEnrichmentResponse) GetProcessingTimeMs() int64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

func (x *FlinkEnrichmentResponse) GetFlinkTaskId() string {
	if x != nil {
		return x.FlinkTaskId
	}
	return ""
}

// Batch enrichment request for Flink
type BatchFlinkEnrichmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*EnrichmentRequest   `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	BatchId       int32                  `protobuf:"varint,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"` // Flink batch identifier
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchFlinkEnrichmentRequest) Reset() {
	*x = BatchFlinkEnrichmentRequest{}
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFlinkEnrichmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFlinkEnrichmentRequest) ProtoMessage() {}

func (x *BatchFlinkEnrichmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFlinkEnrichmentRequest.ProtoReflect.Descriptor instead.
func (*BatchFlinkEnrichmentRequest) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP(), []int{1}
}

func (x *BatchFlinkEnrichmentRequest) GetRequests() []*EnrichmentRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchFlinkEnrichmentRequest) GetBatchId() int32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

// Batch enrichment response for Flink
type BatchFlinkEnrichmentResponse struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	Responses             []*FlinkEnrichmentResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	TotalProcessingTimeMs int64                      `protobuf:"varint,2,opt,name=total_processing_time_ms,json=totalProcessingTimeMs,proto3" json:"total_processing_time_ms,omitempty"` // Total batch processing time
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BatchFlinkEnrichmentResponse) Reset() {
	*x = BatchFlinkEnrichmentResponse{}
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFlinkEnrichmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFlinkEnrichmentResponse) ProtoMessage() {}

func (x *BatchFlinkEnrichmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFlinkEnrichmentResponse.ProtoReflect.Descriptor instead.
func (*BatchFlinkEnrichmentResponse) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP(), []int{2}
}

func (x *BatchFlinkEnrichmentResponse) GetResponses() []*FlinkEnrichmentResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchFlinkEnrichmentResponse) GetTotalProcessingTimeMs() int64 {
	if x != nil {
		return x.TotalProcessingTimeMs
	}
	return 0
}

// Flink-specific history request with temporal queries
type FlinkHistoryRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Table             string                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Id                string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	StartDate         string                 `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate           string                 `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Fields            []string               `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	IncludeWatermarks bool                   `protobuf:"varint,6,opt,name=include_watermarks,json=includeWatermarks,proto3" json:"include_watermarks,omitempty"` // Flink-specific: include event time watermarks
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FlinkHistoryRequest) Reset() {
	*x = FlinkHistoryRequest{}
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlinkHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkHistoryRequest) ProtoMessage() {}

func (x *FlinkHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkHistoryRequest.ProtoReflect.Descriptor instead.
func (*FlinkHistoryRequest) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP(), []int{3}
}

func (x *FlinkHistoryRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *FlinkHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlinkHistoryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *FlinkHistoryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *FlinkHistoryRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FlinkHistoryRequest) GetIncludeWatermarks() bool {
	if x != nil {
		return x.IncludeWatermarks
	}
	return false
}

// Flink-specific history response
type FlinkHistoryResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Records       []*FlinkHistoricalRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Error         string                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	QueryTimeMs   int64                    `protobuf:"varint,3,opt,name=query_time_ms,json=queryTimeMs,proto3" json:"query_time_ms,omitempty"` // Flink query execution time
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlinkHistoryResponse) Reset() {
	*x = FlinkHistoryResponse{}
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlinkHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkHistoryResponse) ProtoMessage() {}

func (x *FlinkHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkHistoryResponse.ProtoReflect.Descriptor instead.
func (*FlinkHistoryResponse) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP(), []int{4}
}

func (x *FlinkHistoryResponse) GetRecords() []*FlinkHistoricalRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *FlinkHistoryResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FlinkHistoryResponse) GetQueryTimeMs() int64 {
	if x != nil {
		return x.QueryTimeMs
	}
	return 0
}

// Historical record with Flink-specific metadata
type FlinkHistoricalRecord struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Data           *structpb.Struct       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ValidFrom      string                 `protobuf:"bytes,2,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo        string                 `protobuf:"bytes,3,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	ChangeType     string                 `protobuf:"bytes,4,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	EventTime      int64                  `protobuf:"varint,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`                // Flink event time
	ProcessingTime int64                  `protobuf:"varint,6,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"` // Flink processing time
	Watermark      string                 `protobuf:"bytes,7,opt,name=watermark,proto3" json:"watermark,omitempty"`                                  // Flink watermark information
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlinkHistoricalRecord) Reset() {
	*x = FlinkHistoricalRecord{}
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlinkHistoricalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlinkHistoricalRecord) ProtoMessage() {}

func (x *FlinkHistoricalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_enrichment_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlinkHistoricalRecord.ProtoReflect.Descriptor instead.
func (*FlinkHistoricalRecord) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP(), []int{5}
}

func (x *FlinkHistoricalRecord) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FlinkHistoricalRecord) GetValidFrom() string {
	if x != nil {
		return x.ValidFrom
	}
	return ""
}

func (x *FlinkHistoricalRecord) GetValidTo() string {
	if x != nil {
		return x.ValidTo
	}
	return ""
}

func (x *FlinkHistoricalRecord) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *FlinkHistoricalRecord) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *FlinkHistoricalRecord) GetProcessingTime() int64 {
	if x != nil {
		return x.ProcessingTime
	}
	return 0
}

func (x *FlinkHistoricalRecord) GetWatermark() string {
	if x != nil {
		return x.Watermark
	}
	return ""
}

var File_datapower_noesis_v1_enrichment_service_proto protoreflect.FileDescriptor

const file_datapower_noesis_v1_enrichment_service_proto_rawDesc = "" +
	"\n" +
	",datapower/noesis/v1/enrichment_service.proto\x12\x13datapower.noesis.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\"datapower/noesis/v1/services.proto\"\xe7\x02\n" +
	"\x17FlinkEnrichmentResponse\x12@\n" +
	"\x0fenriched_record\x18\x01 \x01(\v2\x17.google.protobuf.StructR\x0eenrichedRecord\x12`\n" +
	"\fadded_fields\x18\x02 \x03(\v2=.datapower.noesis.v1.FlinkEnrichmentResponse.AddedFieldsEntryR\vaddedFields\x12\x16\n" +
	"\x06errors\x18\x03 \x03(\tR\x06errors\x12,\n" +
	"\x12processing_time_ms\x18\x04 \x01(\x03R\x10processingTimeMs\x12\"\n" +
	"\rflink_task_id\x18\x05 \x01(\tR\vflinkTaskId\x1a>\n" +
	"\x10AddedFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"|\n" +
	"\x1bBatchFlinkEnrichmentRequest\x12B\n" +
	"\brequests\x18\x01 \x03(\v2&.datapower.noesis.v1.EnrichmentRequestR\brequests\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\x05R\abatchId\"\xa3\x01\n" +
	"\x1cBatchFlinkEnrichmentResponse\x12J\n" +
	"\tresponses\x18\x01 \x03(\v2,.datapower.noesis.v1.FlinkEnrichmentResponseR\tresponses\x127\n" +
	"\x18total_processing_time_ms\x18\x02 \x01(\x03R\x15totalProcessingTimeMs\"\xbc\x01\n" +
	"\x13FlinkHistoryRequest\x12\x14\n" +
	"\x05table\x18\x01 \x01(\tR\x05table\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"start_date\x18\x03 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x04 \x01(\tR\aendDate\x12\x16\n" +
	"\x06fields\x18\x05 \x03(\tR\x06fields\x12-\n" +
	"\x12include_watermarks\x18\x06 \x01(\bR\x11includeWatermarks\"\x96\x01\n" +
	"\x14FlinkHistoryResponse\x12D\n" +
	"\arecords\x18\x01 \x03(\v2*.datapower.noesis.v1.FlinkHistoricalRecordR\arecords\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\"\n" +
	"\rquery_time_ms\x18\x03 \x01(\x03R\vqueryTimeMs\"\x85\x02\n" +
	"\x15FlinkHistoricalRecord\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.google.protobuf.StructR\x04data\x12\x1d\n" +
	"\n" +
	"valid_from\x18\x02 \x01(\tR\tvalidFrom\x12\x19\n" +
	"\bvalid_to\x18\x03 \x01(\tR\avalidTo\x12\x1f\n" +
	"\vchange_type\x18\x04 \x01(\tR\n" +
	"changeType\x12\x1d\n" +
	"\n" +
	"event_time\x18\x05 \x01(\x03R\teventTime\x12'\n" +
	"\x0fprocessing_time\x18\x06 \x01(\x03R\x0eprocessingTime\x12\x1c\n" +
	"\twatermark\x18\a \x01(\tR\twatermark2\xf9\x01\n" +
	"\x16FlinkEnrichmentService\x12d\n" +
	"\fEnrichRecord\x12&.datapower.noesis.v1.EnrichmentRequest\x1a,.datapower.noesis.v1.FlinkEnrichmentResponse\x12y\n" +
	"\x12BatchEnrichRecords\x120.datapower.noesis.v1.BatchFlinkEnrichmentRequest\x1a1.datapower.noesis.v1.BatchFlinkEnrichmentResponse2\xa8\x02\n" +
	"\x13FlinkRawDataService\x12[\n" +
	"\n" +
	"GetRowById\x12%.datapower.noesis.v1.RowLookupRequest\x1a&.datapower.noesis.v1.RowLookupResponse\x12Q\n" +
	"\x06Search\x12\".datapower.noesis.v1.SearchRequest\x1a#.datapower.noesis.v1.SearchResponse\x12a\n" +
	"\n" +
	"GetHistory\x12(.datapower.noesis.v1.FlinkHistoryRequest\x1a).datapower.noesis.v1.FlinkHistoryResponseB\x8b\x01\n" +
	"\x16io.datapower.noesis.v1B\x1bFlinkEnrichmentServiceProtoP\x01ZRgithub.com/data-power-io/noesis-protocol/languages/go/datapower/noesis/v1;noesisv1b\x06proto3"

var (
	file_datapower_noesis_v1_enrichment_service_proto_rawDescOnce sync.Once
	file_datapower_noesis_v1_enrichment_service_proto_rawDescData []byte
)

func file_datapower_noesis_v1_enrichment_service_proto_rawDescGZIP() []byte {
	file_datapower_noesis_v1_enrichment_service_proto_rawDescOnce.Do(func() {
		file_datapower_noesis_v1_enrichment_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_enrichment_service_proto_rawDesc), len(file_datapower_noesis_v1_enrichment_service_proto_rawDesc)))
	})
	return file_datapower_noesis_v1_enrichment_service_proto_rawDescData
}

var file_datapower_noesis_v1_enrichment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_datapower_noesis_v1_enrichment_service_proto_goTypes = []any{
	(*FlinkEnrichmentResponse)(nil),      // 0: datapower.noesis.v1.FlinkEnrichmentResponse
	(*BatchFlinkEnrichmentRequest)(nil),  // 1: datapower.noesis.v1.BatchFlinkEnrichmentRequest
	(*BatchFlinkEnrichmentResponse)(nil), // 2: datapower.noesis.v1.BatchFlinkEnrichmentResponse
	(*FlinkHistoryRequest)(nil),          // 3: datapower.noesis.v1.FlinkHistoryRequest
	(*FlinkHistoryResponse)(nil),         // 4: datapower.noesis.v1.FlinkHistoryResponse
	(*FlinkHistoricalRecord)(nil),        // 5: datapower.noesis.v1.FlinkHistoricalRecord
	nil,                                  // 6: datapower.noesis.v1.FlinkEnrichmentResponse.AddedFieldsEntry
	(*structpb.Struct)(nil),              // 7: google.protobuf.Struct
	(*EnrichmentRequest)(nil),            // 8: datapower.noesis.v1.EnrichmentRequest
	(*RowLookupRequest)(nil),             // 9: datapower.noesis.v1.RowLookupRequest
	(*SearchRequest)(nil),                // 10: datapower.noesis.v1.SearchRequest
	(*RowLookupResponse)(nil),            // 11: datapower.noesis.v1.RowLookupResponse
	(*SearchResponse)(nil),               // 12: datapower.noesis.v1.SearchResponse
}
var file_datapower_noesis_v1_enrichment_service_proto_depIdxs = []int32{
	7,  // 0: datapower.noesis.v1.FlinkEnrichmentResponse.enriched_record:type_name -> google.protobuf.Struct
	6,  // 1: datapower.noesis.v1.FlinkEnrichmentResponse.added_fields:type_name -> datapower.noesis.v1.FlinkEnrichmentResponse.AddedFieldsEntry
	8,  // 2: datapower.noesis.v1.BatchFlinkEnrichmentRequest.requests:type_name -> datapower.noesis.v1.EnrichmentRequest
	0,  // 3: datapower.noesis.v1.BatchFlinkEnrichmentResponse.responses:type_name -> datapower.noesis.v1.FlinkEnrichmentResponse
	5,  // 4: datapower.noesis.v1.FlinkHistoryResponse.records:type_name -> datapower.noesis.v1.FlinkHistoricalRecord
	7,  // 5: datapower.noesis.v1.FlinkHistoricalRecord.data:type_name -> google.protobuf.Struct
	8,  // 6: datapower.noesis.v1.FlinkEnrichmentService.EnrichRecord:input_type -> datapower.noesis.v1.EnrichmentRequest
	1,  // 7: datapower.noesis.v1.FlinkEnrichmentService.BatchEnrichRecords:input_type -> datapower.noesis.v1.BatchFlinkEnrichmentRequest
	9,  // 8: datapower.noesis.v1.FlinkRawDataService.GetRowById:input_type -> datapower.noesis.v1.RowLookupRequest
	10, // 9: datapower.noesis.v1.FlinkRawDataService.Search:input_type -> datapower.noesis.v1.SearchRequest
	3,  // 10: datapower.noesis.v1.FlinkRawDataService.GetHistory:input_type -> datapower.noesis.v1.FlinkHistoryRequest
	0,  // 11: datapower.noesis.v1.FlinkEnrichmentService.EnrichRecord:output_type -> datapower.noesis.v1.FlinkEnrichmentResponse
	2,  // 12: datapower.noesis.v1.FlinkEnrichmentService.BatchEnrichRecords:output_type -> datapower.noesis.v1.BatchFlinkEnrichmentResponse
	11, // 13: datapower.noesis.v1.FlinkRawDataService.GetRowById:output_type -> datapower.noesis.v1.RowLookupResponse
	12, // 14: datapower.noesis.v1.FlinkRawDataService.Search:output_type -> datapower.noesis.v1.SearchResponse
	4,  // 15: datapower.noesis.v1.FlinkRawDataService.GetHistory:output_type -> datapower.noesis.v1.FlinkHistoryResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_datapower_noesis_v1_enrichment_service_proto_init() }
func file_datapower_noesis_v1_enrichment_service_proto_init() {
	if File_datapower_noesis_v1_enrichment_service_proto != nil {
		return
	}
	file_datapower_noesis_v1_services_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_enrichment_service_proto_rawDesc), len(file_datapower_noesis_v1_enrichment_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_datapower_noesis_v1_enrichment_service_proto_goTypes,
		DependencyIndexes: file_datapower_noesis_v1_enrichment_service_proto_depIdxs,
		MessageInfos:      file_datapower_noesis_v1_enrichment_service_proto_msgTypes,
	}.Build()
	File_datapower_noesis_v1_enrichment_service_proto = out.File
	file_datapower_noesis_v1_enrichment_service_proto_goTypes = nil
	file_datapower_noesis_v1_enrichment_service_proto_depIdxs = nil
}
