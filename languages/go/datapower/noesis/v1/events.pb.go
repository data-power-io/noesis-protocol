// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: datapower/noesis/v1/events.proto

package noesisv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExtractionStatus int32

const (
	ExtractionStatus_EXTRACTION_STATUS_UNSPECIFIED ExtractionStatus = 0
	ExtractionStatus_EXTRACTION_STATUS_SUCCESS     ExtractionStatus = 1
	ExtractionStatus_EXTRACTION_STATUS_PARTIAL     ExtractionStatus = 2
	ExtractionStatus_EXTRACTION_STATUS_FAILED      ExtractionStatus = 3
)

// Enum value maps for ExtractionStatus.
var (
	ExtractionStatus_name = map[int32]string{
		0: "EXTRACTION_STATUS_UNSPECIFIED",
		1: "EXTRACTION_STATUS_SUCCESS",
		2: "EXTRACTION_STATUS_PARTIAL",
		3: "EXTRACTION_STATUS_FAILED",
	}
	ExtractionStatus_value = map[string]int32{
		"EXTRACTION_STATUS_UNSPECIFIED": 0,
		"EXTRACTION_STATUS_SUCCESS":     1,
		"EXTRACTION_STATUS_PARTIAL":     2,
		"EXTRACTION_STATUS_FAILED":      3,
	}
)

func (x ExtractionStatus) Enum() *ExtractionStatus {
	p := new(ExtractionStatus)
	*p = x
	return p
}

func (x ExtractionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtractionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_datapower_noesis_v1_events_proto_enumTypes[0].Descriptor()
}

func (ExtractionStatus) Type() protoreflect.EnumType {
	return &file_datapower_noesis_v1_events_proto_enumTypes[0]
}

func (x ExtractionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtractionStatus.Descriptor instead.
func (ExtractionStatus) EnumDescriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{0}
}

type ImportStatus int32

const (
	ImportStatus_IMPORT_STATUS_UNSPECIFIED ImportStatus = 0
	ImportStatus_IMPORT_STATUS_SUCCESS     ImportStatus = 1
	ImportStatus_IMPORT_STATUS_BLOCKED     ImportStatus = 2
	ImportStatus_IMPORT_STATUS_FAILED      ImportStatus = 3
	ImportStatus_IMPORT_STATUS_PARTIAL     ImportStatus = 4
)

// Enum value maps for ImportStatus.
var (
	ImportStatus_name = map[int32]string{
		0: "IMPORT_STATUS_UNSPECIFIED",
		1: "IMPORT_STATUS_SUCCESS",
		2: "IMPORT_STATUS_BLOCKED",
		3: "IMPORT_STATUS_FAILED",
		4: "IMPORT_STATUS_PARTIAL",
	}
	ImportStatus_value = map[string]int32{
		"IMPORT_STATUS_UNSPECIFIED": 0,
		"IMPORT_STATUS_SUCCESS":     1,
		"IMPORT_STATUS_BLOCKED":     2,
		"IMPORT_STATUS_FAILED":      3,
		"IMPORT_STATUS_PARTIAL":     4,
	}
)

func (x ImportStatus) Enum() *ImportStatus {
	p := new(ImportStatus)
	*p = x
	return p
}

func (x ImportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_datapower_noesis_v1_events_proto_enumTypes[1].Descriptor()
}

func (ImportStatus) Type() protoreflect.EnumType {
	return &file_datapower_noesis_v1_events_proto_enumTypes[1]
}

func (x ImportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportStatus.Descriptor instead.
func (ImportStatus) EnumDescriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{1}
}

// ExtractionEvent represents events in the extraction-events topic
type ExtractionEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ExtractionEvent_Start
	//	*ExtractionEvent_Data
	//	*ExtractionEvent_End
	Event         isExtractionEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractionEvent) Reset() {
	*x = ExtractionEvent{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionEvent) ProtoMessage() {}

func (x *ExtractionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionEvent.ProtoReflect.Descriptor instead.
func (*ExtractionEvent) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *ExtractionEvent) GetEvent() isExtractionEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ExtractionEvent) GetStart() *StartExtraction {
	if x != nil {
		if x, ok := x.Event.(*ExtractionEvent_Start); ok {
			return x.Start
		}
	}
	return nil
}

func (x *ExtractionEvent) GetData() *ExtractionData {
	if x != nil {
		if x, ok := x.Event.(*ExtractionEvent_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *ExtractionEvent) GetEnd() *EndExtraction {
	if x != nil {
		if x, ok := x.Event.(*ExtractionEvent_End); ok {
			return x.End
		}
	}
	return nil
}

type isExtractionEvent_Event interface {
	isExtractionEvent_Event()
}

type ExtractionEvent_Start struct {
	Start *StartExtraction `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type ExtractionEvent_Data struct {
	Data *ExtractionData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type ExtractionEvent_End struct {
	End *EndExtraction `protobuf:"bytes,3,opt,name=end,proto3,oneof"`
}

func (*ExtractionEvent_Start) isExtractionEvent_Event() {}

func (*ExtractionEvent_Data) isExtractionEvent_Event() {}

func (*ExtractionEvent_End) isExtractionEvent_Event() {}

// StartExtraction signals the beginning of an extraction session
type StartExtraction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Date          string                 `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartExtraction) Reset() {
	*x = StartExtraction{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartExtraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExtraction) ProtoMessage() {}

func (x *StartExtraction) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExtraction.ProtoReflect.Descriptor instead.
func (*StartExtraction) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *StartExtraction) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StartExtraction) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *StartExtraction) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *StartExtraction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StartExtraction) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ExtractionData contains the actual extracted record
type ExtractionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RecordId      string                 `protobuf:"bytes,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`             // Unique identifier for the record (e.g., primary key values)
	PipelineName  string                 `protobuf:"bytes,6,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"` // Name of the pipeline processing this data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractionData) Reset() {
	*x = ExtractionData{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionData) ProtoMessage() {}

func (x *ExtractionData) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionData.ProtoReflect.Descriptor instead.
func (*ExtractionData) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *ExtractionData) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExtractionData) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ExtractionData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExtractionData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExtractionData) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *ExtractionData) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

// EndExtraction signals the completion of an extraction session
type EndExtraction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Date          string                 `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RecordCount   int64                  `protobuf:"varint,5,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
	Status        ExtractionStatus       `protobuf:"varint,6,opt,name=status,proto3,enum=datapower.noesis.v1.ExtractionStatus" json:"status,omitempty"`
	PipelineName  string                 `protobuf:"bytes,7,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"` // Name of the pipeline that completed extraction
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndExtraction) Reset() {
	*x = EndExtraction{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndExtraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndExtraction) ProtoMessage() {}

func (x *EndExtraction) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndExtraction.ProtoReflect.Descriptor instead.
func (*EndExtraction) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *EndExtraction) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EndExtraction) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *EndExtraction) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EndExtraction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EndExtraction) GetRecordCount() int64 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

func (x *EndExtraction) GetStatus() ExtractionStatus {
	if x != nil {
		return x.Status
	}
	return ExtractionStatus_EXTRACTION_STATUS_UNSPECIFIED
}

func (x *EndExtraction) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

// TransformedEvent represents events in the import-events topic
type TransformedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *structpb.Struct       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Meta          *MetaInfo              `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformedEvent) Reset() {
	*x = TransformedEvent{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformedEvent) ProtoMessage() {}

func (x *TransformedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformedEvent.ProtoReflect.Descriptor instead.
func (*TransformedEvent) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *TransformedEvent) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransformedEvent) GetMeta() *MetaInfo {
	if x != nil {
		return x.Meta
	}
	return nil
}

// MetaInfo contains metadata about the transformed record
type MetaInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ColumnsReady     map[string]int32       `protobuf:"bytes,2,rep,name=columns_ready,json=columnsReady,proto3" json:"columns_ready,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Table            string                 `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	RecordId         string                 `protobuf:"bytes,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	PipelineName     string                 `protobuf:"bytes,6,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	TransformationId string                 `protobuf:"bytes,7,opt,name=transformation_id,json=transformationId,proto3" json:"transformation_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MetaInfo) Reset() {
	*x = MetaInfo{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInfo) ProtoMessage() {}

func (x *MetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInfo.ProtoReflect.Descriptor instead.
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *MetaInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MetaInfo) GetColumnsReady() map[string]int32 {
	if x != nil {
		return x.ColumnsReady
	}
	return nil
}

func (x *MetaInfo) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetaInfo) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *MetaInfo) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *MetaInfo) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *MetaInfo) GetTransformationId() string {
	if x != nil {
		return x.TransformationId
	}
	return ""
}

// ImportResult represents success/blocked import events
type ImportResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SessionId         string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Table             string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	RecordId          string                 `protobuf:"bytes,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Status            ImportStatus           `protobuf:"varint,4,opt,name=status,proto3,enum=datapower.noesis.v1.ImportStatus" json:"status,omitempty"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UnmetDependencies []string               `protobuf:"bytes,6,rep,name=unmet_dependencies,json=unmetDependencies,proto3" json:"unmet_dependencies,omitempty"`
	ErrorMessage      string                 `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ImportResult) Reset() {
	*x = ImportResult{}
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportResult) ProtoMessage() {}

func (x *ImportResult) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportResult.ProtoReflect.Descriptor instead.
func (*ImportResult) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *ImportResult) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ImportResult) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ImportResult) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *ImportResult) GetStatus() ImportStatus {
	if x != nil {
		return x.Status
	}
	return ImportStatus_IMPORT_STATUS_UNSPECIFIED
}

func (x *ImportResult) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ImportResult) GetUnmetDependencies() []string {
	if x != nil {
		return x.UnmetDependencies
	}
	return nil
}

func (x *ImportResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_datapower_noesis_v1_events_proto protoreflect.FileDescriptor

const file_datapower_noesis_v1_events_proto_rawDesc = "" +
	"\n" +
	" datapower/noesis/v1/events.proto\x12\x13datapower.noesis.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xcb\x01\n" +
	"\x0fExtractionEvent\x12<\n" +
	"\x05start\x18\x01 \x01(\v2$.datapower.noesis.v1.StartExtractionH\x00R\x05start\x129\n" +
	"\x04data\x18\x02 \x01(\v2#.datapower.noesis.v1.ExtractionDataH\x00R\x04data\x126\n" +
	"\x03end\x18\x03 \x01(\v2\".datapower.noesis.v1.EndExtractionH\x00R\x03endB\a\n" +
	"\x05event\"\xa1\x02\n" +
	"\x0fStartExtraction\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x12\n" +
	"\x04date\x18\x03 \x01(\tR\x04date\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12N\n" +
	"\bmetadata\x18\x05 \x03(\v22.datapower.noesis.v1.StartExtraction.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xee\x01\n" +
	"\x0eExtractionData\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x04data\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1b\n" +
	"\trecord_id\x18\x05 \x01(\tR\brecordId\x12#\n" +
	"\rpipeline_name\x18\x06 \x01(\tR\fpipelineName\"\x99\x02\n" +
	"\rEndExtraction\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x12\n" +
	"\x04date\x18\x03 \x01(\tR\x04date\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12!\n" +
	"\frecord_count\x18\x05 \x01(\x03R\vrecordCount\x12=\n" +
	"\x06status\x18\x06 \x01(\x0e2%.datapower.noesis.v1.ExtractionStatusR\x06status\x12#\n" +
	"\rpipeline_name\x18\a \x01(\tR\fpipelineName\"r\n" +
	"\x10TransformedEvent\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.google.protobuf.StructR\x04data\x121\n" +
	"\x04meta\x18\x02 \x01(\v2\x1d.datapower.noesis.v1.MetaInfoR\x04meta\"\xff\x02\n" +
	"\bMetaInfo\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12T\n" +
	"\rcolumns_ready\x18\x02 \x03(\v2/.datapower.noesis.v1.MetaInfo.ColumnsReadyEntryR\fcolumnsReady\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x14\n" +
	"\x05table\x18\x04 \x01(\tR\x05table\x12\x1b\n" +
	"\trecord_id\x18\x05 \x01(\tR\brecordId\x12#\n" +
	"\rpipeline_name\x18\x06 \x01(\tR\fpipelineName\x12+\n" +
	"\x11transformation_id\x18\a \x01(\tR\x10transformationId\x1a?\n" +
	"\x11ColumnsReadyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa9\x02\n" +
	"\fImportResult\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x1b\n" +
	"\trecord_id\x18\x03 \x01(\tR\brecordId\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.datapower.noesis.v1.ImportStatusR\x06status\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12-\n" +
	"\x12unmet_dependencies\x18\x06 \x03(\tR\x11unmetDependencies\x12#\n" +
	"\rerror_message\x18\a \x01(\tR\ferrorMessage*\x91\x01\n" +
	"\x10ExtractionStatus\x12!\n" +
	"\x1dEXTRACTION_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19EXTRACTION_STATUS_SUCCESS\x10\x01\x12\x1d\n" +
	"\x19EXTRACTION_STATUS_PARTIAL\x10\x02\x12\x1c\n" +
	"\x18EXTRACTION_STATUS_FAILED\x10\x03*\x98\x01\n" +
	"\fImportStatus\x12\x1d\n" +
	"\x19IMPORT_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15IMPORT_STATUS_SUCCESS\x10\x01\x12\x19\n" +
	"\x15IMPORT_STATUS_BLOCKED\x10\x02\x12\x18\n" +
	"\x14IMPORT_STATUS_FAILED\x10\x03\x12\x19\n" +
	"\x15IMPORT_STATUS_PARTIAL\x10\x04Bn\n" +
	"\x16io.datapower.noesis.v1P\x01ZRgithub.com/data-power-io/noesis-protocol/languages/go/datapower/noesis/v1;noesisv1b\x06proto3"

var (
	file_datapower_noesis_v1_events_proto_rawDescOnce sync.Once
	file_datapower_noesis_v1_events_proto_rawDescData []byte
)

func file_datapower_noesis_v1_events_proto_rawDescGZIP() []byte {
	file_datapower_noesis_v1_events_proto_rawDescOnce.Do(func() {
		file_datapower_noesis_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_events_proto_rawDesc), len(file_datapower_noesis_v1_events_proto_rawDesc)))
	})
	return file_datapower_noesis_v1_events_proto_rawDescData
}

var file_datapower_noesis_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_datapower_noesis_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_datapower_noesis_v1_events_proto_goTypes = []any{
	(ExtractionStatus)(0),         // 0: datapower.noesis.v1.ExtractionStatus
	(ImportStatus)(0),             // 1: datapower.noesis.v1.ImportStatus
	(*ExtractionEvent)(nil),       // 2: datapower.noesis.v1.ExtractionEvent
	(*StartExtraction)(nil),       // 3: datapower.noesis.v1.StartExtraction
	(*ExtractionData)(nil),        // 4: datapower.noesis.v1.ExtractionData
	(*EndExtraction)(nil),         // 5: datapower.noesis.v1.EndExtraction
	(*TransformedEvent)(nil),      // 6: datapower.noesis.v1.TransformedEvent
	(*MetaInfo)(nil),              // 7: datapower.noesis.v1.MetaInfo
	(*ImportResult)(nil),          // 8: datapower.noesis.v1.ImportResult
	nil,                           // 9: datapower.noesis.v1.StartExtraction.MetadataEntry
	nil,                           // 10: datapower.noesis.v1.MetaInfo.ColumnsReadyEntry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 12: google.protobuf.Struct
}
var file_datapower_noesis_v1_events_proto_depIdxs = []int32{
	3,  // 0: datapower.noesis.v1.ExtractionEvent.start:type_name -> datapower.noesis.v1.StartExtraction
	4,  // 1: datapower.noesis.v1.ExtractionEvent.data:type_name -> datapower.noesis.v1.ExtractionData
	5,  // 2: datapower.noesis.v1.ExtractionEvent.end:type_name -> datapower.noesis.v1.EndExtraction
	11, // 3: datapower.noesis.v1.StartExtraction.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 4: datapower.noesis.v1.StartExtraction.metadata:type_name -> datapower.noesis.v1.StartExtraction.MetadataEntry
	12, // 5: datapower.noesis.v1.ExtractionData.data:type_name -> google.protobuf.Struct
	11, // 6: datapower.noesis.v1.ExtractionData.timestamp:type_name -> google.protobuf.Timestamp
	11, // 7: datapower.noesis.v1.EndExtraction.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 8: datapower.noesis.v1.EndExtraction.status:type_name -> datapower.noesis.v1.ExtractionStatus
	12, // 9: datapower.noesis.v1.TransformedEvent.data:type_name -> google.protobuf.Struct
	7,  // 10: datapower.noesis.v1.TransformedEvent.meta:type_name -> datapower.noesis.v1.MetaInfo
	10, // 11: datapower.noesis.v1.MetaInfo.columns_ready:type_name -> datapower.noesis.v1.MetaInfo.ColumnsReadyEntry
	11, // 12: datapower.noesis.v1.MetaInfo.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 13: datapower.noesis.v1.ImportResult.status:type_name -> datapower.noesis.v1.ImportStatus
	11, // 14: datapower.noesis.v1.ImportResult.timestamp:type_name -> google.protobuf.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_datapower_noesis_v1_events_proto_init() }
func file_datapower_noesis_v1_events_proto_init() {
	if File_datapower_noesis_v1_events_proto != nil {
		return
	}
	file_datapower_noesis_v1_events_proto_msgTypes[0].OneofWrappers = []any{
		(*ExtractionEvent_Start)(nil),
		(*ExtractionEvent_Data)(nil),
		(*ExtractionEvent_End)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_events_proto_rawDesc), len(file_datapower_noesis_v1_events_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datapower_noesis_v1_events_proto_goTypes,
		DependencyIndexes: file_datapower_noesis_v1_events_proto_depIdxs,
		EnumInfos:         file_datapower_noesis_v1_events_proto_enumTypes,
		MessageInfos:      file_datapower_noesis_v1_events_proto_msgTypes,
	}.Build()
	File_datapower_noesis_v1_events_proto = out.File
	file_datapower_noesis_v1_events_proto_goTypes = nil
	file_datapower_noesis_v1_events_proto_depIdxs = nil
}
