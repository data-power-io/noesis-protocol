// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: datapower/noesis/v1/cdc_events.proto

package noesisv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CDC Operation types
type CDCOperation int32

const (
	CDCOperation_CDC_OPERATION_UNSPECIFIED CDCOperation = 0
	CDCOperation_CDC_OPERATION_CREATE      CDCOperation = 1
	CDCOperation_CDC_OPERATION_UPDATE      CDCOperation = 2
	CDCOperation_CDC_OPERATION_DELETE      CDCOperation = 3
	CDCOperation_CDC_OPERATION_SNAPSHOT    CDCOperation = 4 // For initial loads
)

// Enum value maps for CDCOperation.
var (
	CDCOperation_name = map[int32]string{
		0: "CDC_OPERATION_UNSPECIFIED",
		1: "CDC_OPERATION_CREATE",
		2: "CDC_OPERATION_UPDATE",
		3: "CDC_OPERATION_DELETE",
		4: "CDC_OPERATION_SNAPSHOT",
	}
	CDCOperation_value = map[string]int32{
		"CDC_OPERATION_UNSPECIFIED": 0,
		"CDC_OPERATION_CREATE":      1,
		"CDC_OPERATION_UPDATE":      2,
		"CDC_OPERATION_DELETE":      3,
		"CDC_OPERATION_SNAPSHOT":    4,
	}
)

func (x CDCOperation) Enum() *CDCOperation {
	p := new(CDCOperation)
	*p = x
	return p
}

func (x CDCOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_datapower_noesis_v1_cdc_events_proto_enumTypes[0].Descriptor()
}

func (CDCOperation) Type() protoreflect.EnumType {
	return &file_datapower_noesis_v1_cdc_events_proto_enumTypes[0]
}

func (x CDCOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CDCOperation.Descriptor instead.
func (CDCOperation) EnumDescriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{0}
}

// CDCEvent represents a Change Data Capture event
type CDCEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation type
	Operation CDCOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=datapower.noesis.v1.CDCOperation" json:"operation,omitempty"`
	// Session ID for tracking
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Table or entity name
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// Unique record identifier
	RecordId string `protobuf:"bytes,4,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// Values before the change (null for CREATE operations)
	BeforeValues *structpb.Struct `protobuf:"bytes,5,opt,name=before_values,json=beforeValues,proto3" json:"before_values,omitempty"`
	// Values after the change (null for DELETE operations)
	AfterValues *structpb.Struct `protobuf:"bytes,6,opt,name=after_values,json=afterValues,proto3" json:"after_values,omitempty"`
	// List of columns that changed (for UPDATE operations)
	ChangedColumns []string `protobuf:"bytes,7,rep,name=changed_columns,json=changedColumns,proto3" json:"changed_columns,omitempty"`
	// Optional transformation ID if this came from a transformation
	TransformationId string `protobuf:"bytes,8,opt,name=transformation_id,json=transformationId,proto3" json:"transformation_id,omitempty"`
	// Timestamp of the event
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Optional metadata for extensibility
	Metadata      map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCEvent) Reset() {
	*x = CDCEvent{}
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCEvent) ProtoMessage() {}

func (x *CDCEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCEvent.ProtoReflect.Descriptor instead.
func (*CDCEvent) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{0}
}

func (x *CDCEvent) GetOperation() CDCOperation {
	if x != nil {
		return x.Operation
	}
	return CDCOperation_CDC_OPERATION_UNSPECIFIED
}

func (x *CDCEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CDCEvent) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CDCEvent) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *CDCEvent) GetBeforeValues() *structpb.Struct {
	if x != nil {
		return x.BeforeValues
	}
	return nil
}

func (x *CDCEvent) GetAfterValues() *structpb.Struct {
	if x != nil {
		return x.AfterValues
	}
	return nil
}

func (x *CDCEvent) GetChangedColumns() []string {
	if x != nil {
		return x.ChangedColumns
	}
	return nil
}

func (x *CDCEvent) GetTransformationId() string {
	if x != nil {
		return x.TransformationId
	}
	return ""
}

func (x *CDCEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CDCEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CDCImportRequest represents a request to import based on CDC event
type CDCImportRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Event *CDCEvent              `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// Import configuration
	Config        *ImportConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCImportRequest) Reset() {
	*x = CDCImportRequest{}
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCImportRequest) ProtoMessage() {}

func (x *CDCImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCImportRequest.ProtoReflect.Descriptor instead.
func (*CDCImportRequest) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{1}
}

func (x *CDCImportRequest) GetEvent() *CDCEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *CDCImportRequest) GetConfig() *ImportConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// ImportConfig contains configuration for the import
type ImportConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target platform/system
	TargetPlatform string `protobuf:"bytes,1,opt,name=target_platform,json=targetPlatform,proto3" json:"target_platform,omitempty"`
	// Import mode (upsert, insert, update, etc.)
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// ID columns for matching
	IdColumns []string `protobuf:"bytes,3,rep,name=id_columns,json=idColumns,proto3" json:"id_columns,omitempty"`
	// Whether to check dependencies
	CheckDependencies bool `protobuf:"varint,4,opt,name=check_dependencies,json=checkDependencies,proto3" json:"check_dependencies,omitempty"`
	// Batch size for bulk operations
	BatchSize int32 `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// Additional configuration
	Options       map[string]string `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportConfig) Reset() {
	*x = ImportConfig{}
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportConfig) ProtoMessage() {}

func (x *ImportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportConfig.ProtoReflect.Descriptor instead.
func (*ImportConfig) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{2}
}

func (x *ImportConfig) GetTargetPlatform() string {
	if x != nil {
		return x.TargetPlatform
	}
	return ""
}

func (x *ImportConfig) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ImportConfig) GetIdColumns() []string {
	if x != nil {
		return x.IdColumns
	}
	return nil
}

func (x *ImportConfig) GetCheckDependencies() bool {
	if x != nil {
		return x.CheckDependencies
	}
	return false
}

func (x *ImportConfig) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ImportConfig) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// CDCImportResult represents the result of a CDC import operation
type CDCImportResult struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if failed
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Number of records affected
	RecordsAffected int32 `protobuf:"varint,3,opt,name=records_affected,json=recordsAffected,proto3" json:"records_affected,omitempty"`
	// Whether this was a partial import
	PartialImport bool `protobuf:"varint,4,opt,name=partial_import,json=partialImport,proto3" json:"partial_import,omitempty"`
	// Execution time in milliseconds
	ExecutionTimeMs int64 `protobuf:"varint,5,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
	// Additional result metadata
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCImportResult) Reset() {
	*x = CDCImportResult{}
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCImportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCImportResult) ProtoMessage() {}

func (x *CDCImportResult) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCImportResult.ProtoReflect.Descriptor instead.
func (*CDCImportResult) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{3}
}

func (x *CDCImportResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CDCImportResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CDCImportResult) GetRecordsAffected() int32 {
	if x != nil {
		return x.RecordsAffected
	}
	return 0
}

func (x *CDCImportResult) GetPartialImport() bool {
	if x != nil {
		return x.PartialImport
	}
	return false
}

func (x *CDCImportResult) GetExecutionTimeMs() int64 {
	if x != nil {
		return x.ExecutionTimeMs
	}
	return 0
}

func (x *CDCImportResult) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CDCBatch represents a batch of CDC events for bulk processing
type CDCBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Events        []*CDCEvent            `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	BatchSize     int32                  `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCBatch) Reset() {
	*x = CDCBatch{}
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCBatch) ProtoMessage() {}

func (x *CDCBatch) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCBatch.ProtoReflect.Descriptor instead.
func (*CDCBatch) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{4}
}

func (x *CDCBatch) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CDCBatch) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CDCBatch) GetEvents() []*CDCEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CDCBatch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CDCBatch) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// CDCStats for monitoring
type CDCStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Table          string                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	CreatesCount   int64                  `protobuf:"varint,2,opt,name=creates_count,json=createsCount,proto3" json:"creates_count,omitempty"`
	UpdatesCount   int64                  `protobuf:"varint,3,opt,name=updates_count,json=updatesCount,proto3" json:"updates_count,omitempty"`
	DeletesCount   int64                  `protobuf:"varint,4,opt,name=deletes_count,json=deletesCount,proto3" json:"deletes_count,omitempty"`
	UnchangedCount int64                  `protobuf:"varint,5,opt,name=unchanged_count,json=unchangedCount,proto3" json:"unchanged_count,omitempty"`
	PeriodStart    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CDCStats) Reset() {
	*x = CDCStats{}
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStats) ProtoMessage() {}

func (x *CDCStats) ProtoReflect() protoreflect.Message {
	mi := &file_datapower_noesis_v1_cdc_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStats.ProtoReflect.Descriptor instead.
func (*CDCStats) Descriptor() ([]byte, []int) {
	return file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP(), []int{5}
}

func (x *CDCStats) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *CDCStats) GetCreatesCount() int64 {
	if x != nil {
		return x.CreatesCount
	}
	return 0
}

func (x *CDCStats) GetUpdatesCount() int64 {
	if x != nil {
		return x.UpdatesCount
	}
	return 0
}

func (x *CDCStats) GetDeletesCount() int64 {
	if x != nil {
		return x.DeletesCount
	}
	return 0
}

func (x *CDCStats) GetUnchangedCount() int64 {
	if x != nil {
		return x.UnchangedCount
	}
	return 0
}

func (x *CDCStats) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *CDCStats) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

var File_datapower_noesis_v1_cdc_events_proto protoreflect.FileDescriptor

const file_datapower_noesis_v1_cdc_events_proto_rawDesc = "" +
	"\n" +
	"$datapower/noesis/v1/cdc_events.proto\x12\x13datapower.noesis.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xad\x04\n" +
	"\bCDCEvent\x12?\n" +
	"\toperation\x18\x01 \x01(\x0e2!.datapower.noesis.v1.CDCOperationR\toperation\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x12\x1b\n" +
	"\trecord_id\x18\x04 \x01(\tR\brecordId\x12<\n" +
	"\rbefore_values\x18\x05 \x01(\v2\x17.google.protobuf.StructR\fbeforeValues\x12:\n" +
	"\fafter_values\x18\x06 \x01(\v2\x17.google.protobuf.StructR\vafterValues\x12'\n" +
	"\x0fchanged_columns\x18\a \x03(\tR\x0echangedColumns\x12+\n" +
	"\x11transformation_id\x18\b \x01(\tR\x10transformationId\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12G\n" +
	"\bmetadata\x18\n" +
	" \x03(\v2+.datapower.noesis.v1.CDCEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x82\x01\n" +
	"\x10CDCImportRequest\x123\n" +
	"\x05event\x18\x01 \x01(\v2\x1d.datapower.noesis.v1.CDCEventR\x05event\x129\n" +
	"\x06config\x18\x02 \x01(\v2!.datapower.noesis.v1.ImportConfigR\x06config\"\xbe\x02\n" +
	"\fImportConfig\x12'\n" +
	"\x0ftarget_platform\x18\x01 \x01(\tR\x0etargetPlatform\x12\x12\n" +
	"\x04mode\x18\x02 \x01(\tR\x04mode\x12\x1d\n" +
	"\n" +
	"id_columns\x18\x03 \x03(\tR\tidColumns\x12-\n" +
	"\x12check_dependencies\x18\x04 \x01(\bR\x11checkDependencies\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x05 \x01(\x05R\tbatchSize\x12H\n" +
	"\aoptions\x18\x06 \x03(\v2..datapower.noesis.v1.ImportConfig.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdb\x02\n" +
	"\x0fCDCImportResult\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12)\n" +
	"\x10records_affected\x18\x03 \x01(\x05R\x0frecordsAffected\x12%\n" +
	"\x0epartial_import\x18\x04 \x01(\bR\rpartialImport\x12*\n" +
	"\x11execution_time_ms\x18\x05 \x01(\x03R\x0fexecutionTimeMs\x12N\n" +
	"\bmetadata\x18\x06 \x03(\v22.datapower.noesis.v1.CDCImportResult.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd0\x01\n" +
	"\bCDCBatch\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x125\n" +
	"\x06events\x18\x03 \x03(\v2\x1d.datapower.noesis.v1.CDCEventR\x06events\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x05 \x01(\x05R\tbatchSize\"\xb2\x02\n" +
	"\bCDCStats\x12\x14\n" +
	"\x05table\x18\x01 \x01(\tR\x05table\x12#\n" +
	"\rcreates_count\x18\x02 \x01(\x03R\fcreatesCount\x12#\n" +
	"\rupdates_count\x18\x03 \x01(\x03R\fupdatesCount\x12#\n" +
	"\rdeletes_count\x18\x04 \x01(\x03R\fdeletesCount\x12'\n" +
	"\x0funchanged_count\x18\x05 \x01(\x03R\x0eunchangedCount\x12=\n" +
	"\fperiod_start\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vperiodStart\x129\n" +
	"\n" +
	"period_end\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tperiodEnd*\x97\x01\n" +
	"\fCDCOperation\x12\x1d\n" +
	"\x19CDC_OPERATION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CDC_OPERATION_CREATE\x10\x01\x12\x18\n" +
	"\x14CDC_OPERATION_UPDATE\x10\x02\x12\x18\n" +
	"\x14CDC_OPERATION_DELETE\x10\x03\x12\x1a\n" +
	"\x16CDC_OPERATION_SNAPSHOT\x10\x04Bn\n" +
	"\x16io.datapower.noesis.v1P\x01ZRgithub.com/data-power-io/noesis-protocol/languages/go/datapower/noesis/v1;noesisv1b\x06proto3"

var (
	file_datapower_noesis_v1_cdc_events_proto_rawDescOnce sync.Once
	file_datapower_noesis_v1_cdc_events_proto_rawDescData []byte
)

func file_datapower_noesis_v1_cdc_events_proto_rawDescGZIP() []byte {
	file_datapower_noesis_v1_cdc_events_proto_rawDescOnce.Do(func() {
		file_datapower_noesis_v1_cdc_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_cdc_events_proto_rawDesc), len(file_datapower_noesis_v1_cdc_events_proto_rawDesc)))
	})
	return file_datapower_noesis_v1_cdc_events_proto_rawDescData
}

var file_datapower_noesis_v1_cdc_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_datapower_noesis_v1_cdc_events_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_datapower_noesis_v1_cdc_events_proto_goTypes = []any{
	(CDCOperation)(0),             // 0: datapower.noesis.v1.CDCOperation
	(*CDCEvent)(nil),              // 1: datapower.noesis.v1.CDCEvent
	(*CDCImportRequest)(nil),      // 2: datapower.noesis.v1.CDCImportRequest
	(*ImportConfig)(nil),          // 3: datapower.noesis.v1.ImportConfig
	(*CDCImportResult)(nil),       // 4: datapower.noesis.v1.CDCImportResult
	(*CDCBatch)(nil),              // 5: datapower.noesis.v1.CDCBatch
	(*CDCStats)(nil),              // 6: datapower.noesis.v1.CDCStats
	nil,                           // 7: datapower.noesis.v1.CDCEvent.MetadataEntry
	nil,                           // 8: datapower.noesis.v1.ImportConfig.OptionsEntry
	nil,                           // 9: datapower.noesis.v1.CDCImportResult.MetadataEntry
	(*structpb.Struct)(nil),       // 10: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_datapower_noesis_v1_cdc_events_proto_depIdxs = []int32{
	0,  // 0: datapower.noesis.v1.CDCEvent.operation:type_name -> datapower.noesis.v1.CDCOperation
	10, // 1: datapower.noesis.v1.CDCEvent.before_values:type_name -> google.protobuf.Struct
	10, // 2: datapower.noesis.v1.CDCEvent.after_values:type_name -> google.protobuf.Struct
	11, // 3: datapower.noesis.v1.CDCEvent.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 4: datapower.noesis.v1.CDCEvent.metadata:type_name -> datapower.noesis.v1.CDCEvent.MetadataEntry
	1,  // 5: datapower.noesis.v1.CDCImportRequest.event:type_name -> datapower.noesis.v1.CDCEvent
	3,  // 6: datapower.noesis.v1.CDCImportRequest.config:type_name -> datapower.noesis.v1.ImportConfig
	8,  // 7: datapower.noesis.v1.ImportConfig.options:type_name -> datapower.noesis.v1.ImportConfig.OptionsEntry
	9,  // 8: datapower.noesis.v1.CDCImportResult.metadata:type_name -> datapower.noesis.v1.CDCImportResult.MetadataEntry
	1,  // 9: datapower.noesis.v1.CDCBatch.events:type_name -> datapower.noesis.v1.CDCEvent
	11, // 10: datapower.noesis.v1.CDCBatch.created_at:type_name -> google.protobuf.Timestamp
	11, // 11: datapower.noesis.v1.CDCStats.period_start:type_name -> google.protobuf.Timestamp
	11, // 12: datapower.noesis.v1.CDCStats.period_end:type_name -> google.protobuf.Timestamp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_datapower_noesis_v1_cdc_events_proto_init() }
func file_datapower_noesis_v1_cdc_events_proto_init() {
	if File_datapower_noesis_v1_cdc_events_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datapower_noesis_v1_cdc_events_proto_rawDesc), len(file_datapower_noesis_v1_cdc_events_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datapower_noesis_v1_cdc_events_proto_goTypes,
		DependencyIndexes: file_datapower_noesis_v1_cdc_events_proto_depIdxs,
		EnumInfos:         file_datapower_noesis_v1_cdc_events_proto_enumTypes,
		MessageInfos:      file_datapower_noesis_v1_cdc_events_proto_msgTypes,
	}.Build()
	File_datapower_noesis_v1_cdc_events_proto = out.File
	file_datapower_noesis_v1_cdc_events_proto_goTypes = nil
	file_datapower_noesis_v1_cdc_events_proto_depIdxs = nil
}
