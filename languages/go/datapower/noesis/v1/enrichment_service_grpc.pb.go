// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: datapower/noesis/v1/enrichment_service.proto

package noesisv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlinkEnrichmentService_EnrichRecord_FullMethodName       = "/datapower.noesis.v1.FlinkEnrichmentService/EnrichRecord"
	FlinkEnrichmentService_BatchEnrichRecords_FullMethodName = "/datapower.noesis.v1.FlinkEnrichmentService/BatchEnrichRecords"
)

// FlinkEnrichmentServiceClient is the client API for FlinkEnrichmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for enriching records (Flink-specific implementation)
type FlinkEnrichmentServiceClient interface {
	// Enrich a single record
	EnrichRecord(ctx context.Context, in *EnrichmentRequest, opts ...grpc.CallOption) (*FlinkEnrichmentResponse, error)
	// Batch enrich multiple records
	BatchEnrichRecords(ctx context.Context, in *BatchFlinkEnrichmentRequest, opts ...grpc.CallOption) (*BatchFlinkEnrichmentResponse, error)
}

type flinkEnrichmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlinkEnrichmentServiceClient(cc grpc.ClientConnInterface) FlinkEnrichmentServiceClient {
	return &flinkEnrichmentServiceClient{cc}
}

func (c *flinkEnrichmentServiceClient) EnrichRecord(ctx context.Context, in *EnrichmentRequest, opts ...grpc.CallOption) (*FlinkEnrichmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlinkEnrichmentResponse)
	err := c.cc.Invoke(ctx, FlinkEnrichmentService_EnrichRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkEnrichmentServiceClient) BatchEnrichRecords(ctx context.Context, in *BatchFlinkEnrichmentRequest, opts ...grpc.CallOption) (*BatchFlinkEnrichmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchFlinkEnrichmentResponse)
	err := c.cc.Invoke(ctx, FlinkEnrichmentService_BatchEnrichRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlinkEnrichmentServiceServer is the server API for FlinkEnrichmentService service.
// All implementations must embed UnimplementedFlinkEnrichmentServiceServer
// for forward compatibility.
//
// Service for enriching records (Flink-specific implementation)
type FlinkEnrichmentServiceServer interface {
	// Enrich a single record
	EnrichRecord(context.Context, *EnrichmentRequest) (*FlinkEnrichmentResponse, error)
	// Batch enrich multiple records
	BatchEnrichRecords(context.Context, *BatchFlinkEnrichmentRequest) (*BatchFlinkEnrichmentResponse, error)
	mustEmbedUnimplementedFlinkEnrichmentServiceServer()
}

// UnimplementedFlinkEnrichmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlinkEnrichmentServiceServer struct{}

func (UnimplementedFlinkEnrichmentServiceServer) EnrichRecord(context.Context, *EnrichmentRequest) (*FlinkEnrichmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichRecord not implemented")
}
func (UnimplementedFlinkEnrichmentServiceServer) BatchEnrichRecords(context.Context, *BatchFlinkEnrichmentRequest) (*BatchFlinkEnrichmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEnrichRecords not implemented")
}
func (UnimplementedFlinkEnrichmentServiceServer) mustEmbedUnimplementedFlinkEnrichmentServiceServer() {
}
func (UnimplementedFlinkEnrichmentServiceServer) testEmbeddedByValue() {}

// UnsafeFlinkEnrichmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlinkEnrichmentServiceServer will
// result in compilation errors.
type UnsafeFlinkEnrichmentServiceServer interface {
	mustEmbedUnimplementedFlinkEnrichmentServiceServer()
}

func RegisterFlinkEnrichmentServiceServer(s grpc.ServiceRegistrar, srv FlinkEnrichmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlinkEnrichmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlinkEnrichmentService_ServiceDesc, srv)
}

func _FlinkEnrichmentService_EnrichRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkEnrichmentServiceServer).EnrichRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkEnrichmentService_EnrichRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkEnrichmentServiceServer).EnrichRecord(ctx, req.(*EnrichmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkEnrichmentService_BatchEnrichRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFlinkEnrichmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkEnrichmentServiceServer).BatchEnrichRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkEnrichmentService_BatchEnrichRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkEnrichmentServiceServer).BatchEnrichRecords(ctx, req.(*BatchFlinkEnrichmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlinkEnrichmentService_ServiceDesc is the grpc.ServiceDesc for FlinkEnrichmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlinkEnrichmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datapower.noesis.v1.FlinkEnrichmentService",
	HandlerType: (*FlinkEnrichmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrichRecord",
			Handler:    _FlinkEnrichmentService_EnrichRecord_Handler,
		},
		{
			MethodName: "BatchEnrichRecords",
			Handler:    _FlinkEnrichmentService_BatchEnrichRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datapower/noesis/v1/enrichment_service.proto",
}

const (
	FlinkRawDataService_GetRowById_FullMethodName = "/datapower.noesis.v1.FlinkRawDataService/GetRowById"
	FlinkRawDataService_Search_FullMethodName     = "/datapower.noesis.v1.FlinkRawDataService/Search"
	FlinkRawDataService_GetHistory_FullMethodName = "/datapower.noesis.v1.FlinkRawDataService/GetHistory"
)

// FlinkRawDataServiceClient is the client API for FlinkRawDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for accessing RAW data (Flink-specific implementation)
type FlinkRawDataServiceClient interface {
	// Get a row by ID from RAW storage
	GetRowById(ctx context.Context, in *RowLookupRequest, opts ...grpc.CallOption) (*RowLookupResponse, error)
	// Search for rows in RAW storage
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Get historical data for a record
	GetHistory(ctx context.Context, in *FlinkHistoryRequest, opts ...grpc.CallOption) (*FlinkHistoryResponse, error)
}

type flinkRawDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlinkRawDataServiceClient(cc grpc.ClientConnInterface) FlinkRawDataServiceClient {
	return &flinkRawDataServiceClient{cc}
}

func (c *flinkRawDataServiceClient) GetRowById(ctx context.Context, in *RowLookupRequest, opts ...grpc.CallOption) (*RowLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RowLookupResponse)
	err := c.cc.Invoke(ctx, FlinkRawDataService_GetRowById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkRawDataServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, FlinkRawDataService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkRawDataServiceClient) GetHistory(ctx context.Context, in *FlinkHistoryRequest, opts ...grpc.CallOption) (*FlinkHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlinkHistoryResponse)
	err := c.cc.Invoke(ctx, FlinkRawDataService_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlinkRawDataServiceServer is the server API for FlinkRawDataService service.
// All implementations must embed UnimplementedFlinkRawDataServiceServer
// for forward compatibility.
//
// Service for accessing RAW data (Flink-specific implementation)
type FlinkRawDataServiceServer interface {
	// Get a row by ID from RAW storage
	GetRowById(context.Context, *RowLookupRequest) (*RowLookupResponse, error)
	// Search for rows in RAW storage
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Get historical data for a record
	GetHistory(context.Context, *FlinkHistoryRequest) (*FlinkHistoryResponse, error)
	mustEmbedUnimplementedFlinkRawDataServiceServer()
}

// UnimplementedFlinkRawDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlinkRawDataServiceServer struct{}

func (UnimplementedFlinkRawDataServiceServer) GetRowById(context.Context, *RowLookupRequest) (*RowLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRowById not implemented")
}
func (UnimplementedFlinkRawDataServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFlinkRawDataServiceServer) GetHistory(context.Context, *FlinkHistoryRequest) (*FlinkHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedFlinkRawDataServiceServer) mustEmbedUnimplementedFlinkRawDataServiceServer() {}
func (UnimplementedFlinkRawDataServiceServer) testEmbeddedByValue()                             {}

// UnsafeFlinkRawDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlinkRawDataServiceServer will
// result in compilation errors.
type UnsafeFlinkRawDataServiceServer interface {
	mustEmbedUnimplementedFlinkRawDataServiceServer()
}

func RegisterFlinkRawDataServiceServer(s grpc.ServiceRegistrar, srv FlinkRawDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlinkRawDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlinkRawDataService_ServiceDesc, srv)
}

func _FlinkRawDataService_GetRowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkRawDataServiceServer).GetRowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkRawDataService_GetRowById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkRawDataServiceServer).GetRowById(ctx, req.(*RowLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkRawDataService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkRawDataServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkRawDataService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkRawDataServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkRawDataService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlinkHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkRawDataServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkRawDataService_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkRawDataServiceServer).GetHistory(ctx, req.(*FlinkHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlinkRawDataService_ServiceDesc is the grpc.ServiceDesc for FlinkRawDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlinkRawDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datapower.noesis.v1.FlinkRawDataService",
	HandlerType: (*FlinkRawDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRowById",
			Handler:    _FlinkRawDataService_GetRowById_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FlinkRawDataService_Search_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _FlinkRawDataService_GetHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datapower/noesis/v1/enrichment_service.proto",
}
