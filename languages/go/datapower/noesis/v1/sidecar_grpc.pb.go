// Sidecar API (gRPC) â€” Parquetizer Service
// ------------------------------------------
// Goal:
// - Provide a lightweight service that runs alongside connectors in the same pod
// - Receives streaming data from connectors over localhost
// - Writes data to Parquet format with efficient compression
// - Uploads completed Parquet files to object storage
//
// Usage:
// - Connector extracts data and streams it to sidecar via StreamData RPC
// - Sidecar buffers data, writes Parquet files, and uploads to S3/GCS
// - Sidecar notifies connector when upload is complete
//
// Benefits:
// - Separation of concerns: connector focuses on extraction, sidecar handles serialization
// - Reusable: same sidecar can work with any connector
// - Efficient: streaming reduces memory footprint

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: datapower/noesis/v1/sidecar.proto

package noesisv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sidecar_InitSession_FullMethodName      = "/datapower.noesis.v1.Sidecar/InitSession"
	Sidecar_StreamData_FullMethodName       = "/datapower.noesis.v1.Sidecar/StreamData"
	Sidecar_FinalizeSession_FullMethodName  = "/datapower.noesis.v1.Sidecar/FinalizeSession"
	Sidecar_GetSessionStatus_FullMethodName = "/datapower.noesis.v1.Sidecar/GetSessionStatus"
)

// SidecarClient is the client API for Sidecar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SidecarClient interface {
	// Initialize a new extraction session with schema and output configuration.
	InitSession(ctx context.Context, in *InitSessionRequest, opts ...grpc.CallOption) (*InitSessionResponse, error)
	// Stream data records to be written to Parquet.
	// The connector calls this repeatedly with batches of records.
	StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataBatch, StreamDataResponse], error)
	// Finalize the session and trigger final file uploads.
	FinalizeSession(ctx context.Context, in *FinalizeSessionRequest, opts ...grpc.CallOption) (*FinalizeSessionResponse, error)
	// Get current session status and statistics.
	GetSessionStatus(ctx context.Context, in *GetSessionStatusRequest, opts ...grpc.CallOption) (*GetSessionStatusResponse, error)
}

type sidecarClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarClient(cc grpc.ClientConnInterface) SidecarClient {
	return &sidecarClient{cc}
}

func (c *sidecarClient) InitSession(ctx context.Context, in *InitSessionRequest, opts ...grpc.CallOption) (*InitSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitSessionResponse)
	err := c.cc.Invoke(ctx, Sidecar_InitSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataBatch, StreamDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sidecar_ServiceDesc.Streams[0], Sidecar_StreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataBatch, StreamDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sidecar_StreamDataClient = grpc.ClientStreamingClient[DataBatch, StreamDataResponse]

func (c *sidecarClient) FinalizeSession(ctx context.Context, in *FinalizeSessionRequest, opts ...grpc.CallOption) (*FinalizeSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeSessionResponse)
	err := c.cc.Invoke(ctx, Sidecar_FinalizeSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) GetSessionStatus(ctx context.Context, in *GetSessionStatusRequest, opts ...grpc.CallOption) (*GetSessionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionStatusResponse)
	err := c.cc.Invoke(ctx, Sidecar_GetSessionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarServer is the server API for Sidecar service.
// All implementations must embed UnimplementedSidecarServer
// for forward compatibility.
type SidecarServer interface {
	// Initialize a new extraction session with schema and output configuration.
	InitSession(context.Context, *InitSessionRequest) (*InitSessionResponse, error)
	// Stream data records to be written to Parquet.
	// The connector calls this repeatedly with batches of records.
	StreamData(grpc.ClientStreamingServer[DataBatch, StreamDataResponse]) error
	// Finalize the session and trigger final file uploads.
	FinalizeSession(context.Context, *FinalizeSessionRequest) (*FinalizeSessionResponse, error)
	// Get current session status and statistics.
	GetSessionStatus(context.Context, *GetSessionStatusRequest) (*GetSessionStatusResponse, error)
	mustEmbedUnimplementedSidecarServer()
}

// UnimplementedSidecarServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSidecarServer struct{}

func (UnimplementedSidecarServer) InitSession(context.Context, *InitSessionRequest) (*InitSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSession not implemented")
}
func (UnimplementedSidecarServer) StreamData(grpc.ClientStreamingServer[DataBatch, StreamDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedSidecarServer) FinalizeSession(context.Context, *FinalizeSessionRequest) (*FinalizeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeSession not implemented")
}
func (UnimplementedSidecarServer) GetSessionStatus(context.Context, *GetSessionStatusRequest) (*GetSessionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionStatus not implemented")
}
func (UnimplementedSidecarServer) mustEmbedUnimplementedSidecarServer() {}
func (UnimplementedSidecarServer) testEmbeddedByValue()                 {}

// UnsafeSidecarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarServer will
// result in compilation errors.
type UnsafeSidecarServer interface {
	mustEmbedUnimplementedSidecarServer()
}

func RegisterSidecarServer(s grpc.ServiceRegistrar, srv SidecarServer) {
	// If the following call pancis, it indicates UnimplementedSidecarServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sidecar_ServiceDesc, srv)
}

func _Sidecar_InitSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).InitSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sidecar_InitSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).InitSession(ctx, req.(*InitSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SidecarServer).StreamData(&grpc.GenericServerStream[DataBatch, StreamDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sidecar_StreamDataServer = grpc.ClientStreamingServer[DataBatch, StreamDataResponse]

func _Sidecar_FinalizeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).FinalizeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sidecar_FinalizeSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).FinalizeSession(ctx, req.(*FinalizeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_GetSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).GetSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sidecar_GetSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).GetSessionStatus(ctx, req.(*GetSessionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sidecar_ServiceDesc is the grpc.ServiceDesc for Sidecar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sidecar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datapower.noesis.v1.Sidecar",
	HandlerType: (*SidecarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitSession",
			Handler:    _Sidecar_InitSession_Handler,
		},
		{
			MethodName: "FinalizeSession",
			Handler:    _Sidecar_FinalizeSession_Handler,
		},
		{
			MethodName: "GetSessionStatus",
			Handler:    _Sidecar_GetSessionStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _Sidecar_StreamData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "datapower/noesis/v1/sidecar.proto",
}
